<br><br><div class='container' id="showthing" style="width:80%">
	<h1>Experiment </h1>
	<hr>
	<h2>Name: <%= exp.name %> </h2>
	<hr>
	<h3>Comment: </h3>
	<%= exp.comment %>
	<hr>
	
	<br><b>Experimental results:</b>
	<%var resultsMessage=" - No results yet."%>
	<form action="/experiment/showresult/<%= exp.id %>" id="experiment-edit-form" method="POST" class="form-signin form-inline">
	<div class="tbl_container" style="overflow:auto; height: 300px;">
	<table id='tableResults' class='table table-bordered' style="text-align:left">
		<tr>
			
			<th>Simulation: Result Nb<%if (JSON.stringify(exp.results)=="[]") {%><%= resultsMessage %><%}%></th>
			<th>Status</th>
			<th><a href="/experiment/edit/<%= exp.id %>" class="btn btn-sm btn-primary">Add Simulation with new Condition</a></th>
		</tr>
		

		<% _.each(exp.results, function(res) { %>
		<tr data-id="<%= res.nb %>" data-model="experiment">
			
			<td style="font-size:15px;"><b>Simulation nb <%= res.nb %></b></td>
			<td style="font-size:15px;"><%= res.status %></td>
			<td >
				
				<input type="hidden" name="r<%= res.nb %>" id="r<%= res.nb %>"/>
				<input type="hidden" name="t<%= res.nb %>" id="t<%= res.nb %>"/>
				<input type="hidden" name="l<%= res.nb %>" id="l<%= res.nb %>" value="<%= exp.parameters['simulations_p'][res.nb][0][1] %>"/>
				Trajectory: <select class="form-control" id="trajectoryChoice<%= res.nb %>" style="width: 60px;" onclick="showTraj(<%= res.nb %>)">
				<% for (var i=0;i<exp.parameters['simulations_p'][res.nb][0][1];i++) {%>
					<option><%= i %></option>
				<% } %>
				</select> 
				
				<input type="submit" value="Show Trajectory" class="btn btn-sm btn-success" onclick="showRes(<%= res.nb %>)"/>
				
			</td>
		</tr> 

		<% }) %>
	</table>
	</div>
	
	<input type="hidden" name="_csrf" value="<%= _csrf %>" />
	</form>
	
	<br><b>Experiment parameters:</b>
	<br>
	<br><b>1. General Simulation Parameters:</b><div id="parametersTable1"></div>
	<br>
	<br><b>2. List of monitored petri-nets:</b><div id="parametersTable2"></div>
	<br>
	<br><b>3. QSSPN model instance (.json format):</b>
	
	<br>
	<br><b>Places List:</b><div id="placesTable"></div>
	<br>
	<b id="t">Transitions List:</b><div id="transitionsTable"></div>
	<br><b id="t1">Pre-places List:</b><div id="prePlacesTable"></div>
	<br><b id="t1.1">Activity Table:</b><div id="activityTable"></div>
	<br><b id="t2">Consumed List:</b><div id="consumedTable"></div>
	<br><b id="t3">Post-places List:</b><div id="postPlacesTable"></div>
	<br>	
	<b id="qssf" >QSS-Fluxes:</b><div id="qssfTable"></div>			
	<br><b id="qssf1">Constraints List:</b><div id="constraintsTable"></div>	
	<br><b id="qssf1.1">Activity Table:</b><div id="constraintsActivityTable" ></div>	
	<br><b id="qssf1.2">Flux List:</b><div id="fluxListActivityTable" ></div>
	<br><b id="qssf2">Objective List:</b><div id="objectiveTable"></div>
	<br><b id="qssf2.1">Activity Table:</b><div id="objectiveActivityTable"></div>
	
	<br><b>4. SFBA instance:</b>
	
	<br>
	<br><b>SFBA table:</b><div id="sfbaTable"></div>
	<br>
	
<script>

//console.log(<%- JSON.stringify(exp.results)%>)
function showRes(myid) {
	localStorage.setItem('myCurrentResult',myid);
     //window.myCurrentResult = myid;
	 //console.log(localStorage.getItem('myCurrentResult'));
	 var r_element = document.getElementById("r"+myid);
	 r_element.value=myid;
}


function showTraj(myid){
	var t_element =document.getElementById("t"+myid);
	var c_element =document.getElementById("trajectoryChoice"+myid);
	t_element.value=c_element.selectedIndex;
}

var dataJson=<%-JSON.stringify(exp.qsspn_model_instance)%>;	
//console.log(dataJson)	

var $container01 = $("#parametersTable1");
$container01.handsontable({
  data: [],
  width: $("#showthing").width(),
  height:50,
  dataSchema: {name: null, nb_samples: null, seed: null, time_max:null, max_timestep:null ,max_change:null, output:null, log:null, monitor:null, progress:null , target_name:null, target_quantity:null},
  startRows: 1,
  startCols: 12,
  maxRows: 1,
  colHeaders: ['Model SFBA Name', 'Nb Samples', 'Seed','Time_Max','Max_Timestep','Max_change','Output','Log','Monitor','Progress','Target name', 'Target Qty'],
  columns: [
    {data: "name"},
    {data: "nb_samples"},
    {data: "seed"},
    {data: "time_max"},
	{data: "max_timestep"},
	{data: "max_change"},
	{data: "output"},
	{data: "log"},
	{data: "monitor"},
	{data: "progress"},
	{data: "target_name"},
	{data: "target_quantity"}
  ],
  /*afterChange: function(changes, source) {
	var dt = this.getData();
	dataParam1=[dt[0].name , dt[0].nb_samples, dt[0].seed, dt[0].time_max, dt[0].max_timestep,dt[0].max_change, dt[0].output, dt[0].log, dt[0].monitor, dt[0].progress, dt[0].target_name, dt[0].target_quantity];
	document.getElementById("parameters").value=JSON.stringify([dataParam1,dataParam2]);
	//console.log(document.getElementById("parameters").value)
  },*/
  minSpareRows: 1
});

var tempdata0=<%- JSON.stringify(exp.parameters['default_p'])%>
//console.log(exp.parameters[0][1])
var tempdata01=[tempdata0[0]]
var ht = $('#parametersTable1').handsontable('getInstance');
if ($.isArray(tempdata01) && tempdata01[0] && $.isArray(tempdata01[0])){
	ht.populateFromArray (0, 0, tempdata01,tempdata01.length-1, 11);
}

var $container02 = $("#parametersTable2");
$container02.handsontable({
  data: [],
  width: $("#showthing").width(),
  height:200,
  dataSchema: {petri_name: null},
  startRows: 1,
  startCols: 1,
  colHeaders: ['Petri-Net Monitored'],
  columns: [
    {data: "petri_name"}
  ],
  /*afterChange: function(changes, source) {
	var dt = this.getData();
	
	dataParam2=[];
	for (var i=0, j= dt.length;i<j-1;i++){
		dataParam2.push(dt[i].petri_name);
	}
	//console.log(dataParam2)
	document.getElementById("parameters").value=JSON.stringify([dataParam1,dataParam2]);
	//console.log(document.getElementById("parameters").value)
	//console.log("aa")
  },*/
  minSpareRows: 1
});

var tempdata02=[];
for (var i=0,j=tempdata0[1].length;i<j;i++){
	tempdata02.push([tempdata0[1][i]])
}

var ht = $('#parametersTable2').handsontable('getInstance');
if ($.isArray(tempdata02) && tempdata02[0] && $.isArray(tempdata02[0])){
	ht.populateFromArray (0, 0, tempdata02,tempdata02.length-1, 0);
}

var $container1 = $("#placesTable");
$container1.handsontable({
  data: [],
  width: ($("#showthing").width()),
  height:200,
  dataSchema: {name: null, state: null, type: null, max:null, subsystem:null},
  startRows: 5,
  startCols: 5,
  colHeaders: ['Name', 'State', 'Type','Max','Sub-system'],
  columns: [
    {data: "name"},
    {data: "state"},
    {data: "type"},
    {data: "max"},
	{data: "subsystem"}
  ],
  /*afterChange: function(changes, source) {
    //console.log(this.getData());
	var dt = this.getData();
	for (var i=0, j= dt.length;i<j-1;i++){
		if (dataJson["places"].length <i+1){
			dataJson["places"].push({"place":{	"max" : dt[i].max,"name" : dt[i].name,"state" : dt[i].state,"type" : dt[i].type,"subsystem" : dt[i].subsystem} });
		}
		else dataJson["places"][i]={"place":{	"max" : dt[i].max,"name" : dt[i].name,"state" : dt[i].state,"type" : dt[i].type,"subsystem" : dt[i].subsystem} };
	}
	document.getElementById("mySpreadsheet").value=JSON.stringify(dataJson);
	
  },*/
  minSpareRows: 1
});


var tempdata1=new Array(dataJson["places"].length);
for (var i=0, j=dataJson["places"].length; i<j;i++){
	tempdata1[i]=new Array(5);
	tempdata1[i][0]=dataJson["places"][i]["place"]["name"];
	tempdata1[i][1]=dataJson["places"][i]["place"]["state"];
	tempdata1[i][2]=dataJson["places"][i]["place"]["type"];
	tempdata1[i][3]=dataJson["places"][i]["place"]["max"];
	tempdata1[i][4]=dataJson["places"][i]["place"]["subsystem"];
}
//console.log(tempdata1)
var ht = $('#placesTable').handsontable('getInstance');
if ($.isArray(tempdata1) && tempdata1[0] && $.isArray(tempdata1[0])){
	ht.populateFromArray (0, 0, tempdata1,tempdata1.length-1, 3);
}


var $container2 = $("#transitionsTable");
$container2.handsontable({
  data: [],
  width: ($("#showthing").width()),
  height:200,
  colWidths: [350, 50, 50, 50,100],
  dataSchema: {name: null, delay: null, type: null, c:null ,prePlaces:null,consumed:null, postPlaces:null , subsystem:null },
  startRows: 5,
  startCols: 5,
  colHeaders: ['Name', 'Delay','Type','c','Sub-system'],
  columns: [
    {data: "name"},
    {data: "delay"},
    {data: "type"},
    {data: "c"},
	{data: "subsystem"}
  ],
  afterSelection : function(rowNb, colNb) {
	presentTransitionNb=rowNb;
	document.getElementById("t1").innerHTML = 'Pre-places List for transition nb:'+rowNb+ ', name:'+this.getDataAtCell(rowNb,0);
	document.getElementById("t2").innerHTML = 'Consumed List for transition nb:'+rowNb+ ', name:'+this.getDataAtCell(rowNb,0);
	document.getElementById("t3").innerHTML = 'Post-places List for transition nb:'+rowNb+ ', name:'+this.getDataAtCell(rowNb,0);
	if(dataJson["transitions"][presentTransitionNb]){
		//dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"]=[{	"preplace" : {	"activity" : [{ "a" : 0.0, "t" : 1.0}],"name" : "dNTPs","stoichiometry" : 1.0}}];
		/*if(dataJson["transitions"][presentTransitionNb]["transition"] && dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"]){
			var dt=dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"];
			var ht = $('#prePlacesTable').handsontable('getInstance');
			ht.clear();
			var tmpT= new Array(dt.length);
			for (var i=0, j= dt.length;i<j;i++){
					tmpT[i]=new Array(2);
					tmpT[i][0]=dt[i]["preplace"]["name"];
					tmpT[i][1]=dt[i]["preplace"]["stoichiometry"];
			}	
			//console.log(tmpT)
			if ($.isArray(tmpT) && tmpT[0] && $.isArray(tmpT[0])){
				ht.populateFromArray (0, 0, tmpT,tmpT.length-1, 1)
			}
		}*/
		if(dataJson["transitions"][presentTransitionNb]["transition"]){ 
			if (dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"]){
				var dt=dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"];
				var ht = $('#prePlacesTable').handsontable('getInstance');
				ht.clear();
				var tmpT= new Array(dt.length);
				for (var i=0, j= dt.length;i<j;i++){
						tmpT[i]=new Array(2);
						tmpT[i][0]=dt[i]["preplace"]["name"];
						tmpT[i][1]=dt[i]["preplace"]["stoichiometry"];
				}	
				//console.log(tmpT)
				if ($.isArray(tmpT) && tmpT[0] && $.isArray(tmpT[0])){
					ht.populateFromArray (0, 0, tmpT,tmpT.length-1, 1)
				}
				
				if(presentPrePlaceNb!=-1 && dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][presentPrePlaceNb]){
					//console.log(dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][presentPrePlaceNb])
					if (dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][presentPrePlaceNb]["activity"]){
						var dt=dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][presentPrePlaceNb]["activity"];
						
						var tmpT= new Array(dt.length);
						for (var i=0, j= dt.length;i<j;i++){
								tmpT[i]=new Array(2);
								tmpT[i][0]=dt[i]["a"];
								tmpT[i][1]=dt[i]["t"];
						}	
						var ht = $('#activityTable').handsontable('getInstance');
						ht.clear();
						if ($.isArray(tmpT) && tmpT[0] && $.isArray(tmpT[0])){
							ht.populateFromArray (0, 0, tmpT,tmpT.length-1, 1);
						}
					}
					else{
						//var ht = $('#activityTable').handsontable('getInstance');
						//ht.clear();
					}
				}
				else{
					//var ht = $('#activityTable').handsontable('getInstance');
					//ht.clear();
				}
				
				
				
			}
			else{
				var ht = $('#prePlacesTable').handsontable('getInstance');
				ht.clear();
				//var ht = $('#activityTable').handsontable('getInstance');
				//ht.clear();
			}
			
			if (dataJson["transitions"][presentTransitionNb]["transition"]["consumed"]){
				var dt=dataJson["transitions"][presentTransitionNb]["transition"]["consumed"];
				var ht = $('#consumedTable').handsontable('getInstance');
				ht.clear();
				var tmpT= new Array(dt.length);
				for (var i=0, j= dt.length;i<j;i++){
						tmpT[i]=new Array(1);
						tmpT[i][0]=dt[i]["consumed_preplace"]["name"];
				}	
				//console.log(tmpT)
				if ($.isArray(tmpT) && tmpT[0] && $.isArray(tmpT[0])){
					ht.populateFromArray (0, 0, tmpT,tmpT.length-1, 1)
				}
				
			}
			else{
				var ht = $('#consumedTable').handsontable('getInstance');
				ht.clear();
			}
			
			if (dataJson["transitions"][presentTransitionNb]["transition"]["postplaces"]){
				var dt=dataJson["transitions"][presentTransitionNb]["transition"]["postplaces"];
				var ht = $('#postPlacesTable').handsontable('getInstance');
				ht.clear();
				var tmpT= new Array(dt.length);
				for (var i=0, j= dt.length;i<j;i++){
						tmpT[i]=new Array(2);
						tmpT[i][0]=dt[i]["postplace"]["name"];
						tmpT[i][1]=dt[i]["postplace"]["stoichiometry"];
				}	
				//console.log(tmpT)
				if ($.isArray(tmpT) && tmpT[0] && $.isArray(tmpT[0])){
					ht.populateFromArray (0, 0, tmpT,tmpT.length-1, 1)
				}
				
			}
			else{
				var ht = $('#postPlacesTable').handsontable('getInstance');
				ht.clear();
			}
			
			
		}
		
		
		else{
			var ht = $('#prePlacesTable').handsontable('getInstance');
			ht.clear();
			var ht = $('#consumedTable').handsontable('getInstance');
			ht.clear();
		}
	}
	else{
		var ht = $('#prePlacesTable').handsontable('getInstance');
		ht.clear();
		var ht = $('#consumedTable').handsontable('getInstance');
		ht.clear();
	}
  },
  /*afterChange: function(changes, source) {
    //console.log(this.getData());
	var dt = this.getData();
	for (var i=0, j= dt.length;i<j-1;i++){
		if (dataJson["transitions"].length <i+1){
			dataJson["transitions"].push({"transition":{ "name" : dt[i].name,"delay" : dt[i].delay,"type" : dt[i].type,"c" : dt[i].c,"subsystem" : dt[i].subsystem}});
		}
		else {
			dataJson["transitions"][i]["transition"]["name"]=dt[i].name;
			dataJson["transitions"][i]["transition"]["delay"]=dt[i].delay;
			dataJson["transitions"][i]["transition"]["type"]=dt[i].type;
			dataJson["transitions"][i]["transition"]["c"]=dt[i].c;
			dataJson["transitions"][i]["transition"]["subsystem"]=dt[i].subsystem;
		}
	}
	document.getElementById("mySpreadsheet").value=JSON.stringify(dataJson);
	//console.log(dataJson);
	//dataJson.places.push()
  },*/
  minSpareRows: 1
});


var tempdata2=new Array(dataJson["transitions"].length);
for (var i=0, j=dataJson["transitions"].length; i<j;i++){
	tempdata2[i]=new Array(4);
	tempdata2[i][0]=dataJson["transitions"][i]["transition"]["name"];
	tempdata2[i][1]=dataJson["transitions"][i]["transition"]["delay"];
	tempdata2[i][2]=dataJson["transitions"][i]["transition"]["type"];
	tempdata2[i][3]=dataJson["transitions"][i]["transition"]["c"];
}
//console.log(tempdata1)
var ht = $('#transitionsTable').handsontable('getInstance');
if ($.isArray(tempdata2) && tempdata2[0] && $.isArray(tempdata2[0])){
	ht.populateFromArray (0, 0, tempdata2,tempdata2.length-1, 3);
}



var $container3 = $("#postPlacesTable");
$container3.handsontable({
  data: [],
  width: ($("#showthing").width()),
  height:200,
  dataSchema: {name: null, stoichiometry: null  },
  startRows: 5,
  startCols: 4,
  colHeaders: ['Name', 'Stoichiometry'],
  columns: [
    {data: "name"},
    {data: "stoichiometry"},
  ],
  /*afterChange: function(changes, source) {
	if(dataJson["transitions"][presentTransitionNb] && dataJson["transitions"][presentTransitionNb]["transition"]){
		var dt = this.getData();
		
		if (dataJson["transitions"][presentTransitionNb]["transition"]["postplaces"]){
			for (var i=0, j= dt.length;i<j-1;i++){
				if (dataJson["transitions"][presentTransitionNb]["transition"]["postplaces"].length <i+1){
					dataJson["transitions"][presentTransitionNb]["transition"]["postplaces"].push({"postplace":{	"name" : dt[i].name, "stoichiometry" : dt[i].stoichiometry} });
				}
				else{
					dataJson["transitions"][presentTransitionNb]["transition"]["postplaces"][i]["postplace"]["name"]=dt[i].name;
					dataJson["transitions"][presentTransitionNb]["transition"]["postplaces"][i]["postplace"]["stoichiometry"]=dt[i].stoichiometry;
				}
			}
		}
		else{
			dataJson["transitions"][presentTransitionNb]["transition"]["postplaces"]=[];
			for (var i=0, j= dt.length;i<j-1;i++){
				dataJson["transitions"][presentTransitionNb]["transition"]["postplaces"].push({"postplace":{	"name" : dt[i].name, "stoichiometry" : dt[i].stoichiometry} });
			}
		}
		//console.log(dataJson["transitions"][presentTransitionNb]["transition"]["consumed"])
		
	}
	document.getElementById("mySpreadsheet").value=JSON.stringify(dataJson);
  },*/
  minSpareRows: 1
});
var $container4 = $("#prePlacesTable");
$container4.handsontable({
  data: [],
  width: ($("#showthing").width()),
  height:200,
  dataSchema: {name: null, stoichiometry: null  },
  startRows: 5,
  startCols: 4,
  colHeaders: ['Name','Stoichiometry'],
  columns: [
    {data: "name"},
    {data: "stoichiometry"},
  ],
  afterSelection : function(rowNb, colNb) {
	presentPrePlaceNb=rowNb;
	document.getElementById("t1.1").innerHTML = 'Activity table for pre-place nb:'+rowNb+ ', name:'+this.getDataAtCell(rowNb,0);
	
	if(dataJson["transitions"][presentTransitionNb]){
	//console.log(dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][presentPrePlaceNb])
		//dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"]=[{	"preplace" : {	"activity" : [{ "a" : 0.0, "t" : 1.0}],"name" : "dNTPs","stoichiometry" : 1.0}}];
		if(dataJson["transitions"][presentTransitionNb]["transition"] 
		&& dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"]
		&& dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][presentPrePlaceNb]
		){
			
			if (dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][presentPrePlaceNb]["preplace"]["activity"]){
				
				var dt=dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][presentPrePlaceNb]["preplace"]["activity"];
				//console.log(dt)
				var tmpT= new Array(dt.length);
				for (var i=0, j= dt.length;i<j;i++){
						tmpT[i]=new Array(2);
						tmpT[i][0]=dt[i]["a"];
						tmpT[i][1]=dt[i]["t"];
				}	
				var ht = $('#activityTable').handsontable('getInstance');
				ht.clear();
				if ($.isArray(tmpT) && tmpT[0] && $.isArray(tmpT[0])){
					ht.populateFromArray (0, 0, tmpT,tmpT.length-1, 1);
				}
			}
			else{
				var ht = $('#activityTable').handsontable('getInstance');
				ht.clear();
			}
			//var ht = $('#activityTable').handsontable('getInstance');
			//ht.clear();
			//var tmpT= new Array(dt.length);
			//for (var i=0, j= dt.length;i<j;i++){
			//		tmpT[i]=new Array(2);
			//		tmpT[i][0]=dt[i]["a"];
			//		tmpT[i][1]=dt[i]["t"];
			//}	
			//console.log(tmpT)
			//if ($.isArray(tmpT) && tmpT[0] && $.isArray(tmpT[0])){
			//	ht.populateFromArray (0, 0, tmpT,tmpT.length-1, 1)
			//}
		}
		else{
			var ht = $('#activityTable').handsontable('getInstance');
			ht.clear();
		}
	}
	else{
		var ht = $('#activityTable').handsontable('getInstance');
		ht.clear();
	}
  },
  
  /*afterChange: function(changes, source) {
	if(dataJson["transitions"][presentTransitionNb]){
		var dt = this.getData();
		if (dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"]){
			
			for (var i=0, j= dt.length;i<j-1;i++){
				if (dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"].length <i+1){
					dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"].push({"preplace":{	"name" : dt[i].name,"stoichiometry" : dt[i].stoichiometry, "activity":[]} });
				}
				else {
					
					dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][i]["preplace"]["name"]=dt[i].name;
					dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][i]["preplace"]["stoichiometry"]=dt[i].stoichiometry;
				}
			}
		}
		else{
			dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"]=[];
			for (var i=0, j= dt.length;i<j-1;i++){
				if (dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"].length <i+1){
					dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"].push({"preplace":{	"name" : dt[i].name,"stoichiometry" : dt[i].stoichiometry, "activity":[]} });
				}
				else {
					
					dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][i]["preplace"]["name"]=dt[i].name;
					dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][i]["preplace"]["stoichiometry"]=dt[i].stoichiometry;
				}
			}
		}
		
	}
	document.getElementById("mySpreadsheet").value=JSON.stringify(dataJson);
  },*/
  
  minSpareRows: 1
});

var $container5 = $("#activityTable");
$container5.handsontable({
  data: [],
  width: ($("#showthing").width()),
  height:200,
  dataSchema: {a: null, t:null},
  startRows: 5,
  startCols: 4,
  colHeaders: ['a', 't'],
  columns: [
    {data: "a"},
	{data: "t"},
  ],
  /*afterChange: function(changes, source) {
	if(presentTransitionNb!=-1 && presentPrePlaceNb!=-1 && dataJson["transitions"][presentTransitionNb]){
		
		if (dataJson["transitions"][presentTransitionNb]["transition"]
		&& dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"]
		&& dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][presentPrePlaceNb]){
			//console.log(dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][presentPrePlaceNb]);
			
			if(dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][presentPrePlaceNb]["activity"]){
				var dt = this.getData();
				//console.log(dt);
				for (var i=0, j= dt.length;i<j-1;i++){
					
					if (dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][presentPrePlaceNb]["activity"].length<i+1){
						dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][presentPrePlaceNb]["activity"].push({"a":dt[i].a,"t" : dt[i].t});		
					}
					else{
						dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][presentPrePlaceNb]["activity"][i]["a"]=dt[i].a;
						dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][presentPrePlaceNb]["activity"][i]["t"]=dt[i].t;	
					}
				}
				//console.log(dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][presentPrePlaceNb]["activity"]);
			}
			else{
				dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][presentPrePlaceNb]["activity"]=[];
				var dt = this.getData();
				for (var i=0, j= dt.length;i<j-1;i++){
					dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][presentPrePlaceNb]["activity"].push({"a":dt[i].a,"t" : dt[i].t});		
				}
			}
			//console.log(dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][presentPrePlaceNb]["activity"])
		}
		//if (!dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][presentPrePlaceNb]["activity"]){
		//	dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][presentPrePlaceNb]["activity"]=[];
		//}
	//	dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][presentPrePlaceNb]=[];
		//for (var i=0, j= dt.length;i<j-1;i++){
		//	if (dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][presentPrePlaceNb]["activity"].length <i+1){
		//		dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][presentPrePlaceNb]["activity"].push({"a":dt[i].a,"t" : dt[i].t});
		//	}
		//	else {
		//		dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][presentPrePlaceNb]["activity"][i]["a"]=dt[i].a;
		//		dataJson["transitions"][presentTransitionNb]["transition"]["preplaces"][presentPrePlaceNb]["activity"][i]["t"]=dt[i].t;
		//	}
		//}
	}
	document.getElementById("mySpreadsheet").value=JSON.stringify(dataJson);
  },*/
  minSpareRows: 1
});
var $container6 = $("#consumedTable");
$container6.handsontable({
  data: [],
  width: ($("#showthing").width()),
  height:200,
  dataSchema: {name: null},
  startRows: 5,
  startCols: 1,
  colHeaders: ['name'],
  columns: [
    {data: "name"}
  ],
  /*afterChange: function(changes, source) {
	if(dataJson["transitions"][presentTransitionNb] && dataJson["transitions"][presentTransitionNb]["transition"]){
		var dt = this.getData();
		
		if (dataJson["transitions"][presentTransitionNb]["transition"]["consumed"]){
			for (var i=0, j= dt.length;i<j-1;i++){
				if (dataJson["transitions"][presentTransitionNb]["transition"]["consumed"].length <i+1){
					dataJson["transitions"][presentTransitionNb]["transition"]["consumed"].push({"consumed_preplace":{	"name" : dt[i].name} });
				}
				else{
					dataJson["transitions"][presentTransitionNb]["transition"]["consumed"][i]["consumed_preplace"]["name"]=dt[i].name;
				}
			}
		}
		else{
			dataJson["transitions"][presentTransitionNb]["transition"]["consumed"]=[];
			for (var i=0, j= dt.length;i<j-1;i++){
				dataJson["transitions"][presentTransitionNb]["transition"]["consumed"].push({"consumed_preplace":{	"name" : dt[i].name} });
			}
		}
		//console.log(dataJson["transitions"][presentTransitionNb]["transition"]["consumed"])
		
	}
	document.getElementById("mySpreadsheet").value=JSON.stringify(dataJson);
  },*/
  minSpareRows: 1
});

var $container7 = $("#qssfTable");
$container7.handsontable({
  data: [],
  width: ($("#showthing").width()),
  height:200,
  dataSchema: {externality_tag: null, sfba_file: null},
  startRows: 1,
  startCols: 2,
  maxRows: 1,
  colHeaders: ['externality_tag', 'sfba_file'],
  columns: [
	{data: "externality_tag"},
	{data: "sfba_file"}
  ],
  /*afterChange: function(changes, source) {
	var dt = this.getData();
	
		dataJson["qssf"]["externality_tag"]=dt[0].externality_tag;
		dataJson["qssf"]["sfba_file"]=dt[0].sfba_file;	
		document.getElementById("mySpreadsheet").value=JSON.stringify(dataJson);
  },*/
  minSpareRows: 1
});


var tempdata3=[[dataJson["qssf"]["externality_tag"],dataJson["qssf"]["sfba_file"] ]];

var ht = $('#qssfTable').handsontable('getInstance');
if ($.isArray(tempdata3) && tempdata3[0] && $.isArray(tempdata3[0])){
	ht.populateFromArray (0, 0, tempdata3,tempdata3.length-1, 1);
}


var $container8 = $("#constraintsTable");
$container8.handsontable({
  data: [],
  width: ($("#showthing").width()),
  height:200,
  dataSchema: {name: null},
  startRows: 5,
  startCols: 1,
  colHeaders: ['name'],
  columns: [
    {data: "name"}
  ],
  afterSelection : function(rowNb, colNb) {
	//console.log(rowNb);
	//console.log($("t1").text())
	presentConstraintNb=rowNb;
	document.getElementById("qssf1.1").innerHTML = 'Activity Table for constraint nb:'+rowNb+ ', name:'+this.getDataAtCell(rowNb,0);
	document.getElementById("qssf1.2").innerHTML = 'Flux List for constraint nb:'+rowNb+ ', name:'+this.getDataAtCell(rowNb,0);
	
	if(dataJson["qssf"]["constraints"][presentConstraintNb]){
		if(dataJson["qssf"]["constraints"][presentConstraintNb]["constraint"]){ 
			if (dataJson["qssf"]["constraints"][presentConstraintNb]["constraint"]["activity"]){
				var dt=dataJson["qssf"]["constraints"][presentConstraintNb]["constraint"]["activity"];
				var ht = $('#constraintsActivityTable').handsontable('getInstance');
				ht.clear();
				var tmpT= new Array(dt.length);
				for (var i=0, j= dt.length;i<j;i++){
						tmpT[i]=new Array(3);
						tmpT[i][0]=dt[i]["lb"];
						tmpT[i][1]=dt[i]["ub"];
						tmpT[i][2]=dt[i]["t"];
				}	
				//console.log(tmpT)
				if ($.isArray(tmpT) && tmpT[0] && $.isArray(tmpT[0])){
					ht.populateFromArray (0, 0, tmpT,tmpT.length-1, 1)
				}
			}
			else{
				var ht = $('#constraintsActivityTable').handsontable('getInstance');
				ht.clear();
				//var ht = $('#activityTable').handsontable('getInstance');
				//ht.clear();
			}
			
			if (dataJson["qssf"]["constraints"][presentConstraintNb]["constraint"]["flux_list"]){
				var dt=dataJson["qssf"]["constraints"][presentConstraintNb]["constraint"]["flux_list"];
				var ht = $('#fluxListActivityTable').handsontable('getInstance');
				ht.clear();
				var tmpT= new Array(dt.length);
				for (var i=0, j= dt.length;i<j;i++){
						tmpT[i]=new Array(1);
						tmpT[i][0]=dt[i];
				}	
				//console.log(tmpT)
				if ($.isArray(tmpT) && tmpT[0] && $.isArray(tmpT[0])){
					ht.populateFromArray (0, 0, tmpT,tmpT.length-1, 1)
				}
				
			}
			else{
				var ht = $('#fluxListActivityTable').handsontable('getInstance');
				ht.clear();
			}
			
			
			
			
		}
		
		
		else{
			var ht = $('#constraintsActivityTable').handsontable('getInstance');
			ht.clear();
			var ht = $('#fluxListActivityTable').handsontable('getInstance');
			ht.clear();
		}
	}
	else{
		var ht = $('#constraintsActivityTable').handsontable('getInstance');
		ht.clear();
		var ht = $('#fluxListActivityTable').handsontable('getInstance');
		ht.clear();
	}
	
	
  },
  /*afterChange: function(changes, source) {
    //console.log(this.getData());
	var dt = this.getData();
	for (var i=0, j= dt.length;i<j-1;i++){
		if (dataJson["qssf"]["constraints"].length <i+1){
			dataJson["qssf"]["constraints"].push({"constraint":{	"name" : dt[i].name,"activity" : [],"flux_list" : []} });
		}
		else dataJson["qssf"]["constraints"][i]["constraint"]["name"]=dt[i].name;
	}
	document.getElementById("mySpreadsheet").value=JSON.stringify(dataJson);
	//console.log(dataJson["qssf"]["constraints"]);
	//dataJson.places.push()
  },*/
  minSpareRows: 1
});


var tempdata4=new Array(dataJson["qssf"]["constraints"].length);
for (var i=0, j=dataJson["qssf"]["constraints"].length; i<j;i++){
	tempdata4[i]=new Array(1);
	tempdata4[i][0]=dataJson["qssf"]["constraints"][i]["constraint"]["name"];
}
var ht = $('#constraintsTable').handsontable('getInstance');
if ($.isArray(tempdata4) && tempdata4[0] && $.isArray(tempdata4[0])){
	ht.populateFromArray (0, 0, tempdata4,tempdata4.length-1, 1);
}


var $container9 = $("#constraintsActivityTable");
$container9.handsontable({
  data: [],
  width: ($("#showthing").width()),
  height:200,
  dataSchema: {lb: null, ub: null, t: null},
  startRows: 5,
  startCols: 4,
  colHeaders: ['lb', 'ub', 't'],
  columns: [
    {data: "lb"},
	{data: "ub"},
	{data: "t"},
  ],
  /*afterChange: function(changes, source) {
	if(dataJson["qssf"]["constraints"][presentConstraintNb]){
		var dt = this.getData();
		if (dataJson["qssf"]["constraints"][presentConstraintNb]["constraint"]["activity"]){
			
			for (var i=0, j= dt.length;i<j-1;i++){
				if (dataJson["qssf"]["constraints"][presentConstraintNb]["constraint"]["activity"].length <i+1){
					dataJson["qssf"]["constraints"][presentConstraintNb]["constraint"]["activity"].push({	"ub" : dt[i].ub,"lb" : dt[i].lb, "t":dt[i].t} );
				}
				else {
					
					dataJson["qssf"]["constraints"][presentConstraintNb]["constraint"]["activity"][i]["ub"]=dt[i].ub;
					dataJson["qssf"]["constraints"][presentConstraintNb]["constraint"]["activity"][i]["lb"]=dt[i].lb;
					dataJson["qssf"]["constraints"][presentConstraintNb]["constraint"]["activity"][i]["t"]=dt[i].t;
				}
			}
			//console.log(dataJson["qssf"]["constraints"][presentConstraintNb]["constraint"]["activity"]);
		}
		
	}
	document.getElementById("mySpreadsheet").value=JSON.stringify(dataJson);
  },*/
  minSpareRows: 1
});

var $container10 = $("#fluxListActivityTable");
$container10.handsontable({
  data: [],
  width: ($("#showthing").width()),
  height:200,
  dataSchema: {name: null},
  startRows: 5,
  startCols: 1,
  colHeaders: ['name'],
  columns: [
    {data: "name"}
  ],
  /*afterChange: function(changes, source) {
	if(dataJson["qssf"]["constraints"][presentConstraintNb]){
		var dt = this.getData();
		if (dataJson["qssf"]["constraints"][presentConstraintNb]["constraint"]["flux_list"]){
			
			for (var i=0, j= dt.length;i<j-1;i++){
				if (dataJson["qssf"]["constraints"][presentConstraintNb]["constraint"]["flux_list"].length <i+1){
					dataJson["qssf"]["constraints"][presentConstraintNb]["constraint"]["flux_list"].push(dt[i].name);
				}
				else {
					
					dataJson["qssf"]["constraints"][presentConstraintNb]["constraint"]["flux_list"][i]=dt[i].name;
					
				}
			}
			//console.log(dataJson["qssf"]["constraints"][presentConstraintNb]["constraint"]["flux_list"]);
		}
		
	}
	document.getElementById("mySpreadsheet").value=JSON.stringify(dataJson);
  },*/
  minSpareRows: 1
});

var $container11 = $("#objectiveTable");
$container11.handsontable({
  data: [],
  width: ($("#showthing").width()),
  height:200,
  dataSchema: {name: null, objective: null},
  startRows: 5,
  startCols: 4,
  colHeaders: ['name', 'objective'],
  columns: [
    {data: "name"},
	{data: "objective"}
	
  ],
  afterSelection : function(rowNb, colNb) {
	//console.log(rowNb);
	//console.log($("t1").text())
	presentObjectiveNb=rowNb;
	document.getElementById("qssf2.1").innerHTML = 'Activity Table for objective nb:'+rowNb+ ', name:'+this.getDataAtCell(rowNb,0);
	
	if(dataJson["qssf"]["objectives"][presentObjectiveNb]){
		if(dataJson["qssf"]["objectives"][presentObjectiveNb]["objective"]){ 
			if (dataJson["qssf"]["objectives"][presentObjectiveNb]["objective"]["activity"]){
				var dt=dataJson["qssf"]["objectives"][presentObjectiveNb]["objective"]["activity"];
				var ht = $('#objectiveActivityTable').handsontable('getInstance');
				ht.clear();
				var tmpT= new Array(dt.length);
				for (var i=0, j= dt.length;i<j;i++){
						tmpT[i]=new Array(2);
						tmpT[i][0]=dt[i]["a"];
						tmpT[i][1]=dt[i]["t"];
						
				}	
				//console.log(tmpT)
				if ($.isArray(tmpT) && tmpT[0] && $.isArray(tmpT[0])){
					ht.populateFromArray (0, 0, tmpT,tmpT.length-1, 1)
				}
			}
			else{
				var ht = $('#objectiveActivityTable').handsontable('getInstance');
				ht.clear();
				//var ht = $('#activityTable').handsontable('getInstance');
				//ht.clear();
			}
			
		}
		
		
		else{
			var ht = $('#objectiveActivityTable').handsontable('getInstance');
			ht.clear();
			
		}
	}
	else{
		var ht = $('#objectiveActivityTable').handsontable('getInstance');
		ht.clear();
		
	}
	
  },
  /*afterChange: function(changes, source) {
    //console.log(this.getData());
	var dt = this.getData();
	for (var i=0, j= dt.length;i<j-1;i++){
		if (dataJson["qssf"]["objectives"].length <i+1){
			dataJson["qssf"]["objectives"].push({"objective":{	"name" : dt[i].name,"objective" : dt[i].objective,"activity" : []} });
		}
		else {
			dataJson["qssf"]["objectives"][i]["objective"]["name"]=dt[i].name;
			dataJson["qssf"]["objectives"][i]["objective"]["objective"]=dt[i].objective;
		}
	}
	document.getElementById("mySpreadsheet").value=JSON.stringify(dataJson);
	//console.log(dataJson["qssf"]["objectives"]);
	//dataJson.places.push()
  },*/
  minSpareRows: 1
});


var tempdata5=new Array(dataJson["qssf"]["objectives"].length);
for (var i=0, j=dataJson["qssf"]["objectives"].length; i<j;i++){
	tempdata5[i]=new Array(2);
	tempdata5[i][0]=dataJson["qssf"]["objectives"][i]["objective"]["name"];
	tempdata5[i][1]=dataJson["qssf"]["objectives"][i]["objective"]["objective"];
}
var ht = $('#objectiveTable').handsontable('getInstance');
if ($.isArray(tempdata5) && tempdata5[0] && $.isArray(tempdata5[0])){
	ht.populateFromArray (0, 0, tempdata5,tempdata5.length-1, 2);
}


var $container12 = $("#objectiveActivityTable");
$container12.handsontable({
  data: [],
  width: ($("#showthing").width()),
  height:150,
  dataSchema: {a: null, t: null},
  startRows: 5,
  startCols: 4,
  colHeaders: ['a', 't', ],
  columns: [
    {data: "a"},
	{data: "t"},
  ],
  /*afterChange: function(changes, source) {
	if(dataJson["qssf"]["objectives"][presentObjectiveNb]){
		var dt = this.getData();
		if (dataJson["qssf"]["objectives"][presentObjectiveNb]["objective"]["activity"]){
			
			for (var i=0, j= dt.length;i<j-1;i++){
				if (dataJson["qssf"]["objectives"][presentObjectiveNb]["objective"]["activity"].length <i+1){
					dataJson["qssf"]["objectives"][presentObjectiveNb]["objective"]["activity"].push({	"a" : dt[i].a,"t" : dt[i].t} );
				}
				else {
					
					dataJson["qssf"]["objectives"][presentObjectiveNb]["objective"]["activity"][i]["a"]=dt[i].a;
					dataJson["qssf"]["objectives"][presentObjectiveNb]["objective"]["activity"][i]["t"]=dt[i].t;
				}
			}
			//console.log(dataJson["qssf"]["objectives"][presentObjectiveNb]["objective"]["activity"]);
		}
		
	}
	document.getElementById("mySpreadsheet").value=JSON.stringify(dataJson);
  },*/
  minSpareRows: 1
});



var $container13 = $("#sfbaTable");
$container13.handsontable({
  data: [],
  width: ($("#showthing").width()),
  height:200,
  dataSchema: {name: null, formula: null, lb: null, ub:null,command:null, rule:null},
  colWidths: [55, (($("#showthing").width())-235)/2, 40, 40,100, (($("#showthing").width())-235)/2],
  startRows: 5,
  startCols: 6,
  colHeaders: ['Reaction name', 'Reaction Formula', 'Lb','Ub','Command','Gene/Reaction Rule'],
  columns: [
    {data: "name"},
    {data: "formula"},
    {data: "lb"},
    {data: "ub"},
	{data: "command"},
	{data: "rule"}
  ],
  /*afterChange: function(changes, source) {
    //console.log(this.getData());
	var dt = this.getData();
	
	for (var i=0, j= dt.length;i<j-1;i++){
		dataSfba[i]=new Array(5);
		dataSfba[i][0]=dt[i].name;
		dataSfba[i][1]=dt[i].formula;
		dataSfba[i][2]=dt[i].lb;
		dataSfba[i][3]=dt[i].ub;
		dataSfba[i][4]=dt[i].rule;
	}
	
		document.getElementById("mySfbaSpreadsheet").value=JSON.stringify(dataSfba);
	
	//console.log(JSON.stringify(dataSfba));
	//dataJson.places.push()
  },*/
  minSpareRows: 1
});


var tempdata6=<%- JSON.stringify(exp.sfba_model_instance)%>
var ht = $('#sfbaTable').handsontable('getInstance');
//console.log(ht)
if ($.isArray(tempdata6) && tempdata6[0] && $.isArray(tempdata6[0])){
	ht.populateFromArray (0, 0, tempdata6,tempdata6.length-1, 5);
}


jsPlumb.ready(function() {
	jsPlumb.connect({
		source:"qssf",
		target:"qssf1",
		anchor:"Left",
		
		connector:[ "Flowchart", { stub:[40, 60], gap:50, cornerRadius:5, alwaysRespectStubs:true } ],
		endpoint:"Blank"
		
	});
	jsPlumb.connect({
		source:"qssf1",
		target:"qssf1.1",
		
		anchor:"Left",
		connector:[ "Flowchart", { stub:[40, 60], gap:15, cornerRadius:5, alwaysRespectStubs:true } ],
		endpoint:"Blank"
	});
	jsPlumb.connect({
		source:"qssf1",
		target:"qssf1.2",
		anchor:"Left",
		connector:[ "Flowchart", { stub:[40, 60], gap:15, cornerRadius:5, alwaysRespectStubs:true } ],
		endpoint:"Blank"
	});
	jsPlumb.connect({
		source:"qssf1",
		target:"qssf2",
		anchor:"Left",
		connector:[ "Flowchart", { stub:[40, 60], gap:50, cornerRadius:5, alwaysRespectStubs:true } ],
		endpoint:"Blank"
	});
	jsPlumb.connect({
		source:"qssf2",
		target:"qssf2.1",
		anchor:"Left",
		connector:[ "Flowchart", { stub:[40, 60], gap:5, cornerRadius:5, alwaysRespectStubs:true } ],
		endpoint:"Blank"
	});
	jsPlumb.connect({
		source:"t",
		target:"t1",
		anchor:"Left",
		connector:[ "Flowchart", { stub:[40, 60], gap:50, cornerRadius:5, alwaysRespectStubs:true } ],
		endpoint:"Blank"
	});
	jsPlumb.connect({
		source:"t1",
		target:"t1.1",
		anchor:"Left",
		connector:[ "Flowchart", { stub:[40, 60], gap:15, cornerRadius:5, alwaysRespectStubs:true } ],
		endpoint:"Blank"
	});
	jsPlumb.connect({
		source:"t",
		target:"t2",
		anchor:"Left",
		connector:[ "Flowchart", { stub:[40, 60], gap:50, cornerRadius:5, alwaysRespectStubs:true } ],
		endpoint:"Blank"
	});
	jsPlumb.connect({
		source:"t",
		target:"t3",
		anchor:"Left",
		connector:[ "Flowchart", { stub:[40, 60], gap:50, cornerRadius:5, alwaysRespectStubs:true } ],
		endpoint:"Blank"
	});
	//jsPlumb.hide("t3");
});
		
		

var opsys=navigator.platform;
if (opsys.substring(0,3)=="Win"){
	//console.log("windoz")
}
else if (opsys.substring(0,3)=="Mac"){
	//console.log("mac")
}
else if (opsys.substring(0,3)=="Lin"){
	//console.log("linux")
}
else{
	//console.log("other os")
}
var mres= <%-JSON.stringify(exp)%>;
//console.log("exp: "+mres.results)		
</script>
	
</div>