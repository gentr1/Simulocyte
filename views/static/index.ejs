<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
<div class="container" id=>
  <div class="jumbotron">
    <h1>Simulocyte</h1>

    <h2>Online-based tool for the scientific community: construction and 3D visualisation of Dynamic Simulations of Molecular Interactions Networks of the cells </h2>
    <a href="/user/new" class="btn btn-lg btn-success">Sign up now!</a>
  </div>
  

<div id="container" id="flapjack" style="position: absolute;left: 0px;"></div>

<script type="x-shader/x-vertex" id="vertexShader">

			varying vec3 vWorldPosition;

			void main() {

				vec4 worldPosition = modelMatrix * vec4( position, 1.0 );
				vWorldPosition = worldPosition.xyz;

				gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

			}

		</script>

		<script type="x-shader/x-fragment" id="fragmentShader">

			uniform vec3 topColor;
			uniform vec3 bottomColor;
			uniform float offset;
			uniform float exponent;

			varying vec3 vWorldPosition;

			void main() {

				float h = normalize( vWorldPosition + offset ).y;
				gl_FragColor = vec4( mix( bottomColor, topColor, max( pow( h, exponent ), 0.0 ) ), 1.0 );

			}

		</script>

		<script>

			var SCREEN_WIDTH = window.innerWidth;
			var SCREEN_HEIGHT = window.innerHeight;
			var count=0;
			var container,stats;
			var camera, scene, renderer;
			var objects = {};
			var mouseX = 0, mouseY = 0;
			var clock = new THREE.Clock();
			var windowHalfX = window.innerWidth / 2;
			var windowHalfY = window.innerHeight / 2;
			
			
				
			var width = window.innerWidth;
			var height = window.innerHeight;
			var postprocessing = { enabled  : true };

			var shaderSettings = {
				rings: 3,
				samples: 4
			};
			var material_depth;
			
			init();
			animate();
			//var mesh, mesh2;
			//var meshes=[];
			function init() {

				container = document.createElement( 'div' );
				container.style.opacity = "0.0";
				//$('#flapjack').delay(1000).animate({ opacity: 1 }, 700);
				//$("container").delay(1000).animate({ opacity: 1 }, 700);â€‹
				document.body.appendChild( container );

				// CAMERA

				camera = new THREE.PerspectiveCamera( 80, SCREEN_WIDTH / SCREEN_HEIGHT, 1, 1000000 );
				camera.position.x = 700;
				camera.position.z = -1000;
				camera.position.y = 180;

				// SCENE

				scene = new THREE.Scene();
				scene.fog = new THREE.Fog( 0xffffff, 10000, 10000 );

				// CONTROLS

				//controls = new THREE.TrackballControls( camera );
				//controls.target.z = 150;

				// LIGHTS

				var directionalLight = new THREE.DirectionalLight( 0xff0000, 1.775 );
				directionalLight.position.set( 100, 100, -100 );
				scene.add( directionalLight );


				var hemiLight = new THREE.HemisphereLight( 0xff0000, 0xff0000, 0.25 );
				//hemiLight.color.setHSL( 0.6, 1, 0.75 );
				hemiLight.color.setHSL( 1.0, 0.0, 0.0 );
				
				hemiLight.groundColor.setHSL( 0.9, 0.5, 0.4 );
				hemiLight.position.y = 500;
				scene.add( hemiLight );

				// SKYDOME

				var vertexShader = document.getElementById( 'vertexShader' ).textContent;
				var fragmentShader = document.getElementById( 'fragmentShader' ).textContent;
				var uniforms = {
					topColor: 	 { type: "c", value: new THREE.Color( 0x7777ff ) },
					bottomColor: { type: "c", value: new THREE.Color( 0xff0000 ) },
					offset:		 { type: "f", value: 400 },
					exponent:	 { type: "f", value: 0.6 }
				}
				uniforms.topColor.value.copy( hemiLight.color );

				scene.fog.color.copy( uniforms.bottomColor.value );

				var skyGeo = new THREE.SphereGeometry( 2000, 32, 15 );
				var skyMat = new THREE.ShaderMaterial( { vertexShader: vertexShader, fragmentShader: fragmentShader, uniforms: uniforms, side: THREE.BackSide } );

				var sky = new THREE.Mesh( skyGeo, skyMat );
				scene.add( sky );
				
				var loader = new THREE.JSONLoader();

				//loader.load( "models-json/red-blood-cell.js", createScene1 );
				for (var i =0;i<50;i++){
					//loader.load( "/models-json/red_blood_cell2.js", createScene2 );
					//loader.load( "/models-json/red_blood_cell3.js", createScene2 );
					loader.load( "/models-json/red_blood_cell4.js", createScene2 );
				}
				//var tmaterial = this.titleMeshMaterial = new THREE.MeshLambertMaterial({color: 0xffffff, emissive: 0xffffff, transparent: true, opacity: 0.0});
				//var tgeometry = new THREE.TextGeometry("aaaaa", { size: 24, height : 0.001});
				//var tmesh = new THREE.Mesh(tgeometry, tmaterial )
				//tmesh.scale.set(1,1,0.1);
				//tmesh.position = new THREE.Vector3(-25,12,500)
				//scene.add( tmesh );
				
				//var geometry = new THREE.BoxGeometry( 200, 200, 200 );

				//var mytexture = THREE.ImageUtils.loadTexture( '/images/t1.jpg' );
				//texture.anisotropy = renderer.getMaxAnisotropy();

				//var mymaterial = new THREE.MeshBasicMaterial( { map: mytexture } );
				//var mymaterial = new THREE.MeshLambertMaterial( { map: mytexture, color: 0xff8800, ambient: 0x0000ff } );
				//mesh = new THREE.Mesh( geometry, mymaterial );
				//scene.add( mesh );
				// RENDERER

				renderer = new THREE.WebGLRenderer( { antialias: true , logarithmicDepthBuffer: true} );
				renderer.shadowMapEnabled = true;
				renderer.setClearColor( scene.fog.color, 1 );
				renderer.setSize( SCREEN_WIDTH, SCREEN_HEIGHT );
				
				initPostprocessing();
				
				//var sdistance = smoothstep(camera.near, camera.far, 5000);
				//var ldistance = linearize(1 -  sdistance);
				//postprocessing.bokeh_uniforms[ 'focalDepth' ].value = ldistance;
				
				
				renderer.domElement.style.position = "relative";
				container.appendChild( renderer.domElement );

				renderer.gammaInput = true;
				renderer.gammaOutput = true;

				// STATS

				stats = new Stats();
				container.appendChild( stats.domElement );
				
				
				effectController  = {

					enabled: true,
					jsDepthCalculation: false,
					shaderFocus: false,

					fstop: 15.2,
					maxblur: 1.0,

					showFocus: false,
					focalDepth: 22.8,
					manualdof: false,
					vignetting: false,
					depthblur: false,

					threshold: 0.5,
					gain: 2.0,
					bias: 0.5,
					fringe: 0.7,

					focalLength: 35,
					noise: true,
					pentagon: false,

					dithering: 0.0001


				};

				var matChanger = function( ) {

					for (var e in effectController) {
						if (e in postprocessing.bokeh_uniforms)
						postprocessing.bokeh_uniforms[ e ].value = effectController[ e ];
					}

					postprocessing.enabled = effectController.enabled;
					postprocessing.bokeh_uniforms[ 'znear' ].value = camera.near;
					postprocessing.bokeh_uniforms[ 'zfar' ].value = camera.far;
					camera.setLens(effectController.focalLength);

				};
				matChanger();
				
				
				
				
				// MODEL

				//var loader = new THREE.JSONLoader();
				//var callback = function ( geometry, materials ) { createScene( geometry, materials, 0, 0, 0, 0, 100 ) };
				

				//loader.load( "/models-json/lightmap.js", callback );
				//loader.load( "/models-json/red_blood_cell2.js", callback );
				//

				window.addEventListener( 'resize', onWindowResize, false );
				window.addEventListener( 'mousemove', onDocumentMouseMove, false );
			}
			
			
			function initPostprocessing() {

				postprocessing.scene = new THREE.Scene();

				postprocessing.camera = new THREE.OrthographicCamera( window.innerWidth / - 2, window.innerWidth / 2,  window.innerHeight / 2, window.innerHeight / - 2, -10000, 10000 );
				postprocessing.camera.position.z = 100;

				postprocessing.scene.add( postprocessing.camera );

				var pars = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat };
				postprocessing.rtTextureDepth = new THREE.WebGLRenderTarget( window.innerWidth, height, pars );
				postprocessing.rtTextureColor = new THREE.WebGLRenderTarget( window.innerWidth, height, pars );



				var bokeh_shader = THREE.BokehShader;

				postprocessing.bokeh_uniforms = THREE.UniformsUtils.clone( bokeh_shader.uniforms );

				postprocessing.bokeh_uniforms[ "tColor" ].value = postprocessing.rtTextureColor;
				postprocessing.bokeh_uniforms[ "tDepth" ].value = postprocessing.rtTextureDepth;

				postprocessing.bokeh_uniforms[ "textureWidth" ].value = window.innerWidth;

				postprocessing.bokeh_uniforms[ "textureHeight" ].value = height;

				postprocessing.materialBokeh = new THREE.ShaderMaterial( {

					uniforms: postprocessing.bokeh_uniforms,
					vertexShader: bokeh_shader.vertexShader,
					fragmentShader: bokeh_shader.fragmentShader,
					defines: {
						RINGS: shaderSettings.rings,
						SAMPLES: shaderSettings.samples
					}

				} );

				postprocessing.quad = new THREE.Mesh( new THREE.PlaneGeometry( window.innerWidth, window.innerHeight ), postprocessing.materialBokeh );
				postprocessing.quad.position.z = - 500;
				postprocessing.scene.add( postprocessing.quad );

			}

			function shaderUpdate() {
				postprocessing.materialBokeh.defines.RINGS = shaderSettings.rings;
				postprocessing.materialBokeh.defines.SAMPLES = shaderSettings.samples;

				postprocessing.materialBokeh.needsUpdate = true;

			}
			
			function smoothstep(near, far, depth) {
				var x = saturate( (depth - near) / (far - near));
				return x * x * (3- 2*x);
			}
			function linearize(depth) {
				var zfar = camera.far;
				var znear = camera.near;
				return -zfar * znear / (depth * (zfar - znear) - zfar);
			}

			function saturate(x) {
				return Math.max(0, Math.min(1, x));
			}
			
			function onDocumentMouseMove( event ) {

				mouseX = ( event.clientX - windowHalfX );
				mouseY = ( event.clientY - windowHalfY );
				postprocessing.bokeh_uniforms[ 'focusCoords' ].value.set(event.clientX / window.innerWidth, 1-event.clientY / window.innerHeight);
			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}
			
			function createScene1( geometry, materials ) {

				materials[ 0 ].shading = THREE.FlatShading;

				mesh = new THREE.Mesh( geometry, new THREE.MeshFaceMaterial( materials ) );
				mesh.position.x = 800;
				mesh.scale.x = mesh.scale.y = mesh.scale.z = 250;
				scene.add( mesh );

			}
			function createScene( geometry, materials, x, y, z, b, s ) {

				var mesh = new THREE.Mesh( geometry, new THREE.MeshFaceMaterial( materials ) );
				mesh.position.set( x, y, z );
				mesh.scale.set( s, s, s );
				scene.add( mesh );

			}

			function createScene2( geometry, materials ) {

				//materials[ 0 ].shading = THREE.FlatShading;
				var min = -3000;
				var max = 3000;
				
				//var imgTexture2 = THREE.ImageUtils.loadTexture( "/images/t1.jpg" );
				//imgTexture2.wrapS = imgTexture2.wrapT = THREE.RepeatWrapping;
				//imgTexture2.anisotropy = 16;
				//var material = new THREE.MeshBasicMaterial({map: imgTexture2});
				
				//var shape = new THREE.TextGeometry("Mehdi KHoury");
				//var wrapper = new THREE.MeshNormalMaterial({color: 0x00ff00});
				//var words = new THREE.Mesh(shape, wrapper);
				//words.rotation.y =Math.PI;
				//words.scale.x = 0.2;
				//words.scale.y = 0.3;
				//words.scale.z =0.1;
				//scene.add(words);
				
				var mesh = new THREE.Mesh( geometry, new THREE.MeshFaceMaterial( materials ) );
				mesh.position.x = Math.random()* (max - min) + min;;
				mesh.position.y = Math.random()* (max - min) + min;;
				mesh.position.z = Math.random()* (5000 - 2000) + 2000;;
				mesh.rotation.x = Math.PI *Math.random();
				mesh.rotation.z = Math.PI *Math.random();
				mesh.scale.x = mesh.scale.y = mesh.scale.z =150;
				mesh.id2 = "mesh"+(count++);
				objects[ mesh.id2 ] = mesh;
				scene.add( mesh );

			}

			

			//

			function animate() {

				requestAnimationFrame( animate );

				render();
				stats.update();

			}

			function render() {
			
				//container.style.opacity = "0.1";
				var opacity = parseFloat(container.style.opacity) ;
				if (opacity<1.0){
					opacity+=0.05;
					container.style.opacity = ""+opacity;
				}
				var delta = clock.getDelta();
				//controls.update( delta );
				camera.position.x += ( mouseX - camera.position.x ) * 0.05;
				camera.position.y += ( - mouseY - camera.position.y ) * 0.05;

				camera.lookAt( scene.position );
				//if ( mesh ) {

				//	mesh.rotation.x += 0.01;
				//	mesh.rotation.y += 0.01;
				//}
				for (var i in objects) {
					if (objects.hasOwnProperty(i)) {
								objects[i].rotation.x += 0.01;
								objects[i].rotation.y += 0.01;
					}
				}	
				
				//if ( mesh2 ) {

				//	mesh2.rotation.x += 0.01;
				//	mesh2.rotation.y += 0.01;

				//}
				if ( postprocessing.enabled ) {

					renderer.clear();

					// Render scene into texture

					scene.overrideMaterial = null;
					renderer.render( scene, camera, postprocessing.rtTextureColor, true );

					// Render depth into texture

					scene.overrideMaterial = material_depth;
					renderer.render( scene, camera, postprocessing.rtTextureDepth, true );

					// Render bokeh composite

					renderer.render( postprocessing.scene, postprocessing.camera );


				} else {

					scene.overrideMaterial = null;

					renderer.clear();
					renderer.render( scene, camera );

				}

			}


		</script>
</div>
<div id="info"><center>Web app and network visualisation by <a href="mailto:mehdi.khoury@gmail.com?Subject=Hello%20from%20simulocyte"" target="_blank">Mehdi Khoury</a></center></div>