<div class='container' >
	<div class="jumbotron">
	<h1>Metabolic networks </h1>
	
	
	<table class='table table-bordered' style="text-align:left">
		<tr>
			
			<th>Name</th>
			<th>Comment</th>
			<th><a href="/metabolic_net/new" class="btn btn-sm btn-primary">Create New</a></th>
		</tr>
		

		<% _.each(mtns, function(mtn) { %>
		<tr data-id="<%= mtn[0] %>" data-model="mtn">
			
			<td style="font-size:15px;"><b><%= mtn[1] %></b></td>
			<td style="font-size:15px;"><%= mtn[2] %></td>
			<td><a href="/metabolic_net/show/<%= mtn[0] %>" class="btn btn-sm btn-success">Show</a></td>
		</tr> 

		<% }) %>
	</table>
	
	
	
<div id="container" style="position: absolute;left: 0px;"></div>
</div>

<script>



var mtns=<%- JSON.stringify(mtns) %>;
var listMtns= [];
for (var i=0;i<mtns.length;i++){
	listMtns.push([mtns[i][1], mtns[i][3], mtns[i][4],mtns[i][5]]);
}
//console.log(mtns)


if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

			//var FOLLOW_CAMERA = false;

			var SCREEN_WIDTH = window.innerWidth;
			var SCREEN_HEIGHT = window.innerHeight;
			var SHADOW_MAP_WIDTH = 1024, SHADOW_MAP_HEIGHT = 1024;
			var container, stats;
			var camera, cameraTarget, scene, renderer, controls;
			var renderTarget;
			var spotLight, ambientLight;
			//var cubeCamera;
			var clock = new THREE.Clock();
			var mlib;
			var effectDirt, hblur, vblur, effectBloom, effectKeep, effectBlend, effectFXAA;
			var flareA, flareB;
			var sprites = [];
			var ground, groundBasic;
			var blur = false;
			var v = 0.9, vdir = 1;
			var text0 = document.createElement('div');
			text0.style.position = 'absolute';
			text0.style.width = 100;
			text0.style.height = 100;
			text0.style.color = "white";
			text0.style.textAlign="left";
			//text0.style.backgroundColor = "#FFFFCC";
			//text1.innerHTML = ' <input type="text" name="first_name" value="" maxlength="100" />';
			text0.innerHTML = 'hello ';
			text0.style.top = 200 + 'px';
			text0.style.left = 200 + 'px';
			document.body.appendChild(text0);
			
			var selectedModelName="";
			var mouseX = 0, mouseY = 0,			
			windowHalfX = window.innerWidth / 2,
			windowHalfY = window.innerHeight / 2;
			var mouse = new THREE.Vector2(), INTERSECTED;
			var select_mesh;
			//var projector = new THREE.Projector();
			var raycaster = new THREE.Raycaster();

			init();
			animate();

			function init() {

				container = document.getElementById( 'container' );
				
				//camera = new THREE.PerspectiveCamera( 33, window.innerWidth / window.innerHeight, 1, 100000 );
				//camera.position.z = 700;
				//camera.position.y = 100;
				camera = new THREE.PerspectiveCamera( 40, SCREEN_WIDTH / SCREEN_HEIGHT, 0.1, 1000000 );			
				camera.position.set( 3000, 100, 3000 );
				scene = new THREE.Scene();
				groundBasic = new THREE.MeshPhongMaterial( { 
					color: 0x9966ff, 
					ambient: 0x9966ff, // should generally match color
					specular: 0x050505,
					shininess: 500//wireframe: true
				} );
				

				ground = new THREE.Mesh( new THREE.PlaneGeometry( 50000, 50000 ), groundBasic );
				ground.position.y = 0;
				ground.rotation.x = - Math.PI / 2;
				scene.add( ground );

				ground.castShadow = false;
				ground.receiveShadow = true;

				// OBJECTS

				//var cylinderGeometry = new THREE.CylinderGeometry( 2, 50, 1000, 32 );
				//var sphereGeometry = new THREE.SphereGeometry( 100, 32, 16 );
				var boxGeometry = new THREE.BoxGeometry( 150, 50, 150 );
				var sy1 = -500 + 38;
				var sy2 = -88;

				
				
				for (var i=0;i<mtns.length;i++){
					var strColor='#'+Math.floor(Math.random()*16777215).toString(16);
					var object = new THREE.Mesh( boxGeometry, new THREE.MeshLambertMaterial( { color: strColor, ambient: strColor } ) );
					object.scale.y=Math.log(listMtns[i][2]*listMtns[i][3]);
					object.position.set( (i%10)*500,(object.scale.y*50)/2,Math.floor(i/10)*200 );
					
					//object.name=""+mtns[i].name;
					object.name=listMtns[i][0]+"__"+listMtns[i][1]+"__"+listMtns[i][2]+"__"+listMtns[i][3];
					object.castShadow = true;
					object.receiveShadow = true;
					scene.add( object );
				}
				
				//createScene();
				
				//var geo2 = new THREE.IcosahedronGeometry(200,1);
				var geo2 = new THREE.CylinderGeometry( 100, 100, 50, 50 )
				select_mesh= new THREE.Mesh( geo2, new THREE.MeshBasicMaterial( { color: 0xff0000, wireframe: false } )  );
				select_mesh.position.x =9999999;
				select_mesh.position.y = 9999999;
				select_mesh.position.z =-9999999;
				scene.add(select_mesh );
				
				// LIGHTS
				ambientLight = new THREE.AmbientLight( 0x555555 );
				scene.add( ambientLight );

				spotLight = new THREE.SpotLight( 0xffffff, 1, 0, Math.PI/2, 1 );
				spotLight.position.set( -600, 2500, 2000 );
				spotLight.target.position.set( 0, 0, 0 );
				spotLight.castShadow = true;

				spotLight.shadowCameraNear = 100;
				spotLight.shadowCameraFar = camera.far;
				spotLight.shadowCameraFov = 50;

				spotLight.shadowBias = -0.00125;
				spotLight.shadowDarkness = 0.3;
				spotLight.shadowMapWidth = SHADOW_MAP_WIDTH;
				spotLight.shadowMapHeight = SHADOW_MAP_HEIGHT;

				scene.add( spotLight );

				directionalLight2 = new THREE.PointLight( 0xff9900, 0.1 );
				directionalLight2.position.set( 0.5, -1, 0.5 );
				directionalLight2.position.normalize();
				scene.add( directionalLight2 );

				// RENDERER

				renderer = new THREE.WebGLRenderer( { antialias: false } );
				//renderer.setClearColor( scene.fog.color, 1 );
				renderer.setSize( SCREEN_WIDTH, SCREEN_HEIGHT );
				container.appendChild( renderer.domElement );

				// SHADOW

				renderer.shadowMapCullFace = THREE.CullFaceBack;
				renderer.shadowMapEnabled = true;

				// STATS

				stats = new Stats();
				container.appendChild( stats.domElement );
				
				
				
				

				

				
				// FLARES

				//flareA = THREE.ImageUtils.loadTexture( "/images/lensflare2.jpg" );
				//flareB = THREE.ImageUtils.loadTexture( "/images/lensflare0.png" );

				

				controls = new THREE.OrbitControls( camera, container  );
				controls.rotateSpeed = 1.0;
				controls.zoomSpeed = 1.2;
				controls.panSpeed = 0.8;
				controls.noZoom = false;
				controls.noPan = false;
				controls.staticMoving = true;
				controls.dynamicDampingFactor = 0.3;
				
				// EVENTS

				//document.addEventListener( 'keydown', onKeyDown, false );
				//document.addEventListener( 'keyup', onKeyUp, false );

				window.addEventListener( 'resize', onWindowResize, false );

				// POSTPROCESSING

				renderer.autoClear = false;

				var renderTargetParameters = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat, stencilBuffer: false };
				renderTarget = new THREE.WebGLRenderTarget( SCREEN_WIDTH, SCREEN_HEIGHT, renderTargetParameters );

				effectSave = new THREE.SavePass( new THREE.WebGLRenderTarget( SCREEN_WIDTH, SCREEN_HEIGHT, renderTargetParameters ) );

				effectBlend = new THREE.ShaderPass( THREE.BlendShader, "tDiffuse1" );

				effectFXAA = new THREE.ShaderPass( THREE.FXAAShader );
				var effectVignette = new THREE.ShaderPass( THREE.VignetteShader );
				var effectBleach = new THREE.ShaderPass( THREE.BleachBypassShader );
				effectBloom = new THREE.BloomPass( 0.75 );

				effectFXAA.uniforms[ 'resolution' ].value.set( 1 / SCREEN_WIDTH, 1 / SCREEN_HEIGHT );

				// tilt shift

				hblur = new THREE.ShaderPass( THREE.HorizontalTiltShiftShader );
				vblur = new THREE.ShaderPass( THREE.VerticalTiltShiftShader );

				var bluriness = 2.5;

				hblur.uniforms[ 'h' ].value = bluriness / SCREEN_WIDTH;
				vblur.uniforms[ 'v' ].value = bluriness / SCREEN_HEIGHT;

				//if ( FOLLOW_CAMERA ) {

					//if ( currentCar == gallardo ) {

					//	hblur.uniforms[ 'r' ].value = vblur.uniforms[ 'r' ].value = rMap[ "gallardo" ];

					//} else if ( currentCar == veyron ) {

					//	hblur.uniforms[ 'r' ].value = vblur.uniforms[ 'r' ].value = rMap[ "veyron" ];

					//}

				//} else {

					hblur.uniforms[ 'r' ].value = vblur.uniforms[ 'r' ].value = 0.35;

				//}

				effectVignette.uniforms[ "offset" ].value = 1.05;
				effectVignette.uniforms[ "darkness" ].value = 1.5;

				// motion blur

				effectBlend.uniforms[ 'tDiffuse2' ].value = effectSave.renderTarget;
				effectBlend.uniforms[ 'mixRatio' ].value = 0.65;

				var renderModel = new THREE.RenderPass( scene, camera );

				effectVignette.renderToScreen = true;

				composer = new THREE.EffectComposer( renderer, renderTarget );

				composer.addPass( renderModel );

				composer.addPass( effectFXAA );

				composer.addPass( effectBlend );
				composer.addPass( effectSave );

				composer.addPass( effectBloom );
				composer.addPass( effectBleach );

				composer.addPass( hblur );
				composer.addPass( vblur );

				composer.addPass( effectVignette );
				
				//projector = new THREE.Projector();
				raycaster = new THREE.Raycaster();
				document.addEventListener( 'mousemove', onDocumentMouseMove, false );
			}

			
			function onWindowResize( event ) {
				SCREEN_WIDTH = window.innerWidth;
				SCREEN_HEIGHT = window.innerHeight;
				windowHalfX = window.innerWidth / 2;
				windowHalfY = window.innerHeight / 2;
				camera.aspect = SCREEN_WIDTH / SCREEN_HEIGHT;
				camera.updateProjectionMatrix();
				renderer.setSize( SCREEN_WIDTH, SCREEN_HEIGHT );
				composer.setSize( SCREEN_WIDTH, SCREEN_HEIGHT );
				//hblur.uniforms[ 'h' ].value = 10.75 / SCREEN_WIDTH;
				//vblur.uniforms[ 'v' ].value = 10.75 / SCREEN_HEIGHT;
				effectFXAA.uniforms[ 'resolution' ].value.set( 1 / SCREEN_WIDTH, 1 / SCREEN_HEIGHT );
				composer.reset();
				

				
			}

			//

			//function onKeyDown ( event ) {
				//event.preventDefault();
				//switch( event.keyCode ) {
					//case 38: 	controlsGallardo.moveForward = true; break;//up
					//case 87:  	controlsVeyron.moveForward = true; break;//W
				//}
			//};

			//function onKeyUp ( event ) {
				//switch( event.keyCode ) {
				//}
			//};
			//
			
			function onDocumentMouseMove( event ) {
				mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
				//mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;
				mouse.y = - ( (event.clientY-$("#container").position().top+window.pageYOffset) / window.innerHeight ) * 2 + 1;
			}

			function animate() {

				requestAnimationFrame( animate );

				render();
				stats.update();

			}

			function render() {

				var delta = clock.getDelta();
				controls.update();
				
				//camera.lookAt( scene.position );
				
				var mvector = new THREE.Vector3( mouse.x, mouse.y, 1 );
				//projector.unprojectVector( mvector, camera );
				mvector.unproject(camera);
				raycaster.set( camera.position, mvector.sub( camera.position ).normalize() );
	
				var intersects = raycaster.intersectObjects( scene.children );
				if ( intersects.length > 0 ) {			
					if ( INTERSECTED != intersects[ 0 ].object) {
						INTERSECTED = intersects[ 0 ].object;
						if ( INTERSECTED.name) {	
							selectedModelName=INTERSECTED.name;	
							console.log(INTERSECTED.name)
							select_mesh.position.x=INTERSECTED.position.x;
							select_mesh.position.y=INTERSECTED.position.y*2+250;
							select_mesh.position.z=INTERSECTED.position.z;
							
							text0.style.top = $("#container").position().top+150 + 'px';								
							text0.style.left = window.innerWidth*0.75+ 'px';
							
							var data = selectedModelName.split('__');
							text0.innerHTML="<h2>Metabolic Network : </h2> <h3>"+data[0]+"</h3> <h4>Nb compartments: "+data[1]+"</h4><h4>Nb nodes: "+data[2]+"</h4><h4>Nb links: "+data[3]+"</h4>";
							
						}
						
						
					}

				} else {

					INTERSECTED = null;
					
				}

				v = THREE.Math.clamp( v + 0.5 * delta * vdir, 0.1, 0.9 );
				var vnorm = ( v - 0.05 ) / ( 0.9 - 0.05 );
				effectBloom.copyUniforms[ "opacity" ].value = THREE.Math.mapLinear( vnorm, 0, 1, 1, 0.75 );
				ambientLight.color.setHSL( 0, 0, THREE.Math.mapLinear( vnorm, 0, 1, 0.1, 0.3 ) );
				groundBasic.color.setHSL( 0.1, 0.5, THREE.Math.mapLinear( vnorm, 0, 1, 0.4, 0.65 ) );
				if ( blur ) {

					effectSave.enabled = true;
					effectBlend.enabled = true;

				} else {

					effectSave.enabled = false;
					effectBlend.enabled = false;

				}

				renderer.clear();
				composer.render();
				//renderer.shadowMapEnabled = false;

			}




/*
if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

			var text0 = document.createElement('div');
			text0.style.position = 'absolute';
			text0.style.width = 100;
			text0.style.height = 100;
			text0.style.color = "white";
			text0.style.textAlign="left";
			//text0.style.backgroundColor = "#FFFFCC";
			//text1.innerHTML = ' <input type="text" name="first_name" value="" maxlength="100" />';
			text0.innerHTML = 'hello ';
			text0.style.top = 200 + 'px';
			text0.style.left = 200 + 'px';
			document.body.appendChild(text0);
		
			var effectFXAA;
			var selectedModelName="";
			
			var mouseX = 0, mouseY = 0,			
			windowHalfX = window.innerWidth / 2,
			windowHalfY = window.innerHeight / 2,
			camera, scene, renderer, material, composer;
			var mouse = new THREE.Vector2(), INTERSECTED;
			var select_mesh;
			var effectBloom ;
			//var projector = new THREE.Projector();
			var raycaster = new THREE.Raycaster();
			var omesh, ambientLight, directionalLight,directionalLight2;
			var controls;
			var v = 0.9, vdir = 1;
			var clock = new THREE.Clock();
			
			init();
			animate();

			function init() {

				var i, container;

				//container = document.createElement( 'div' );
				container = document.getElementById("container");
				document.body.appendChild( container );

				camera = new THREE.PerspectiveCamera( 33, window.innerWidth / window.innerHeight, 1, 100000 );
				camera.position.z = 700;
				camera.position.y = 100;
				scene = new THREE.Scene();

				renderer = new THREE.WebGLRenderer( { antialias: false } );
				renderer.setSize( window.innerWidth, window.innerHeight );
				renderer.autoClear = false;

				container.appendChild( renderer.domElement );

				
				//
				//var geo = new THREE.TorusGeometry( 500, 450, 100, 100 );
				var geo = new THREE.PlaneBufferGeometry( 50000,50000);
				//var geo = new THREE.IcosahedronGeometry(90,3);
				//var material = new THREE.MeshPhongMaterial( {wireframe: true, shading: THREE.FlatShading} );
				//var omesh = new THREE.Mesh( geo, new THREE.MeshBasicMaterial( { color: 0xffaa00, wireframe: true } )  );
				omesh = new THREE.Mesh( geo, new THREE.MeshPhongMaterial( { 
					color: 0x5555ff, 
					ambient: 0x5555ff, // should generally match color
					specular: 0x050505,
					shininess: 400,side: THREE.DoubleSide, //wireframe: true
				} ) );
				//omesh.material.color.setHSL( 0.1, 0.9, 0.7 );
				omesh.rotation.x = -Math.PI/2;
				omesh.position.y = 0;
				omesh.name="isosun";
				omesh.castShadow = false;
				omesh.receiveShadow = true;
				scene.add(omesh );
				
				// add subtle blue ambient lighting
				  ambientLight = new THREE.AmbientLight(0xffffff);
				  
				  scene.add(ambientLight);
				  
				  // directional lighting
				  directionalLight = new THREE.DirectionalLight(0xffffff); 
				  directionalLight.position.set(0, 100, -200).normalize();
				  ambientLight.name="dlight"
				  scene.add(directionalLight);
				  
				//directionalLight2 = new THREE.PointLight( 0xff9900, 1.1 );
				//directionalLight2.position.set( 100.5, 100, 0.5 );
				//directionalLight2.position.normalize();
				//scene.add( directionalLight2 );
	  
				var geo2 = new THREE.IcosahedronGeometry(15,1);
				select_mesh= new THREE.Mesh( geo2, new THREE.MeshBasicMaterial( { color: 0xffffff, wireframe: true } )  );
				select_mesh.position.x =9999999;
				select_mesh.position.y = 9999999;
				select_mesh.position.z =-9999999;
				scene.add(select_mesh );
				
				var arrayUsers=[];
				for (var i=0,j=listMtns.length ; i< j; i++){
					//var geo = new THREE.IcosahedronGeometry(10,2);
					var geo = new THREE.BoxGeometry(10,10,10);
					//var material = new THREE.MeshPhongMaterial( {wireframe: true, shading: THREE.FlatShading} );
					arrayUsers[i] = new THREE.Mesh( geo, new THREE.MeshBasicMaterial( { color: '#'+Math.floor(Math.random()*16777215).toString(16), wireframe: false,doubleSided: true} )  );
					var pos= i*0.005*2*Math.PI;
					arrayUsers[i].scale.x=5;
					arrayUsers[i].scale.z=5;
					arrayUsers[i].scale.y=Math.log(listMtns[i][2]*listMtns[i][3]);
					//arrayUsers[i].scale.z=Math.log(listMtns[i][3]);
					arrayUsers[i].position.x = Math.cos(pos)*300*(i+1)*1.05;
					arrayUsers[i].position.y = ((10*arrayUsers[i].scale.y)/2)-0.01;//Math.sin(Math.random(1))*150;
					arrayUsers[i].position.z = Math.sin(pos)*300*(i+1)*1.05;
					//arrayUsers[i].geometry.applyMatrix( new THREE.Matrix4().makeTranslation( Math.random(300), 0, 0 ) );
					//arrayUsers[i].rotation.y = Math.random() * 2 * Math.PI;
					//arrayUsers[i].rotation.x = Math.random() * 2 * Math.PI;
					//arrayUsers[i].rotation.z = Math.random() * 2 * Math.PI;
					arrayUsers[i].material.side = THREE.DoubleSide;
					arrayUsers[i].name=listMtns[i][0]+"__"+listMtns[i][1]+"__"+listMtns[i][2]+"__"+listMtns[i][3];
					arrayUsers[i].castShadow = true;
					arrayUsers[i].receiveShadow = true;
					scene.add(arrayUsers[i] );
					
				}
				

				stats = new Stats();
				stats.domElement.style.position = 'absolute';
				stats.domElement.style.top = '0px';
				//container.appendChild( stats.domElement );

				//

				document.addEventListener( 'mousemove', onDocumentMouseMove, false );
				document.addEventListener( 'touchstart', onDocumentTouchStart, false );
				document.addEventListener( 'touchmove', onDocumentTouchMove, false );

				//

				var renderModel = new THREE.RenderPass( scene, camera );
				effectBloom = new THREE.BloomPass( 0.75 );
				
				var renderTargetParameters = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat, stencilBuffer: false };
				var renderTarget = new THREE.WebGLRenderTarget( window.innerWidth, window.innerHeight, renderTargetParameters );

				var effectSave = new THREE.SavePass( new THREE.WebGLRenderTarget( window.innerWidth, window.innerHeight, renderTargetParameters ) );

				//var effectBlend = new THREE.ShaderPass( THREE.BlendShader, "tDiffuse1" );
				
				var effectCopy = new THREE.ShaderPass( THREE.CopyShader );
				var effectBleach = new THREE.ShaderPass( THREE.BleachBypassShader );
				//var effectVignette = new THREE.ShaderPass( THREE.VignetteShader );
				//effectVignette.uniforms[ "offset" ].value = 1.05;
				//effectVignette.uniforms[ "darkness" ].value = 1.5;
				
				effectFXAA = new THREE.ShaderPass( THREE.FXAAShader );

				var width = window.innerWidth || 2;
				var height = window.innerHeight || 2;

				effectFXAA.uniforms[ 'resolution' ].value.set( 1 / width, 1 / height );

				effectCopy.renderToScreen = true;

				composer = new THREE.EffectComposer( renderer );

				composer.addPass( renderModel );
				composer.addPass( effectFXAA );
				
				//composer.addPass( effectBlend );
				composer.addPass( effectSave);
				composer.addPass( effectBloom );
				composer.addPass( effectCopy );
				composer.addPass( effectBleach );
				//composer.addPass( effectVignette );
				//projector = new THREE.Projector();
				raycaster = new THREE.Raycaster();
				//
				
				controls = new THREE.OrbitControls( camera, container  );
				controls.rotateSpeed = 1.0;
				controls.zoomSpeed = 1.2;
				controls.panSpeed = 0.8;
				controls.noZoom = false;
				controls.noPan = false;
				controls.staticMoving = true;
				controls.dynamicDampingFactor = 0.3;

				window.addEventListener( 'resize', onWindowResize, false );

			}

			function onWindowResize() {

				windowHalfX = window.innerWidth / 2;
				windowHalfY = window.innerHeight / 2;

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

				effectFXAA.uniforms[ 'resolution' ].value.set( 1 / window.innerWidth, 1 / window.innerHeight );

				composer.reset();

			}

			//

			function onDocumentMouseMove( event ) {

				mouseX = event.clientX - windowHalfX;
				mouseY = event.clientY - windowHalfY;
				mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
					//mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;
					mouse.y = - ( (event.clientY-$("#container").position().top+window.pageYOffset) / window.innerHeight ) * 2 + 1;
			}

			function onDocumentTouchStart( event ) {

				if ( event.touches.length > 1 ) {

					event.preventDefault();

					mouseX = event.touches[ 0 ].pageX - windowHalfX;
					mouseY = event.touches[ 0 ].pageY - windowHalfY;
					
				}

			}

			function onDocumentTouchMove( event ) {

				if ( event.touches.length == 1 ) {

					event.preventDefault();

					mouseX = event.touches[ 0 ].pageX - windowHalfX;
					mouseY = event.touches[ 0 ].pageY - windowHalfY;
				}

			}

			//

			function animate() {

				requestAnimationFrame( animate );
				render();

				stats.update();

			}

			function render() {
				controls.update();
				
				var delta = clock.getDelta();
				var vector = new THREE.Vector3( mouse.x, mouse.y, 1 );
				//projector.unprojectVector( vector, camera );
				vector.unproject(camera);
				raycaster.set( camera.position, vector.sub( camera.position ).normalize() );
				
				//v = THREE.Math.clamp( v + 0.5 * delta * vdir, 0.1, 0.9 );
				//var vnorm = ( v - 0.05 ) / ( 0.9 - 0.05 );
				//effectBloom.copyUniforms[ "opacity" ].value = THREE.Math.mapLinear( vnorm, 0, 1, 1, 0.75 );

				//ambientLight.color.setHSL( 0, 0, THREE.Math.mapLinear( vnorm, 0, 1, 0.1, 0.3 ) );
				//omesh.material.color.setHSL( 0.1, 0.5, THREE.Math.mapLinear( vnorm, 0, 1, 0.4, 0.65 ) );
	
				var intersects = raycaster.intersectObjects( scene.children );
				if ( intersects.length > 0 ) {
					
					
					if ( INTERSECTED != intersects[ 0 ].object) {

						

						INTERSECTED = intersects[ 0 ].object;
						//console.log(intersects)
						
						if ( INTERSECTED.name && INTERSECTED.name!="isosun") {
							//console.log(INTERSECTED)
							selectedModelName=INTERSECTED.name;
							
							select_mesh.position.x=INTERSECTED.position.x;
							select_mesh.position.y=INTERSECTED.position.y;
							select_mesh.position.z=INTERSECTED.position.z;
							
							text0.style.top = $("#container").position().top+150 + 'px';								
							text0.style.left = window.innerWidth*0.75+ 'px';
							var data = selectedModelName.split('__');
							text0.innerHTML="<h2>Metabolic Network : </h2> <h3>"+data[0]+"</h3> <h4>Nb compartments: "+data[1]+"</h4><h4>Nb nodes: "+data[2]+"</h4><h4>Nb links: "+data[3]+"</h4>";
							//console.log(data)
						}
						
						
					}

				} else {

					
					INTERSECTED = null;
					
				}
				
				
				var time = Date.now() * 0.0005;

				for ( var i = 0; i < scene.children.length; i ++ ) {

					var object = scene.children[ i ];
					if ( object.name=="isosun" || object instanceof THREE.DirectionalLight) {//object.rotation.y = time * ( i % 2 ? 1 : -1 );}
					}
					else{
						//object.position.x += Math.cos(time )*300;
						var euler = new THREE.Euler( 0, 0.006, 0, 'XYZ' );
						object.position.applyEuler(euler);
						//var euler2 = new THREE.Euler( 0, 0.0006, 0, 'XYZ' );
						//directionalLight.position.applyEuler(euler2);
						//select_mesh.position.x =9999999;
						//select_mesh.position.y = 9999999;
						//select_mesh.position.z =-9999999;
						//object.position.z += Math.sin(time )*300;
					}

				}

				renderer.clear();
				composer.render();

			}
			*/
			
			
			/*
			
			if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

			var FOLLOW_CAMERA = false;

			var SCREEN_WIDTH = window.innerWidth;
			var SCREEN_HEIGHT = window.innerHeight;

			var SHADOW_MAP_WIDTH = 1024, SHADOW_MAP_HEIGHT = 1024;

			var container, stats;

			var camera, cameraTarget, scene, renderer, controls;
			var renderTarget;

			var spotLight, ambientLight;

			var cubeCamera;

			var clock = new THREE.Clock();

			

			var mlib;

			var gallardo, veyron, currentCar;

			var effectDirt, hblur, vblur, effectBloom, effectKeep, effectBlend, effectFXAA;

			

			var flareA, flareB;
			var sprites = [];

			var ground, groundBasic;

			var blur = false;

			var v = 0.9, vdir = 1;
			
			var text0 = document.createElement('div');
			text0.style.position = 'absolute';
			text0.style.width = 100;
			text0.style.height = 100;
			text0.style.color = "white";
			text0.style.textAlign="left";
			//text0.style.backgroundColor = "#FFFFCC";
			//text1.innerHTML = ' <input type="text" name="first_name" value="" maxlength="100" />';
			text0.innerHTML = 'hello ';
			text0.style.top = 200 + 'px';
			text0.style.left = 200 + 'px';
			document.body.appendChild(text0);
			
			var selectedModelName="";
			var mouseX = 0, mouseY = 0,			
			windowHalfX = window.innerWidth / 2,
			windowHalfY = window.innerHeight / 2;
			var mouse = new THREE.Vector2(), INTERSECTED;
			var select_mesh;
			//var projector = new THREE.Projector();
			var raycaster = new THREE.Raycaster();

			init();
			animate();

			function init() {

				container = document.getElementById( 'container' );

				camera = new THREE.PerspectiveCamera( 40, SCREEN_WIDTH / SCREEN_HEIGHT, 0.1, 1000000 );
				camera.position.set( 3000, 0, 3000 );
				scene = new THREE.Scene();
				createScene();
				
				// LIGHTS
				ambientLight = new THREE.AmbientLight( 0x555555 );
				scene.add( ambientLight );

				spotLight = new THREE.SpotLight( 0xffffff, 1, 0, Math.PI/2, 1 );
				spotLight.position.set( 0, 1800, 1500 );
				spotLight.target.position.set( 0, 0, 0 );
				spotLight.castShadow = true;

				spotLight.shadowCameraNear = 100;
				spotLight.shadowCameraFar = camera.far;
				spotLight.shadowCameraFov = 50;

				spotLight.shadowBias = -0.00125;
				spotLight.shadowDarkness = 0.2;
				spotLight.shadowMapWidth = SHADOW_MAP_WIDTH;
				spotLight.shadowMapHeight = SHADOW_MAP_HEIGHT;

				scene.add( spotLight );

				directionalLight2 = new THREE.PointLight( 0xff9900, 0.1 );
				directionalLight2.position.set( 0.5, -1, 0.5 );
				directionalLight2.position.normalize();
				scene.add( directionalLight2 );

				// RENDERER

				renderer = new THREE.WebGLRenderer( { antialias: false } );
				//renderer.setClearColor( scene.fog.color, 1 );
				renderer.setSize( SCREEN_WIDTH, SCREEN_HEIGHT );
				container.appendChild( renderer.domElement );

				// SHADOW

				renderer.shadowMapCullFace = THREE.CullFaceBack;
				renderer.shadowMapEnabled = true;

				// STATS

				stats = new Stats();
				container.appendChild( stats.domElement );

				
				// FLARES

				flareA = THREE.ImageUtils.loadTexture( "/images/lensflare2.jpg" );
				flareB = THREE.ImageUtils.loadTexture( "/images/lensflare0.png" );

				

				controls = new THREE.OrbitControls( camera, container  );
				controls.rotateSpeed = 1.0;
				controls.zoomSpeed = 1.2;
				controls.panSpeed = 0.8;
				controls.noZoom = false;
				controls.noPan = false;
				controls.staticMoving = true;
				controls.dynamicDampingFactor = 0.3;
				
				// EVENTS

				//document.addEventListener( 'keydown', onKeyDown, false );
				//document.addEventListener( 'keyup', onKeyUp, false );

				window.addEventListener( 'resize', onWindowResize, false );

				// POSTPROCESSING

				renderer.autoClear = false;

				var renderTargetParameters = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat, stencilBuffer: false };
				renderTarget = new THREE.WebGLRenderTarget( SCREEN_WIDTH, SCREEN_HEIGHT, renderTargetParameters );

				effectSave = new THREE.SavePass( new THREE.WebGLRenderTarget( SCREEN_WIDTH, SCREEN_HEIGHT, renderTargetParameters ) );

				effectBlend = new THREE.ShaderPass( THREE.BlendShader, "tDiffuse1" );

				effectFXAA = new THREE.ShaderPass( THREE.FXAAShader );
				var effectVignette = new THREE.ShaderPass( THREE.VignetteShader );
				var effectBleach = new THREE.ShaderPass( THREE.BleachBypassShader );
				effectBloom = new THREE.BloomPass( 0.75 );

				effectFXAA.uniforms[ 'resolution' ].value.set( 1 / SCREEN_WIDTH, 1 / SCREEN_HEIGHT );

				// tilt shift

				hblur = new THREE.ShaderPass( THREE.HorizontalTiltShiftShader );
				vblur = new THREE.ShaderPass( THREE.VerticalTiltShiftShader );

				var bluriness = 7;

				hblur.uniforms[ 'h' ].value = bluriness / SCREEN_WIDTH;
				vblur.uniforms[ 'v' ].value = bluriness / SCREEN_HEIGHT;

				//if ( FOLLOW_CAMERA ) {

					//if ( currentCar == gallardo ) {

					//	hblur.uniforms[ 'r' ].value = vblur.uniforms[ 'r' ].value = rMap[ "gallardo" ];

					//} else if ( currentCar == veyron ) {

					//	hblur.uniforms[ 'r' ].value = vblur.uniforms[ 'r' ].value = rMap[ "veyron" ];

					//}

				//} else {

					hblur.uniforms[ 'r' ].value = vblur.uniforms[ 'r' ].value = 0.35;

				//}

				effectVignette.uniforms[ "offset" ].value = 1.05;
				effectVignette.uniforms[ "darkness" ].value = 1.5;

				// motion blur

				effectBlend.uniforms[ 'tDiffuse2' ].value = effectSave.renderTarget;
				effectBlend.uniforms[ 'mixRatio' ].value = 0.65;

				var renderModel = new THREE.RenderPass( scene, camera );

				effectVignette.renderToScreen = true;

				composer = new THREE.EffectComposer( renderer, renderTarget );

				composer.addPass( renderModel );

				composer.addPass( effectFXAA );

				composer.addPass( effectBlend );
				composer.addPass( effectSave );

				composer.addPass( effectBloom );
				composer.addPass( effectBleach );

				composer.addPass( hblur );
				composer.addPass( vblur );

				composer.addPass( effectVignette );
				
				//projector = new THREE.Projector();
				raycaster = new THREE.Raycaster();

			}

			//

			function setSpritesOpacity( opacity ) {

				for ( var i = 0; i < sprites.length; i ++ ) {

					sprites[ i ].material.opacity = opacity;

				}

			}

			//


			function createScene() {

				// GROUND

				//var texture = THREE.ImageUtils.loadTexture( "/images/marble.jpg" );
				//texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
				//texture.repeat.set( 50, 50 );

				//groundBasic = new THREE.MeshBasicMaterial( { color: 0xffffff, map: texture } );				
				//groundBasic.color.setHSL( 0.1, 0.9, 0.7 );
				
				//groundBasic = new THREE.MeshBasicMaterial( { color: 0xffffff, map: texture } );				
				//groundBasic.color.setHSL( 0.1, 0.9, 0.7 );
				groundBasic = new THREE.MeshPhongMaterial( { 
					color: 0x9966ff, 
					ambient: 0x9966ff, // should generally match color
					specular: 0x050505,
					shininess: 500//wireframe: true
				} );
				

				ground = new THREE.Mesh( new THREE.PlaneBufferGeometry( 50000, 50000 ), groundBasic );
				ground.position.y = - 215;
				ground.rotation.x = - Math.PI / 2;
				scene.add( ground );

				ground.castShadow = false;
				ground.receiveShadow = true;

				// OBJECTS

				//var cylinderGeometry = new THREE.CylinderGeometry( 2, 50, 1000, 32 );
				//var sphereGeometry = new THREE.SphereGeometry( 100, 32, 16 );
				var boxGeometry = new THREE.BoxGeometry( 150, 500, 150 );
				var sy1 = -500 + 38;
				var sy2 = -88;

				
				
				for (var i=0;i<mtns.length;i++){
					var strColor='#'+Math.floor(Math.random()*16777215).toString(16);
					var object = new THREE.Mesh( boxGeometry, new THREE.MeshLambertMaterial( { color: strColor, ambient: strColor } ) );
					object.position.set( (i%10)*500,-50,Math.floor(i/10)*200 );
					object.name=""+mtns[i].name;
					object.castShadow = true;
					object.receiveShadow = true;
					scene.add( object );
				}
				

			}


			function onWindowResize( event ) {

				SCREEN_WIDTH = window.innerWidth;
				SCREEN_HEIGHT = window.innerHeight;
				windowHalfX = window.innerWidth / 2;
				windowHalfY = window.innerHeight / 2;
				camera.aspect = SCREEN_WIDTH / SCREEN_HEIGHT;
				camera.updateProjectionMatrix();

				renderer.setSize( SCREEN_WIDTH, SCREEN_HEIGHT );
				composer.setSize( SCREEN_WIDTH, SCREEN_HEIGHT );

				hblur.uniforms[ 'h' ].value = 10.75 / SCREEN_WIDTH;
				vblur.uniforms[ 'v' ].value = 10.75 / SCREEN_HEIGHT;

				effectFXAA.uniforms[ 'resolution' ].value.set( 1 / SCREEN_WIDTH, 1 / SCREEN_HEIGHT );
				composer.reset();
				

				
			}

			//

			//function onKeyDown ( event ) {
				//event.preventDefault();
				//switch( event.keyCode ) {
					//case 38: 	controlsGallardo.moveForward = true; break;//up
					//case 87:  	controlsVeyron.moveForward = true; break;//W
				//}
			//};

			//function onKeyUp ( event ) {
				//switch( event.keyCode ) {
				//}
			//};
			//
			
			function onDocumentMouseMove( event ) {

				//mouseX = event.clientX - windowHalfX;
				//mouseY = event.clientY - windowHalfY;
				mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
					//mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;
					mouse.y = - ( (event.clientY-$("#container").position().top+window.pageYOffset) / window.innerHeight ) * 2 + 1;
			}

			function animate() {

				requestAnimationFrame( animate );

				render();
				stats.update();

			}

			function render() {

				var delta = clock.getDelta();
				controls.update();
				
				camera.lookAt( scene.position );
				
				var vector = new THREE.Vector3( mouse.x, mouse.y, 1 );
				//projector.unprojectVector( vector, camera );
				vector.unproject(camera);
				raycaster.set( camera.position, vector.sub( camera.position ).normalize() );
	
				var intersects = raycaster.intersectObjects( scene.children );
				if ( intersects.length > 0 ) {			
					if ( INTERSECTED != intersects[ 0 ].object) {
						INTERSECTED = intersects[ 0 ].object;
						if ( INTERSECTED.name) {	
							selectedModelName=INTERSECTED.name;	
							console.log(INTERSECTED.name)
							//select_mesh.position.x=INTERSECTED.position.x;
							//select_mesh.position.y=INTERSECTED.position.y;
							//select_mesh.position.z=INTERSECTED.position.z;
							
							text0.style.top = $("#container").position().top+150 + 'px';								
							text0.style.left = window.innerWidth*0.75+ 'px';
							
							text0.innerHTML="<h2>Metabolic Network : </h2> <h3>"+selectedModelName+"</h3>";
						}
						
						
					}

				} else {

					INTERSECTED = null;
					
				}
				
				
				// day / night

				v = THREE.Math.clamp( v + 0.5 * delta * vdir, 0.1, 0.9 );
				//scene.fog.color.setHSL( 0.51, 0.5, v * 0.75 );

				//renderer.setClearColor( scene.fog.color, 1 );

				var vnorm = ( v - 0.05 ) / ( 0.9 - 0.05 );

				if ( vnorm < 0.3 ) {

					setSpritesOpacity( 1 - v / 0.3 );

				} else {

					setSpritesOpacity( 0 );

				}

				

				effectBloom.copyUniforms[ "opacity" ].value = THREE.Math.mapLinear( vnorm, 0, 1, 1, 0.75 );

				ambientLight.color.setHSL( 0, 0, THREE.Math.mapLinear( vnorm, 0, 1, 0.1, 0.3 ) );
				groundBasic.color.setHSL( 0.1, 0.5, THREE.Math.mapLinear( vnorm, 0, 1, 0.4, 0.65 ) );

				// blur

				if ( blur ) {

					effectSave.enabled = true;
					effectBlend.enabled = true;

				} else {

					effectSave.enabled = false;
					effectBlend.enabled = false;

				}

				// update car model

				//veyron.updateCarModel( delta, controlsVeyron );
				//gallardo.updateCarModel( delta, controlsGallardo );

				// update camera

				//if ( ! FOLLOW_CAMERA ) {

					//cameraTarget.x = currentCar.root.position.x;
					//cameraTarget.z = currentCar.root.position.z;

				//} else {

					//spotLight.position.x = currentCar.root.position.x - 500;
					//spotLight.position.z = currentCar.root.position.z - 500;


				//}

				// update shadows

				//spotLight.target.position.x = currentCar.root.position.x;
				//spotLight.target.position.z = currentCar.root.position.z;

				// render cube map

				//var updateCubemap = true;

				//if ( updateCubemap ) {

					//veyron.setVisible( false );
					//gallardo.setVisible( false );

					//cubeCamera.position.copy( currentCar.root.position );

				//	renderer.autoClear = true;
					//cubeCamera.updateCubeMap( renderer, scene );

					//veyron.setVisible( true );
					//gallardo.setVisible( true );

				//}

				// render scene

				//renderer.autoClear = false;
				//renderer.shadowMapEnabled = true;

				//camera.lookAt( cameraTarget );

				//renderer.clearTarget( null );
				//composer.render( 0.1 );
				renderer.clear();
				composer.render();
				//renderer.shadowMapEnabled = false;

			}*/

		</script>