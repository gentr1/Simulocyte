<br><br><form action="/fbaexperiment/create" method="POST" id="fbaexperiment-creation-form" enctype="multipart/form-data" class="form-signin">
	<h2 class="form-signin-heading">Create FBA experiment</h2>

	<% if(flash && flash.err) { %>
		<ul class="alert alert-success">
	<% Object.keys(flash.err).forEach(function(error) { %>
		<li><%- JSON.stringify(flash.err[error]) %></li>
	<% }) %>
	</ul>
	<% } %>

	<div class="control-group"> (Please avoid any spaces or exotic characters in the name)
	<input type="text" class="form-control" placeholder="experiment title" name="name">
	</div>

	<div class="control-group">
	<input type="text" class="form-control" placeholder="comments" name="comment">
	</div>
	<div class="control-group">
	Set users or groups of users (labs)'s privileges ("no access", "read access", or "read-write access") to this metabolic network (labs in orange):
	<br><input type="checkbox" name="defaultread" id ="defaultread"> Tick here if you want an open policy - future users not defined yet have read access by default<br>
	<div id="usersTable"></div>
	</div>
	<input type="text" name="users" id ="users" style="visibility: hidden;" value="[]">
	<input type="text" name="owner" id ="owner" style="visibility: hidden;" value="<%=session.User.name%>">
	<div class="control-group">Select one metabolic network:
	<select class="form-control" name="metabolic_net">
		<% _.each(mtbs, function(mtb) {%>
		   <option><%= mtb %></option>
		<% }) %>
		</select>
	</div>
    <p>
    <div class="control-group">Type name of reaction or metabolite to be used as an objective function.
	<input type="text" class="form-control" placeholder="objective function" name="objective"><br>
	<div class="control-group">Type externality tag - the text tag at the end of external metabolite name.
	<input type="text" class="form-control" placeholder="externality tag" name="xt">
	</div>

	<% var InputdataSfba=JSON.stringify([]); %>
	<br>Either select a .sfba file to upload:
	<input type="file" placeholder="sfba file" name="sfbafile">Or fill in or copy/paste data in the table below:
	<input type="text"  name="mySfbaSpreadsheet0" id ="mySfbaSpreadsheet0" style="visibility: hidden;" value=<%=InputdataSfba%>>
	<input type="text"  name="mySfbaSpreadsheet1" id ="mySfbaSpreadsheet1" style="visibility: hidden;" value="">
	<input type="text"  name="mySfbaSpreadsheet2" id ="mySfbaSpreadsheet2" style="visibility: hidden;" value="">
	<input type="text"  name="mySfbaSpreadsheet3" id ="mySfbaSpreadsheet3" style="visibility: hidden;" value="">
	<input type="text"  name="mySfbaSpreadsheet4" id ="mySfbaSpreadsheet4" style="visibility: hidden;" value="">
	<input type="text"  name="mySfbaSpreadsheet5" id ="mySfbaSpreadsheet5" style="visibility: hidden;" value="">
	<input type="text"  name="mySfbaSpreadsheet6" id ="mySfbaSpreadsheet6" style="visibility: hidden;" value="">
	<input type="text"  name="mySfbaSpreadsheet7" id ="mySfbaSpreadsheet7" style="visibility: hidden;" value="">
	<input type="text"  name="mySfbaSpreadsheet8" id ="mySfbaSpreadsheet8" style="visibility: hidden;" value="">
	<input type="text"  name="mySfbaSpreadsheet9" id ="mySfbaSpreadsheet9" style="visibility: hidden;" value="">
	</div>

	<div class="control-group"> 
	<br>
	<br><b>SurreyFBA table:</b><div id="sfbaTable"></div>
	<br>
	</div>

    <input type="submit" class="btn btn-lg btn-primary btn-block" value="Submit"/>
	<input type="hidden" name="_csrf" value="<%= _csrf %>" />

</form>

<script>
var dataSfba=[];

var $container13 = $("#sfbaTable");
$container13.handsontable({
  data: [],
  width: $("#qsspn-model-sign-up-form").width(),
  height:200,
  dataSchema: {name: null, formula: null, lb: null, ub:null,command:null, rule:null},
  startRows: 5,
  startCols: 6,
  colHeaders: ['Reaction name', 'Reaction Formula', 'Lb','Ub','Command','Gene/Reaction Rule'],
  columns: [
    {data: "name"},
    {data: "formula"},
    {data: "lb"},
    {data: "ub"},
	{data: "command"},
	{data: "rule"}
  ],
  afterChange: function(changes, source) {
    //console.log(this.getData());
	var dt = this.getData();
	
	for (var i=0, j= dt.length;i<j-1;i++){
		dataSfba[i]=new Array(6);
		dataSfba[i][0]=dt[i].name;
		dataSfba[i][1]=dt[i].formula;
		dataSfba[i][2]=dt[i].lb;
		dataSfba[i][3]=dt[i].ub;
		dataSfba[i][4]=dt[i].command;
		dataSfba[i][5]=dt[i].rule;
	}
	
		var mlength=JSON.stringify(dataSfba).length;
		var nbArrays=1;
		if (mlength>524288){
			nbArrays=parseInt(Math.ceil(mlength/524288.0));
		}
		if (nbArrays==1){
			document.getElementById("mySfbaSpreadsheet0").value=JSON.stringify(dataSfba);
		}
		else{
			var stringSfba=JSON.stringify(dataSfba);
			var chunksize=524288;
			var stringChunks=[];
			//console.log(mlength)
			for (var i=0;i<nbArrays;i++){
				stringChunks.push(stringSfba.substring((i*(chunksize-1)), ((i+1)*(chunksize-1))));
				document.getElementById("mySfbaSpreadsheet"+i).value=stringChunks[i];
				//console.log(((i*(chunksize-1)))  +"  "+ (((i+1)*(chunksize-1))))
				console.log(document.getElementById("mySfbaSpreadsheet"+i).value.length)
			}
			//console.log(stringChunks)
		}
	
	//console.log(JSON.stringify(dataSfba));
	//dataJson.places.push()
  },
  minSpareRows: 1
});


var masterUser=<%-JSON.stringify( session.User.name) %>;
var sessionAuthenticated=<%-JSON.stringify( session.authenticated)%>;
if (sessionAuthenticated){
var listUsers=<%-JSON.stringify( usrs) %>;
var listLabs=<%-JSON.stringify( labs) %>;

var dataUsers=new Array(listUsers.length+listLabs.length);

for (var i=0, j=listLabs.length; i<j;i++){
	dataUsers[i]=new Array(3);
	dataUsers[i][0]=listLabs[i]["name"];
	dataUsers[i][1]=false;
	dataUsers[i][2]=true;
	dataUsers[i][3]=false;
}
for (var i=listLabs.length, j=listLabs.length+listUsers.length; i<j;i++){
	dataUsers[i]=new Array(2);
	dataUsers[i][0]=listUsers[i-listLabs.length];
	if (dataUsers[i][0]==masterUser){
		dataUsers[i][1]=false;
		dataUsers[i][2]=false;
		dataUsers[i][3]=true;
	}
	else{
		dataUsers[i][1]=false;
		dataUsers[i][2]=true;
		dataUsers[i][3]=false;
	}
}

greenRenderer = function(instance, td, row, col, prop, value, cellProperties) {
	if (row<listLabs.length){
		Handsontable.renderers.TextRenderer.apply(this, arguments);
		td.style.backgroundColor = 'orange';
	}
	else{Handsontable.renderers.TextRenderer.apply(this, arguments);}

};

var flagCondition=true;
var $container1 = $("#usersTable");
$container1.handsontable({
	data: dataUsers,
	width: 750,
	height:400,
	startRows: 1,
	startCols: 4,
	colHeaders: ['User Name', 'No-Access','Read-Only','Read-Write'],
	columns: [
		{renderer: greenRenderer},
		{type: 'checkbox'},
		{type: 'checkbox'},
		{type: 'checkbox'}
	],
	colWidths: [250, 100,100,100],
	beforeChange: function(changes, source) {
		if (changes){
			for (var i =0; i< changes.length;i++){
				if (changes[i][3]==false && flagCondition==true){
					changes[i]=null;
				}
			}
		}
	},
	afterChange: function(changes, source) {
		if (changes){
			var obj = this;
			var recordedChanges=[];
			for (var i =0; i< changes.length;i++){
				if (changes[i]){
					var rowChanged=changes[i][0];
					var colChanged=changes[i][1];
					for (j=1;j<4;j++){
						if (colChanged!=j){
							if (changes[i][3]==true){
								recordedChanges.push([rowChanged, j, false]);
							}
						}
					}
				}
			}
			flagCondition=false;
			obj.setDataAtCell (recordedChanges)
			flagCondition=true;
			obj.render()
		}
		//console.log(dataUsers)
		document.getElementById("users").value= JSON.stringify(dataUsers);
	},
	minSpareRows: 0
});


var ht = $('#usersTable').handsontable('getInstance');
ht.updateSettings({
	cells: function (row, col, prop) {
		var cellProperties = {};
		if (ht.getData()[row]){
			if (ht.getData()[row][0]==masterUser){
				cellProperties.readOnly = true;
			}
		}
		return cellProperties;
	}
});

}

</script>