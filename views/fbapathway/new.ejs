
<br>
<br>

<form action="/fbapathway/create" method="POST" id="new-fbapathway-form" enctype="multipart/form-data" class="form-signin" onsubmit="return updateGraphData()">	
<h2 class="form-signin-heading">Create new fba pathway from experimental results</h2>	
<% if(flash && flash.err) { %>
		<ul class="alert alert-success">
	<% Object.keys(flash.err).forEach(function(error) { %>
		<li><%- JSON.stringify(flash.err[error]) %></li>
	<% }) %>
	</ul>
	<% } %>
	

	
<div class="control-group"> (Please avoid any spaces or exotic characters in the name)
	<input type="text" class="form-control" placeholder="graph title" name="name">
</div>

<div class="control-group">
	<input type="text" class="form-control" placeholder="comments" name="comment">
</div>
<div class="control-group">
	Set users or groups of users (labs)'s privileges ("no access", "read access", or "read-write access") to this metabolic network (labs in orange):
	<br><input type="checkbox" name="defaultread" id ="defaultread"> Tick here if you want an open policy - future users not defined yet have read access by default<br>
	<div id="usersTable"></div>
</div>

<input type="text" name="users" id ="users" style="visibility: hidden;" value="[]">
<input type="text" name="owner" id ="owner" style="visibility: hidden;" value="<%=session.User.name%>">

<h3>Identify and hide connections to currency metabolites:</h3>
<br>
<div id="searchfield1" >Search Term: <input id="searchgrid1" type="text" class="form-control input-sm"/></div>
<br>
<div id="CurrencyTable" style="overflow: scroll"></div>
<br>
<h3>Select reactions to display (ideally, around a hundred):</h3>
<br>
<div id="searchfield2" >Search Term: <input id="searchgrid2" type="text" class="form-control input-sm"/></div>
<br>
<div id="fbaResult"></div>
<br>
<input type="button" class="btn btn-success btn-xs" value="Build graph from selected reactions" id="graphBuild" style="position: relative;left: 20px;" onclick="buildGraph()"/>
<br><p><div id="nbR" style="position: relative;left: 20px;">Total nb of reactions selected: 0</div></p>
<br><br>
<div id="cy" style="height: 700px;"></div>
<br>

  <input id="slide1" type="range" min="-100" max="100" value="0" step="10" oninput="showVal(this.value)"/>
  <input id="slide2" type="range" min="10" max="90" value="50" step="10" oninput="showVal2(this.value)"/>
  <br>
  <p id="midGroup" align="left" style="position:absolute"><input type="button"  id="createMid" onclick="createMiddleNode()" value="Add MidPoint"/></p>
 <br>
  <br><p id="undoGroup" align="left" style="position:absolute"><input id= "linkC" type="checkbox" name="linkC" onclick="changeLinkCompounds(linkC.checked)" />Link compounds<input id= "hideT" type="checkbox" name="hideT" onclick="changeVisibilityToken(hideT.checked)" />Hide Currency Compounds<input id= "hideB" type="checkbox" name="hideB" onclick="changeVisibilityBoxes(hideB.checked)" />Hide Boxes <input type="color" value="#ff0000" id="lcolor" name="lcolor" oninput="changeColor()"><input id= "showF" type="checkbox" name="showF" onclick="showFlux(showF.checked)" />Show Fluxes <input type="button" id="undoG" onclick="undo()" value="Undo" />  Layout:  <select id="selectL" name="decision" onchange="changeLayout(this.value);this.value=null; return false;">
<option selected value="0">Default
<option value="1">COLA
<option value="2">DAGRE
</select>
  </p><br>
  <br><p id="exportGroup" align="left"><input type="button" id="previewG" onclick="mpreviewG()" value="preview mode"/><input type="button"  id="editG" onclick="meditG()" value="edit mode"/><input type="button" id="export" onclick="exportViewPng()" value="Export View Png"/><input type="button" id="export2" onclick="exportFullPng()" value="Export Full Graph Png" /> </p>
  <p><img id ="pngim" style="border:1px solid black;position:absolute" height="250" width="250"></p>
<br><br><br><br><br><br><br><br><br><br><br><br><br>
  <br><p id="svgGroup" align="left" ><input type="button" id="svgExport" onclick="exportSVG()" value="create SVG (experimental)" /><div id="imagesave" ></div></p>
  <br>
 <div id="svgchart" align="left" style="height: 250px;width: 250px;"></div>
 
 <div id="layout1menu" class="btn-group-vertical" role="group" aria-label="..." style="position: absolute;left: 0px;">
<input type="button" class="btn btn-default btn-xs" title="Add under parent" id="b_add_sibling" style="position: relative;left: 20px;" value="Add under parent"/>
<input type="button" class="btn btn-warning btn-xs" title="Cancel" id="b_cancel" style="position: relative;left: 20px;" value="Cancel"/>
</div>


<% var gData=JSON.stringify([]); %>
<input type="text" name="users" id ="users" style="visibility: hidden;" value="[]">
<input type="text" name="owner" id ="owner" style="visibility: hidden;" value="<%=session.User.name%>">
<input type="text"  name="graphdata0" id ="graphdata0" style="visibility: hidden;" value=<%=gData%>>
<input type="text"  name="graphdata1" id ="graphdata1" style="visibility: hidden;" value="">
<input type="text"  name="graphdata2" id ="graphdata2" style="visibility: hidden;" value="">
<input type="text"  name="graphdata3" id ="graphdata3" style="visibility: hidden;" value="">
<input type="text"  name="graphdata4" id ="graphdata4" style="visibility: hidden;" value="">
<input type="text"  name="graphdata5" id ="graphdata5" style="visibility: hidden;" value="">
<input type="text"  name="graphdata6" id ="graphdata6" style="visibility: hidden;" value="">
<input type="text"  name="graphdata7" id ="graphdata7" style="visibility: hidden;" value="">
<input type="text"  name="graphdata8" id ="graphdata8" style="visibility: hidden;" value="">
<input type="text"  name="graphdata9" id ="graphdata9" style="visibility: hidden;" value="">

<input type="submit" class="btn btn-lg btn-primary btn-block" value="Save pathway graph in database"/>
	
	
	
	
<input type="hidden" name="_csrf" value="<%= _csrf %>" />
</form>

<script>
var gdata = <%- JSON.stringify(graphdata) %>
var Gchanged=false;
var prefbadata = <%- JSON.stringify(prefba) %>
//console.log(prefbadata)
//var results=Papa.parse($('#rdat').val(),{	delimiter: "\t",
//									header: false,
//									dynamicTyping: true//,
//									//worker: true,
//									//complete: function(mresults) {
//									//	console.log("Parsing complete:", mresults);
//									//}
//}).data;

//console.log(gdata)
//gdata=jQuery.parseJSON( JSON.stringify(gdata) );
var masterUser=<%-JSON.stringify( session.User.name) %>;
//console.log(masterUser)
var sessionAuthenticated=<%-JSON.stringify( session.authenticated)%>;
if (sessionAuthenticated){
	var listUsers=<%-JSON.stringify( usrs) %>;
	var listLabs=<%-JSON.stringify( labs) %>;
	//console.log(listUsers)
	//console.log(listLabs)

	var dataUsers=new Array(listUsers.length+listLabs.length);

for (var i=0, j=listLabs.length; i<j;i++){
	dataUsers[i]=new Array(3);
	dataUsers[i][0]=listLabs[i]["name"];
	dataUsers[i][1]=false;
	dataUsers[i][2]=true;
	dataUsers[i][3]=false;
}
for (var i=listLabs.length, j=listLabs.length+listUsers.length; i<j;i++){
	dataUsers[i]=new Array(2);
	dataUsers[i][0]=listUsers[i-listLabs.length];
	if (dataUsers[i][0]==masterUser){
		dataUsers[i][1]=false;
		dataUsers[i][2]=false;
		dataUsers[i][3]=true;
	}
	else{
		dataUsers[i][1]=false;
		dataUsers[i][2]=true;
		dataUsers[i][3]=false;
	}
}

greenRenderer = function(instance, td, row, col, prop, value, cellProperties) {
	if (row<listLabs.length){
		Handsontable.renderers.TextRenderer.apply(this, arguments);
		td.style.backgroundColor = 'orange';
	}
	else{Handsontable.renderers.TextRenderer.apply(this, arguments);}

};

var flagCondition=true;
var $container1 = $("#usersTable");
$container1.handsontable({
	data: dataUsers,
	width: 750,
	height:400,
	startRows: 1,
	startCols: 4,
	colHeaders: ['User Name', 'No-Access','Read-Only','Read-Write'],
	columns: [
		{renderer: greenRenderer},
		{type: 'checkbox'},
		{type: 'checkbox'},
		{type: 'checkbox'}
	],
	colWidths: [250, 100,100,100],
	beforeChange: function(changes, source) {
		if (changes){
			for (var i =0; i< changes.length;i++){
				if (changes[i][3]==false && flagCondition==true){
					changes[i]=null;
				}
			}
		}
	},
	afterChange: function(changes, source) {
		if (changes){
			var obj = this;
			var recordedChanges=[];
			for (var i =0; i< changes.length;i++){
				if (changes[i]){
					var rowChanged=changes[i][0];
					var colChanged=changes[i][1];
					for (j=1;j<4;j++){
						if (colChanged!=j){
							if (changes[i][3]==true){
								recordedChanges.push([rowChanged, j, false]);
							}
						}
					}
				}
			}
			flagCondition=false;
			obj.setDataAtCell (recordedChanges)
			flagCondition=true;
			obj.render()
		}
		//console.log(dataUsers)
		document.getElementById("users").value= JSON.stringify(dataUsers);
	},
	minSpareRows: 0
});


var ht = $('#usersTable').handsontable('getInstance');
ht.updateSettings({
	cells: function (row, col, prop) {
		var cellProperties = {};
		if (ht.getData()[row]){
			if (ht.getData()[row][0]==masterUser){
				cellProperties.readOnly = true;
			}
		}
		return cellProperties;
	}
});
//console.log(JSON.stringify(dataUsers))
//console.log(JSON.parse(JSON.stringify(dataUsers)))
	
	//console.log(prefbadata.graphdata.reactions)
	var dataGraph={ 'reactions':[]}
	var reactionsData=[];
	var metabolites_degrees={};
	
	if (!(_.isEmpty(prefbadata))){
		var prereacs= prefbadata.graphdata.reactions;
		for (var i =0, j= gdata.length-1;i<j;i++){
			var parsed = gdata[i][2].replace(/\r/g, "").split(' ');
			var reaction_sfba_name=parsed[0].split(':')[0];
			var res = reaction_sfba_name.replace(/[().]/g, '-');
			var res2 = res.replace(/\+/g, 'plus');
			reaction_sfba_name=res2;
			var isInR=false;
			for (prer in prereacs){
				if (prereacs[prer].name==reaction_sfba_name){
					isInR=true;
				}
			}
			if (isInR==true){
				reactionsData.push([reaction_sfba_name,gdata[i][1], gdata[i][2], true])
			}
			else{
				reactionsData.push([reaction_sfba_name,gdata[i][1], gdata[i][2], false])
			}
			
			var direction;
			var separator=-1;
			for (var nb =1; nb< parsed.length;nb++){
				
				if (parsed[nb].search('<=>')!=-1){
					direction = 'reversible';
					separator=nb;
				}
				else if(parsed[nb].search('-->')!=-1){
					direction = 'right';
					separator=nb;
				}
				else if(parsed[nb].search('<--')!=-1){
					direction = 'left';
					separator=nb;
				}
				else{}
			}
			var involved ={};
			//console.log(parsed)
			for (var nb =1; nb< parsed.length;nb++){
			//for (var nb =1; nb< separator;nb++){
				if (nb< separator){
					if (parsed[nb]!='+'){
						involved[parsed[nb]]=-1.0
						if (metabolites_degrees.hasOwnProperty(parsed[nb])){
							metabolites_degrees[parsed[nb]]+=1;
						}
						else{
							metabolites_degrees[parsed[nb]]=1;
						}
					}
				}
				if (nb> separator){
			//}
			//for (var nb =separator+1; nb< parsed.length;nb++){
					if (parsed[nb]!='+'){
						involved[parsed[nb]]=1.0
						if (metabolites_degrees.hasOwnProperty(parsed[nb])){
							metabolites_degrees[parsed[nb]]+=1;
						}
						else{
							metabolites_degrees[parsed[nb]]=1;
						}
					}
				}
			}
			//dataGraph['reactions'].push({'name': reaction_sfba_name,'sbmlName': gdata[i][0],'direction':direction, 'involvedWith':involved,'color':'red','style':'solid','width':'1','flux':gdata[i][1]})
		}
	}
	else{
		for (var i =0, j= gdata.length-1;i<j;i++){
			var parsed = gdata[i][2].replace(/\r/g, "").split(' ');
			var reaction_sfba_name=parsed[0].split(':')[0];
			var res = reaction_sfba_name.replace(/[().]/g, '-');
			var res2 = res.replace(/\+/g, 'plus');
			reaction_sfba_name=res2;
			reactionsData.push([reaction_sfba_name,gdata[i][1], gdata[i][2], false])
			var direction;
			var separator=-1;
			for (var nb =1; nb< parsed.length;nb++){
				
				if (parsed[nb].search('<=>')!=-1){
					direction = 'reversible';
					separator=nb;
				}
				else if(parsed[nb].search('-->')!=-1){
					direction = 'right';
					separator=nb;
				}
				else if(parsed[nb].search('<--')!=-1){
					direction = 'left';
					separator=nb;
				}
				else{}
			}
			var involved ={};
			//console.log(parsed)
			for (var nb =1; nb< parsed.length;nb++){
			//for (var nb =1; nb< separator;nb++){
				if (nb< separator){
					if (parsed[nb]!='+'){
						involved[parsed[nb]]=-1.0
						if (metabolites_degrees.hasOwnProperty(parsed[nb])){
							metabolites_degrees[parsed[nb]]+=1;
						}
						else{
							metabolites_degrees[parsed[nb]]=1;
						}
					}
				}
				if (nb> separator){
			//}
			//for (var nb =separator+1; nb< parsed.length;nb++){
					if (parsed[nb]!='+'){
						involved[parsed[nb]]=1.0
						if (metabolites_degrees.hasOwnProperty(parsed[nb])){
							metabolites_degrees[parsed[nb]]+=1;
						}
						else{
							metabolites_degrees[parsed[nb]]=1;
						}
					}
				}
			}
			//dataGraph['reactions'].push({'name': reaction_sfba_name,'sbmlName': gdata[i][0],'direction':direction, 'involvedWith':involved,'color':'red','style':'solid','width':'1','flux':gdata[i][1]})
		}
	}
	
	var dataCurrency=[];
	if (!(_.isEmpty(prefbadata))){
		for (elem in metabolites_degrees){
			if (metabolites_degrees.hasOwnProperty(elem)){	
				if 	(prefbadata.graphdata.tokens.indexOf(elem)>-1){	
					dataCurrency.push([elem,metabolites_degrees[elem],true])
				}
				else{
					dataCurrency.push([elem,metabolites_degrees[elem],false])
				}
			}
		}
	}
	else{
		for (elem in metabolites_degrees){
			if (metabolites_degrees.hasOwnProperty(elem)){		
				dataCurrency.push([elem,metabolites_degrees[elem],false])			
			}
		}
	}
	dataCurrency.sort(function(a, b){return (b[1] - a[1]) //causes an array to be sorted numerically and ascending
	});
	
	var recordedChanges={};
	tokens=[];
	var $containerCurrency = $("#CurrencyTable");
	$containerCurrency.handsontable({
		data: dataCurrency,
		width: $("#mcont").width(),
		height:200,
		colWidths: [350, 100,40],
		//dataSchema: {n_id:null, n_name: null, n_hide: null},
		startRows: 1,
		startCols: 5,
		
		colHeaders: ['Metabolite name','connections','Hide'],
		columns: [
		{},
		{type: 'numeric'},
		{type: 'checkbox'}
		],
		beforeChange: function(changes, source) {
		},
		afterChange: function(changes, source) {
			if (changes){
				var obj = this;	
				for (var i =0; i< changes.length;i++){
					if (changes[i]){
						var rowChanged=changes[i][0];
						var colChanged=changes[i][1];
							if (colChanged==2){
								recordedChanges[obj.getDataAtCell (rowChanged,0)]=obj.getDataAtCell (rowChanged,colChanged)
								if (recordedChanges[obj.getDataAtCell (rowChanged,0)]==true){
									
								}
								else{
									delete recordedChanges[obj.getDataAtCell (rowChanged,0)];
								}							
							}
					}
				}
				
				tokens= Object.keys(recordedChanges)
				//console.log(tokens)
			}
		},
		columnSorting: true,
		minSpareRows: 1
	});
	
	
	
	var recordedChangesReactions={};
	
	var $containerf = $("#fbaResult");
	$containerf.handsontable({
	  data: reactionsData,
	  columns: [
		{},
		{},
		{},
		{type: 'checkbox'}
		],
	  width: $("#new-fbapathway-form").width(),
	  height:500,
	  colWidths: [$("#new-fbapathway-form").width()/4.0, 100, $("#new-fbapathway-form").width()/2.5,50],
	  startRows: 5,
	  startCols: 4,
	  colHeaders: ['Reaction name', 'Flux', 'Comment','Select'],
	  afterChange: function(changes, source) {
		if (changes){
			Gchanged=true;
			var obj = this;	
			for (var i =0; i< changes.length;i++){
				if (changes[i]){
					var rowChanged=changes[i][0];
					var colChanged=changes[i][1];
						if (colChanged==3){
							recordedChangesReactions[obj.getDataAtCell (rowChanged,0)]=obj.getDataAtCell (rowChanged,colChanged)
							if (recordedChangesReactions[obj.getDataAtCell (rowChanged,0)]==true){
								
							}
							else{
								delete recordedChangesReactions[obj.getDataAtCell (rowChanged,0)];
							}							
						}
				}
			}
			//console.log(recordedChangesReactions)
			dataGraph={ 'reactions':[]}
			
			
			
			for (var i =0, j= gdata.length-1;i<j;i++){
				
				var parsed = gdata[i][2].replace(/\r/g, "").split(' ');
				
				var tpn=parsed[0];
				var reaction_sfba_name=tpn.split(':')[0];
				
				var res = reaction_sfba_name.replace(/[().]/g, '-');
				var res2 = res.replace(/\+/g, 'plus');
				reaction_sfba_name=res2;
				if (recordedChangesReactions.hasOwnProperty(reaction_sfba_name) ){
					var direction;
					var separator=-1;
					for (var nb =1; nb< parsed.length;nb++){
						
						if (parsed[nb].search('<=>')!=-1){
							direction = 'reversible';
							separator=nb;
						}
						else if(parsed[nb].search('-->')!=-1){
							direction = 'right';
							separator=nb;
						}
						else if(parsed[nb].search('<--')!=-1){
							direction = 'left';
							separator=nb;
						}
						
					}
					if (separator==-1){console.log("weird separator")}
					var involved ={};
					for (var nb =1; nb< separator;nb++){
						if (parsed[nb]!='+'){
							//console.log(parsed[nb])
							involved[parsed[nb]]=-1.0
							
						}
					}
					for (var nb =separator+1; nb< parsed.length;nb++){
						if (parsed[nb]!='+'){
							involved[parsed[nb]]=1.0
						}
					}
					
					//console.log(JSON.stringify(involved))
					dataGraph['reactions'].push({'name': reaction_sfba_name,'sbmlName': gdata[i][0],'direction':direction, 'involvedWith':involved,'color':'red','style':'solid','width':'1','flux':gdata[i][1]})
				
				}
				var isInData=false;
				for (elR in reactionsData){
					if ((reactionsData[elR][0]==reaction_sfba_name) && (reactionsData[elR][3]==true)){
						isInData=true;
						//dataGraph['reactions'].push({'name': reaction_sfba_name,'sbmlName': gdata[i][0],'direction':direction, 'involvedWith':involved,'color':'red','style':'solid','width':'1','flux':gdata[i][1]})
					}
				}
				if(isInData){
					var direction;
					var separator=-1;
					for (var nb =1; nb< parsed.length;nb++){
						
						if (parsed[nb].search('<=>')!=-1){
							direction = 'reversible';
							separator=nb;
						}
						else if(parsed[nb].search('-->')!=-1){
							direction = 'right';
							separator=nb;
						}
						else if(parsed[nb].search('<--')!=-1){
							direction = 'left';
							separator=nb;
						}
						
					}
					if (separator==-1){console.log("weird separator")}
					var involved ={};
					for (var nb =1; nb< separator;nb++){
						if (parsed[nb]!='+'){
							//console.log(parsed[nb])
							involved[parsed[nb]]=-1.0
							
						}
					}
					for (var nb =separator+1; nb< parsed.length;nb++){
						if (parsed[nb]!='+'){
							involved[parsed[nb]]=1.0
						}
					}
					
					//console.log(JSON.stringify(involved))
					
					var isInDataGRaph =false;
					for (rr in dataGraph['reactions']){
						if (dataGraph['reactions'][rr].name==reaction_sfba_name){
							isInDataGRaph=true;
							//dataGraph['reactions'].push({'name': reaction_sfba_name,'sbmlName': gdata[i][0],'direction':direction, 'involvedWith':involved,'color':'red','style':'solid','width':'1','flux':gdata[i][1]})
						}
					}
					if (isInDataGRaph==false){
						dataGraph['reactions'].push({'name': reaction_sfba_name,'sbmlName': gdata[i][0],'direction':direction, 'involvedWith':involved,'color':'red','style':'solid','width':'1','flux':gdata[i][1]})
					}
					
					
					
					
					//dataGraph['reactions'].push({'name': reaction_sfba_name,'sbmlName': gdata[i][0],'direction':direction, 'involvedWith':involved,'color':'red','style':'solid','width':'1','flux':gdata[i][1]})
				}
				
					//reactionsData.push([reaction_sfba_name,gdata[i][1], gdata[i][2], true])
				
			}
			if (dataGraph['reactions'].length>100){
				document.getElementById("nbR").innerHTML=("Total nb of reactions selected: " +dataGraph['reactions'].length + " <br><b>(Warning: selecting more than 100 reactions will make the layout very slow !! )</b><br><b>This editor is just intended for drawing small subsets of relevant reactions e.g. catabolic core,<br> and making the resulting figure ready for publication</b>");
			}
			else{
				document.getElementById("nbR").innerHTML=("Total nb of reactions selected: " +dataGraph['reactions'].length);
			}
			//console.log("eeeeee")
			//console.log(dataGraph)
		}
	  },
	  minSpareRows: 1
	});
	
	$('#searchgrid1').on('keyup',function(event){
		var value = ('' + this.value).toLowerCase();
		var row,col,r_len,c_len,td;
		var mdata = dataCurrency;
		var searcharray = [];
		if(value){
			if( value.length>1){
				//console.log(value)
				for(row=0,r_len = mdata.length;row< r_len;row++){
					for(col in mdata[row]){
						if (mdata[row].hasOwnProperty(col)){
							if(mdata[row][col] == null){
								continue;
							}
							if(('' + mdata[row][col]).toLowerCase().indexOf(value) > -1){
								searcharray.push(mdata[row])
								break;
							}
							else{
							}
						}
					}
				}
				var ht = $('#CurrencyTable').handsontable('getInstance');
				if ($.isArray(searcharray) && searcharray[0] ){
					ht.loadData(searcharray);
				}
			}
		}
		else{
			var ht = $('#CurrencyTable').handsontable('getInstance');
			ht.loadData(dataCurrency);
		}
		
	});	
	
	$('#searchgrid2').on('keyup',function(event){
		var value = ('' + this.value).toLowerCase();
		var row,col,r_len,c_len,td;
		var mdata = reactionsData;
		var searcharray = [];
		if(value){
			if( value.length>1){
				//console.log(value)
				for(row=0,r_len = mdata.length;row< r_len;row++){
					for(col in mdata[row]){
						if (mdata[row].hasOwnProperty(col)){
							if(mdata[row][col] == null){
								continue;
							}
							if(('' + mdata[row][col]).toLowerCase().indexOf(value) > -1){
								searcharray.push(mdata[row])
								break;
							}
							else{
							}
						}
					}
				}
				var ht = $('#fbaResult').handsontable('getInstance');
				if ($.isArray(searcharray) && searcharray[0] ){
					ht.loadData(searcharray);
				}
			}
		}
		else{
			var ht = $('#fbaResult').handsontable('getInstance');
			ht.loadData(reactionsData);
		}
		
	});	
	
	
	/////////////////////////////////////////////////////////////
	var listNodes=[]
	var listEdges=[]  
	var edgeSelected;  
	var nextStateJson=0;
	var historyUndo=[];
	var historyPositions=[];
	var mtokens;
	var startLayoutElements;
	var startLayoutPositions;

	var targetNode="";
	var draggedNode="";

	$('#layout1menu').hide();
	
	//$(function(){ // on dom ready

		document.getElementById("slide1").style.visibility = "hidden";	
		document.getElementById("lcolor").style.visibility = "hidden";	
		document.getElementById("slide2").style.visibility = "hidden";
		document.getElementById("createMid").style.visibility = "hidden";
		
		document.getElementById("slide1").style.left = "0px";
		document.getElementById("slide1").setAttribute('orient','vertical');
		document.getElementById("slide2").style.top = "120px";
		document.getElementById("slide2").style.left = "20px";
		$("#dy").width($("#mcont").width());
	//});
	
	
	
	
	
	var data;
	
	function buildGraph(){
		listNodes=[];
		listEdges=[];
		//console.log(tokens)
		data = dataGraph;
		//console.log(data['reactions'].length)
		var go_on=true;
		if (data['reactions'].length>130){
			var r = confirm("You have more than 100 reactions selected.\n Things might get slow, or even stuck.\nAre you sure you want to proceed?\n (If you have a problem you can always close and reload the page)");
			if (r == true) {
				go_on=true;
			} else {
				go_on=false;
			}
		}
		if (go_on==true){
			for (var reaction in data['reactions']) {
				if (data['reactions'].hasOwnProperty(reaction)) {
					var res = data['reactions'][reaction]['name'].replace(/[().]/g, '-');
					var res2 = res.replace(/\+/g, 'plus');
					data['reactions'][reaction]['name']=res2;
					for (var comp in data['reactions'][reaction]['involvedWith']) {
						
						if (data['reactions'][reaction]['involvedWith'].hasOwnProperty(comp)) {						
							if (comp.indexOf('+')>0){
							//console.log(comp)
								var comp2 = comp.replace(/\+/g, 'plus');
								var comp3 = comp2.replace(/[().]/g, '-');
								data['reactions'][reaction]['involvedWith'][comp3]=data['reactions'][reaction]['involvedWith'][comp]
								delete data['reactions'][reaction]['involvedWith'][comp]
								//console.log(comp3)
							}
						}
					}
				}
			}
			//console.log(data)
			// get rid of reactions with different names but identical content 
			var list_redundant=[];
			for (var reaction in data['reactions']) {
				if (data['reactions'].hasOwnProperty(reaction)) {
					var compounds = data['reactions'][reaction]['involvedWith']
					for (var reaction2 in data['reactions']) {
						if (data['reactions'].hasOwnProperty(reaction2) && (data['reactions'][reaction]['name'] != data['reactions'][reaction2]['name']) ) {
							var compounds2 = data['reactions'][reaction2]['involvedWith']
							if (_.isEqual(compounds, compounds2)){
								if ((list_redundant.indexOf(data['reactions'][reaction]['name'])==-1) && (list_redundant.indexOf(data['reactions'][reaction2]['name'])==-1)){
									list_redundant.push(data['reactions'][reaction2]['name'])
									//console.log(data['reactions'][reaction2]['name'] +' and ' +data['reactions'][reaction]['name'])
								}
							}
						}
					}
				}
			}
			if (list_redundant.length>0){
				console.log("redundant reactions :")
				console.log(list_redundant)
			var data2={'reactions':[]}
			for (var r=0;r<list_redundant.length;r++) {
				for (var reaction in data['reactions']) {
					if (data['reactions'].hasOwnProperty(reaction)) {
						if (data['reactions'][reaction]['name']==list_redundant[r]){
							
						}
						else{
							data2['reactions'].push(data['reactions'][reaction])
						}
						
						
					}
				}
					
			}
			//console.log(data)
			data = data2;
			
			}
			
			// create nodes
			for (var reaction in data['reactions']) {
				if (data['reactions'].hasOwnProperty(reaction)) {
					//console.log(data['reactions'][reaction]['name'])
					//console.log(data['reactions'][reaction]['direction'])
					//console.log(data['reactions'][reaction]['involvedWith'])
					//listNodes.push({ data: { id: data['reactions'][reaction]['name'], name: data['reactions'][reaction]['name'],weight: 100, col: '#efefef'} })
					listNodes.push({ data: { id: 'parent'+data['reactions'][reaction]['name'], name: data['reactions'][reaction]['name'],weight: parseFloat(data['reactions'][reaction]['width'])+5, col: "#cccccc", valign:'top', halign:'center',fontsize:'10',fontstyle:'italic', isJoint:parseFloat(data['reactions'][reaction]['width'])+5/*, parent :data['reactions'][reaction]['name']*/} })
					listNodes.push({ data: { id: data['reactions'][reaction]['name'],parent: 'parent'+data['reactions'][reaction]['name'], name: data['reactions'][reaction]['name'],weight: parseFloat(data['reactions'][reaction]['width'])+5, col: data['reactions'][reaction]['color'], valign:'top', halign:'center',fontsize:'10',fontstyle:'italic', isJoint:parseFloat(data['reactions'][reaction]['width'])+5, isReaction: true/*, parent :data['reactions'][reaction]['name']*/} })
					for (var metabolite in data['reactions'][reaction]['involvedWith']) {
						if (data['reactions'][reaction]['involvedWith'].hasOwnProperty(metabolite)) {
							//console.log(data['reactions'][reaction]['name']+'___'+metabolite)
							//if (data['reactions'][reaction]['direction']=='right'){
							listNodes.push({ data: { id: data['reactions'][reaction]['name']+'___'+metabolite, parent: 'parent'+data['reactions'][reaction]['name'],name: metabolite,weight: 8, col: 'black', valign:'bottom', halign:'right',fontsize:'10',fontstyle:'normal', isJoint:0, flux:data['reactions'][reaction]['flux']/*, parent :data['reactions'][reaction]['name']*/} })
							
							//}
							//else if (data['reactions'][reaction]['direction']=='left'){													
							//	listNodes.push({ data: { id: data['reactions'][reaction]['name']+'___'+metabolite, parent: 'parent'+data['reactions'][reaction]['name'],name: metabolite,weight: 8, col: 'black', valign:'bottom', halign:'right',fontsize:'10',fontstyle:'normal', isJoint:0/*, parent :data['reactions'][reaction]['name']*/} })
							//}
							//else{
							//	listNodes.push({ data: { id: data['reactions'][reaction]['name']+'___'+metabolite, parent: 'parent'+data['reactions'][reaction]['name'],name: metabolite,weight: 8, col: 'black', valign:'bottom', halign:'right',fontsize:'10',fontstyle:'normal', isJoint:0/*, parent :data['reactions'][reaction]['name']*/} })
							//}
						}
					}
				}
			}
			//console.log(listNodes)
			// create edges
			for (var reaction in data['reactions']) {
				if (data['reactions'].hasOwnProperty(reaction)) {
					for (var metabolite in data['reactions'][reaction]['involvedWith']) {
						
						if (data['reactions'][reaction]['involvedWith'].hasOwnProperty(metabolite)) {
						//console.log(metabolite)
							
							if (data['reactions'][reaction]['involvedWith'][metabolite]>0){
								if (data['reactions'][reaction]['direction']=='reversible'){
									listEdges.push({ data: { source: data['reactions'][reaction]['name'], target: data['reactions'][reaction]['name']+'___'+metabolite ,tshape: 'triangle',sshape: 'none', col: data['reactions'][reaction]['color'], style: data['reactions'][reaction]['style'], width : data['reactions'][reaction]['width'], flux:data['reactions'][reaction]['flux'], curve:'0', center_curve:'0.5',side:'right'} })				
								}
								else {
									if (data['reactions'][reaction]['direction']=='right'){
										listEdges.push({ data: { source: data['reactions'][reaction]['name'], target: data['reactions'][reaction]['name']+'___'+metabolite ,tshape: 'triangle',sshape: 'none', col: data['reactions'][reaction]['color'],style: data['reactions'][reaction]['style'],width : data['reactions'][reaction]['width'], flux:data['reactions'][reaction]['flux'],curve:'0',center_curve:'0.5',side:'right'} })		
									}
									else if (data['reactions'][reaction]['direction']=='left'){
										listEdges.push({ data: { source: data['reactions'][reaction]['name'], target: data['reactions'][reaction]['name']+'___'+metabolite ,tshape: 'none',sshape: 'none', col: data['reactions'][reaction]['color'], style: data['reactions'][reaction]['style'],width : data['reactions'][reaction]['width'], flux:data['reactions'][reaction]['flux'],curve:'0',center_curve:'0.5',side:'right'} })
									}
								}
							}
							else if (data['reactions'][reaction]['involvedWith'][metabolite]<0){
								if (data['reactions'][reaction]['direction']=='reversible'){
									listEdges.push({ data: { source: data['reactions'][reaction]['name']+'___'+metabolite, target: data['reactions'][reaction]['name'] ,tshape: 'none',sshape: 'triangle', col: data['reactions'][reaction]['color'], style: data['reactions'][reaction]['style'],width : data['reactions'][reaction]['width'], flux:data['reactions'][reaction]['flux'],curve:'0',center_curve:'0.5',side:'left'} })
								}
								else {
									if (data['reactions'][reaction]['direction']=='right'){
										listEdges.push({ data: { source: data['reactions'][reaction]['name']+'___'+metabolite, target: data['reactions'][reaction]['name'] ,tshape: 'none',sshape: 'none', col: data['reactions'][reaction]['color'], style: data['reactions'][reaction]['style'],width : data['reactions'][reaction]['width'], flux:data['reactions'][reaction]['flux'],curve:'0',center_curve:'0.5',side:'left'} })
									}
									else if (data['reactions'][reaction]['direction']=='left'){
										listEdges.push({ data: { source: data['reactions'][reaction]['name']+'___'+metabolite, target: data['reactions'][reaction]['name'] ,tshape: 'none',sshape: 'triangle', col: data['reactions'][reaction]['color'], style: data['reactions'][reaction]['style'],width : data['reactions'][reaction]['width'], flux:data['reactions'][reaction]['flux'],curve:'0',center_curve:'0.5',side:'left'} })
									}
								}
							}
							//{ data: { source: 's', target: 'c' ,tshape: 'none',sshape: 'none', col: 'red',curve:'0px'} },
						}
					}
				}
			}
			
			//console.log(listEdges)
			$('#cy').cytoscape({
				wheelSensitivity: 0.2,
				style: cytoscape.stylesheet()
				.selector('node')
				  .css({
					'content': 'data(name)',
					'font-style': 'data(fontstyle)',
					'text-valign':'data(valign)',
					'text-halign': 'data(halign)',
					'font-size':'data(fontsize)',
					'width': 'data(weight)',
					'height': 'data(weight)',
					'color': 'black',
					'background-color': 'data(col)',
					'text-outline-width': 0,
					'text-outline-color': '#888',
				  })
				.selector('edge')
				  .css({
					'target-arrow-color': 'data(col)',
					'target-arrow-shape': 'data(tshape)',
					'source-arrow-color': 'data(col)',
					'source-arrow-shape': 'data(sshape)',
					'line-color': 'data(col)',
					'line-style': 'data(style)',//'dashed',// 'solid' 'dashed' 'dotted'
					'width': 'data(width)'
					//'curve-style': 'unbundled-bezier',
					//'control-point-distance': 'data(curve)',
					//'control-point-weight': '0.5',
					//'width': '2'
				  })
				.selector(':selected')
				  .css({
					'background-color': 'blue',
					'line-color': 'blue',
					'target-arrow-color': 'blue',
					'source-arrow-color': 'blue',
					'color': 'blue',
				  })
				.selector('.faded')
				  .css({
					'opacity': 0.25,
					'text-opacity': 0
				  }),

				elements: {
					nodes: listNodes,
					edges: listEdges//[
				},

				layout: {
				name: 'null',
				//name: 'breadthfirst',
				padding: 10
				},
				
				ready: function(){
					window.cy = this;
				
					cy.elements()
					cy.on('tap', 'node', function(e){
					  var node = e.cyTarget; 
					  var neighborhood = node.neighborhood().add(node);
					  
					  cy.elements().addClass('faded');
					  neighborhood.removeClass('faded');
					});
					
					cy.on('tap', 'edge', function(e){
						var edge = e.cyTarget; 
						edgeSelected =edge._private.data.id;
						document.getElementById("slide1").value = edge._private.data.curve;
						document.getElementById("slide2").value = edge._private.data.center_curve*100;
						//console.log(edge.id())
						document.getElementById("lcolor").value=d3.rgb(edge.data('col')).toString();
						var neighborhood = edge.neighborhood().add(edge);
						document.getElementById("slide1").style.visibility = "visible";	
						document.getElementById("slide2").style.visibility = "visible";	
						document.getElementById("createMid").style.visibility = "visible";
						document.getElementById("lcolor").style.visibility = "visible";
						cy.elements().addClass('faded');
						neighborhood.removeClass('faded');
						var tmpcoord ={}
						cy.nodes().forEach(function( node ){
							tmpcoord[node.id()]={};
							tmpcoord[node.id()].x=node.position('x')
							tmpcoord[node.id()].y=node.position('y')
						})
						if (historyUndo.length<5){
							historyPositions.push(tmpcoord);
							historyUndo.push(cy.json());
							nextStateJson=historyUndo.length-1;
						}
						else{
							historyPositions.splice(0, 1);
							historyPositions.push(tmpcoord);
							historyUndo.splice(0, 1);
							historyUndo.push(cy.json());
							nextStateJson=historyUndo.length-1;
						}
					});
					
					cy.on('grab', function(e){
						var tmpcoord ={}
						cy.nodes().forEach(function( node ){
							tmpcoord[node.id()]={};
							tmpcoord[node.id()].x=node.position('x')
							tmpcoord[node.id()].y=node.position('y')
						})
						if (historyUndo.length<5){
							historyPositions.push(tmpcoord);
							historyUndo.push(cy.json());
							nextStateJson=historyUndo.length-1;
						}
						else{
							historyPositions.splice(0, 1);
							historyPositions.push(tmpcoord);
							historyUndo.splice(0, 1);
							historyUndo.push(cy.json());
							nextStateJson=historyUndo.length-1;
						}
					});
					cy.on('select', function(e){
					document.getElementById("lcolor").style.visibility = "visible";
					});
					cy.on('tap', function(e){
					
					  if( e.cyTarget === cy ){
						edgeSelected ='';
						cy.elements().removeClass('faded');
						document.getElementById("slide1").style.visibility = "hidden";	
						document.getElementById("slide2").style.visibility = "hidden";	
						document.getElementById("createMid").style.visibility = "hidden";
						document.getElementById("lcolor").style.visibility = "hidden";
						var tmpcoord ={}
						cy.nodes().forEach(function( node ){
							tmpcoord[node.id()]={};
							tmpcoord[node.id()].x=node.position('x')
							tmpcoord[node.id()].y=node.position('y')
						})
						if (historyUndo.length<5){
							historyPositions.push(tmpcoord);
							historyUndo.push(cy.json());
							nextStateJson=historyUndo.length-1;
						}
						else{
							historyPositions.splice(0, 1);
							historyPositions.push(tmpcoord);
							historyUndo.splice(0, 1);
							historyUndo.push(cy.json());
							nextStateJson=historyUndo.length-1;
						}
					  }
					});
					
					var button2 = document.getElementById( 'b_add_sibling' );
					button2.addEventListener( 'click', function ( event ) {
						//console.log(draggedNode)
						var node = cy.$('#'+draggedNode);
						var target = cy.$('#'+targetNode);
						
						
						var parent1=[];
						parent1.push({});
						for (elem in node.data()){
							if (elem=="id"){
								parent1[0][elem]=node.data()[elem]
							}
							else{
								parent1[0][elem]=node.data()[elem]
							}
						}
						parent1[0]["parent"]=targetNode;
						parent1.push(node.position('x'));
						parent1.push(node.position('y'));
						
						var des = node.descendants();
						
						var clone_nodes={};
						des.forEach(function( ele ){
							clone_nodes[ele.id()]=[{},ele.position('x'),ele.position('y')]
							for (elem in ele.data()){
								if((elem=="parent") && (ele.data()[elem]==node.id())){
									clone_nodes[ele.id()][0][elem]=parent1[0]["id"]
								}
								else{
									clone_nodes[ele.id()][0][elem]=ele.data()[elem];
								}
							}
							
						});
						
						var clone_edges={};
						des.connectedEdges().forEach(function( ele ){
							clone_edges[ele.id()]={}
							for (elem in ele.data()){
								clone_edges[ele.id()][elem]=ele.data()[elem];
							}
							
						});
						
						des.remove()
						node.remove()
						
						cy.add({group: "nodes",  data: parent1[0]})
						cy.$('#'+parent1[0]["id"]).position('x',parent1[1]);
						cy.$('#'+parent1[0]["id"]).position('y',parent1[2]);
						
						for (elem in clone_nodes){
							cy.add({group: "nodes",  data: clone_nodes[elem][0]})
							cy.$('#'+clone_nodes[elem][0]["id"]).position('x',clone_nodes[elem][1]);
							cy.$('#'+clone_nodes[elem][0]["id"]).position('y',clone_nodes[elem][2]);
						}
						for (elem in clone_edges){
						 cy.add({group: "edges",  data: clone_edges[elem]})
						}
						
						
						
						targetNode="";
						draggedNode="";
						$('#layout1menu').hide();
					});
					
					
					var button3 = document.getElementById( 'b_cancel' );
					button3.addEventListener( 'click', function ( event ) {
							$('#layout1menu').hide();
					});
					
					
					cy.on('free','node', function(e){
						var node = e.cyTarget;
						var boxNodeDragged = node.boundingBox( {'includeLabels':false});
						var otherNode;
						var compoundNodesToMerge=[]
						cy.nodes().forEach(function( ele ){
							if (ele.id()!=node.id() ){
								if ((ele.position().x>= boxNodeDragged.x1) && (ele.position().x <= boxNodeDragged.x2) && (ele.position().y>= boxNodeDragged.y1) && (ele.position().y <= boxNodeDragged.y2)){
									if ((node.id()!=ele.parent().id() ) && (node.isParent() &&  ele.isParent() ) ){
										var parentIn=false;
										ele.parents().forEach(function( par ){
											if (compoundNodesToMerge.indexOf(par.id())>-1){
												parentIn=true;
											}
										});
										
										if (parentIn==false){
										//mergeCompoundNodes=true;
											if (compoundNodesToMerge.indexOf(node.id())==-1){
												compoundNodesToMerge.push(node.id())
											}
											if (compoundNodesToMerge.indexOf(ele.id())==-1){
												compoundNodesToMerge.push(ele.id())
											}
										}
									}
								
								}
							}
						});
						if(compoundNodesToMerge.length==0 && !(node.isParent())){
							cy.nodes().forEach(function( ele ){
								if (ele.id()!=node.id() ){
								
									if ((ele.position().x>= boxNodeDragged.x1) && (ele.position().x <= boxNodeDragged.x2) && (ele.position().y>= boxNodeDragged.y1) && (ele.position().y <= boxNodeDragged.y2)){
										
										if (node.id()!=ele.parent().id() ){
											var pathGroup = cy.elements().breadthFirstSearch('#'+node.id());
											var areadyInGroup =false;										
											var r = confirm("Do you want to merge and replace "+node.data().name +" with "+ele.data().name);
											if (r == true) {
												var linksNode = node.connectedEdges()
												linksNode.forEach(function( edge ){
													//console.log(edge.data())
													if (edge.data().source==node.id()){
														cy.add({group: "edges",  data: { source: ele.id(), target: edge.data().target ,tshape: edge.data().tshape,sshape: edge.data().sshape, col: edge.data().col, style: edge.data().style ,width : edge.data().width,curve:edge.data().curve,center_curve:edge.data().center_curve,side:edge.data().side}})
													}
													if (edge.data().target==node.id()){
														cy.add({ group: "edges", data: { source: edge.data().source, target: ele.id() ,tshape: edge.data().tshape,sshape: edge.data().sshape, col: edge.data().col, style: edge.data().style,width : edge.data().width,curve:edge.data().curve,center_curve:edge.data().center_curve,side:edge.data().side}})
													}
												});
												cy.remove(node)											
												var tmpcoord ={}
												cy.nodes().forEach(function( node ){
													tmpcoord[node.id()]={};
													tmpcoord[node.id()].x=node.position('x')
													tmpcoord[node.id()].y=node.position('y')
												})
												if (historyUndo.length<5){
													historyPositions.push(tmpcoord);
													historyUndo.push(cy.json());
													nextStateJson=historyUndo.length-1;
												}
												else{
													historyPositions.splice(0, 1);
													historyPositions.push(tmpcoord);
													historyUndo.splice(0, 1);
													historyUndo.push(cy.json());
													nextStateJson=historyUndo.length-1;
												}
											}
										}
										
									}
								}
							});
						}
						else{
							if (compoundNodesToMerge.length==2){
								//console.log(compoundNodesToMerge)
								draggedNode=node.id();
								var target;
								//console.log(compoundNodesToMerge)
								if (compoundNodesToMerge.indexOf(node.id())==0){
									target=compoundNodesToMerge[1];
								}
								else{
									target=compoundNodesToMerge[0];
								}
								if (cy.nodes().filter('$node > node > node').intersection(cy.$('#'+target+' , #'+draggedNode)).length>0){
									var isChild = node.parents().intersection(cy.$('#'+target));
									//var isParent = cy.$('#'+target).parents().intersection(node);
									if (isChild.length==0 ){
										//console.log("aaaaaaa")
										//console.log(cy.$('#'+target).data("name"))
										var possible_targets= cy.$('#'+target).descendants().filter('$node > node > node');
										var candidates=[];
										possible_targets.forEach(function( rectangle ){
											if ((rectangle.position().x>= boxNodeDragged.x1) && (rectangle.position().x <= boxNodeDragged.x2) && (rectangle.position().y>= boxNodeDragged.y1) && (rectangle.position().y <= boxNodeDragged.y2)){
												candidates.push(rectangle.id());
											}
										})
										//console.log(candidates)
										
										if (candidates.length>0){
											//console.log("aaaaaa")
											//console.log(candidates[candidates.length-1])	
											targetNode=candidates[candidates.length-1];
											$('#layout1menu').show();
											document.getElementById("layout1menu").style.top = (event.clientY + $( "#cy" ).position().top)+'px';
											document.getElementById("layout1menu").style.left = event.clientX+ 'px';
										}
										else{
											//console.log("aaaaaa")
											if (node.descendants().intersection(cy.$('#'+target)).length==0){
												targetNode=target;
												$('#layout1menu').show();
											document.getElementById("layout1menu").style.top = (event.clientY +$( "#cy" ).position().top)+ 'px';
											document.getElementById("layout1menu").style.left = event.clientX+ 'px';
											}
											//console.log(target)
										}
										
									}
								}
							}
						}
					});
					
				if (_.isEmpty(prefbadata)){	
				var l_tokens = tokens;
				mtokens =tokens;
				
				cy.batch(function(){
					var im=0;
					var jm=0;
					var km=0;
					for (var reaction in data['reactions']) {
						if (data['reactions'].hasOwnProperty(reaction)) {
							//console.log(cy.nodes())
							//console.log(cy.$('#'+data['reactions'][reaction]['name']).id())
							if (data['reactions'][reaction]['name'].endsWith('_tx')){
								
								cy.$('#'+data['reactions'][reaction]['name']).position('x', 0+jm*400);
								cy.$('#'+data['reactions'][reaction]['name']).position('y', -300);
								
								jm+=1;
							}
							else{
								
								
								cy.$('#'+data['reactions'][reaction]['name']).position('x', 0+im*900);
								cy.$('#'+data['reactions'][reaction]['name']).position('y', 200+km*400);
								
								
								if (im==6){im=0; km+=1}
								else{im+=1;}
							}
							

							
							var metabolites = Object.keys(data['reactions'][reaction]['involvedWith'])
							//console.log(metabolites)
							var metabolitesL=[];
							var metabolitesR=[];
							for (var metabolite in data['reactions'][reaction]['involvedWith']) {
								if (data['reactions'][reaction]['involvedWith'].hasOwnProperty(metabolite)) {
									if (data['reactions'][reaction]['involvedWith'][metabolite]<0){
										if (l_tokens.indexOf(metabolite) >= 0){
											metabolitesL.push(metabolite)
										}
										else{
											metabolitesL.unshift(metabolite)
										}
										
									}
									if (data['reactions'][reaction]['involvedWith'][metabolite]>0){
										if (l_tokens.indexOf(metabolite) >= 0){
											metabolitesR.push(metabolite)
										}
										else{
											metabolitesR.unshift(metabolite)
										}
									}
								}
							}
							
							if (metabolites.length == 2){
								
								cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolites[0]).position('x', cy.$('#'+data['reactions'][reaction]['name']).position('x'));
								cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolites[0]).position('y', cy.$('#'+data['reactions'][reaction]['name']).position('y')-100);
								cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolite).data("side","left")
								cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolites[1]).position('x', cy.$('#'+data['reactions'][reaction]['name']).position('x'));
								cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolites[1]).position('y', cy.$('#'+data['reactions'][reaction]['name']).position('y')+100);
								cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolite).data("side","right")
							}
							else if (metabolites.length >2){
								var nbMetabolitesLeft = 0;
								var nbMetabolitesRight = 0;
								for (var metabolite in data['reactions'][reaction]['involvedWith']) {
									
									
									if (data['reactions'][reaction]['involvedWith'].hasOwnProperty(metabolite)) {
										if (data['reactions'][reaction]['involvedWith'][metabolite]<0){
											nbMetabolitesRight +=1;
										}
										if (data['reactions'][reaction]['involvedWith'][metabolite]>0){
											nbMetabolitesLeft +=1;
										}
									}
								}
								if (nbMetabolitesLeft==nbMetabolitesRight){
									
									for (var metabolite in data['reactions'][reaction]['involvedWith']) {
										if (data['reactions'][reaction]['involvedWith'].hasOwnProperty(metabolite)) {
											if (data['reactions'][reaction]['involvedWith'][metabolite]<0){
												var indent =0;
												if (metabolitesL.indexOf(metabolite)>0){
													indent =0
												}
												cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolite).position('x', cy.$('#'+data['reactions'][reaction]['name']).position('x')+(metabolitesL.indexOf(metabolite)*50));//+50*(cntRight/(nbMetabolitesRight)));											
												cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolite).position('y', cy.$('#'+data['reactions'][reaction]['name']).position('y')-100+indent);
												cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolite).data("side","left")
												
											}
											if (data['reactions'][reaction]['involvedWith'][metabolite]>0){
												var indent =0;
												if (metabolitesR.indexOf(metabolite)>0){
													indent =0
												}
												cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolite).position('x', cy.$('#'+data['reactions'][reaction]['name']).position('x')+(metabolitesR.indexOf(metabolite)*50));//-50*(cntLeft/(nbMetabolitesLeft)));
												cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolite).position('y', cy.$('#'+data['reactions'][reaction]['name']).position('y')+100-indent);
												cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolite).data("side","right")
												
											}
										}
									}
								}
								else{
									
									for (var metabolite in data['reactions'][reaction]['involvedWith']) {
										if (data['reactions'][reaction]['involvedWith'].hasOwnProperty(metabolite)) {
											if (data['reactions'][reaction]['involvedWith'][metabolite]<0){
												var indent =0;
												if (metabolitesL.indexOf(metabolite)>0){
													indent =0
												}
												cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolite).position('x', cy.$('#'+data['reactions'][reaction]['name']).position('x')+(metabolitesL.indexOf(metabolite))*50);
												cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolite).position('y', cy.$('#'+data['reactions'][reaction]['name']).position('y')-100+indent);
												cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolite).data("side","left")
												
											}
											if (data['reactions'][reaction]['involvedWith'][metabolite]>0){
												var indent =0;
												if (metabolitesR.indexOf(metabolite)>0){
													indent =0
												}
												cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolite).position('x', cy.$('#'+data['reactions'][reaction]['name']).position('x')+(metabolitesR.indexOf(metabolite))*50);
												cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolite).position('y', cy.$('#'+data['reactions'][reaction]['name']).position('y')+100-indent);
												cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolite).data("side","right")
												
											}
										}
									}
									
								}
								
							}
							
							
							
						}
					}
				
				});
				// do multiple pass pairing of reactions involving the same compounds, to find network clusters of reactions
				var ReactionsCompounds={}
				for (var reaction in data['reactions']) {
					if (data['reactions'].hasOwnProperty(reaction)) {
						for (var metabolite in data['reactions'][reaction]['involvedWith']) {
							
							if (data['reactions'][reaction]['involvedWith'].hasOwnProperty(metabolite)) {
								if (l_tokens.indexOf(metabolite) == -1){
									if (ReactionsCompounds[data['reactions'][reaction]['name']]){
									
										ReactionsCompounds[data['reactions'][reaction]['name']].push(metabolite)
									}
									else{
										ReactionsCompounds[data['reactions'][reaction]['name']]=[];
										ReactionsCompounds[data['reactions'][reaction]['name']].push(metabolite)
									}
								}
							}
						}
					}
				}
				//console.log(ReactionsCompounds)
				var pairs={}
				for (var reaction in ReactionsCompounds) {
					if (ReactionsCompounds.hasOwnProperty(reaction)) {
						for (var reaction2 in ReactionsCompounds) {
							if (ReactionsCompounds.hasOwnProperty(reaction2)) {
								if (reaction!=reaction2){
									if(pairs[reaction+'___'+reaction2]){
										pairs[reaction+'___'+reaction2].concat(_.intersection(ReactionsCompounds[reaction], ReactionsCompounds[reaction2]));
									}
									else{
										if(pairs[reaction2+'___'+reaction]){
											pairs[reaction2+'___'+reaction].concat(_.intersection(ReactionsCompounds[reaction], ReactionsCompounds[reaction2]));
										}
										else{
											pairs[reaction+'___'+reaction2]=_.intersection(ReactionsCompounds[reaction], ReactionsCompounds[reaction2]);
										}
									}
									
									
								}
							}
						}
					}
				}
				for (var pair in pairs) {
					if (pairs.hasOwnProperty(pair)) {
					 if (pairs[pair].length==0){
						//console.log(pair)
						delete pairs[pair]
					 }
					}
				}
				var tupples ={}
				for (var pair in pairs) {
					if (pairs.hasOwnProperty(pair)) {
						var leftReac = pair.split("___")[0];
						var rightReac = pair.split("___")[1];
						if (tupples[leftReac] && !(rightReac.endsWith('_tx'))){/////////////////////////
							tupples[leftReac]=_.uniq(tupples[leftReac].concat(leftReac,rightReac));
						}
						else{
							if (!(rightReac.endsWith('_tx'))){
								tupples[leftReac]=[leftReac,rightReac];
							}
						}
					}
				}
				for (var item in tupples) {
					if (tupples.hasOwnProperty(item)) {
						for (var item2 in tupples) {
							if (tupples.hasOwnProperty(item2)) {
								if (item!=item2){
									var intersect = _.intersection(tupples[item2],tupples[item])
									if (tupples[item2].indexOf(item)>0){
										tupples[item]=_.uniq(tupples[item2].concat(tupples[item]));
										delete tupples[item2]
									}	
									else if ( intersect.length>0){
										tupples[item]=_.uniq(tupples[item].concat(tupples[item2]));
										delete tupples[item2]
									}
								}
							}
						}
					}
				}
				
				//console.log(tupples)
				cy.batch(function(){
					var cnt=0;
					for (var tup in tupples) {
						if (tupples.hasOwnProperty(tup)) {
							//cy.add({group: "nodes",  data: { id: 'parent_'+tup, name: 'parent_'+tup,weight: 1, col: 'red', valign:'top', halign:'center',fontsize:'10',fontstyle:'italic'/*, parent :data['reactions'][reaction]['name']*/}});
							for (var t =0;t<tupples[tup].length;t++){
								var pathGroup = cy.elements().breadthFirstSearch('#'+tupples[tup][t]);
								var centerx = cy.$('#'+tupples[tup][t]).position('x');
								var centery = cy.$('#'+tupples[tup][t]).position('y');
								pathGroup.path.forEach(function( ele ){
										if (ele.isNode()){
											//if (ele.data('name')=='RXN-7909'){console.log('RXN-7909')}
											//if (ele.data('name')=='ADDALT-RXN'){console.log('ADDALT-RXN')}
											//if (ele.data('name')=='CH4_tx'){console.log('CH4_tx')}
											
											ele.position('x',ele.position('x')-centerx+t* 340 );
											ele.position('y',ele.position('y')-centery+cnt*400);							
										}
								});
								//cy.$('#'+tupples[tup][t]).data('parent','parent_'+tup);
								
							}
							cnt+=1;
						}
					}	
				});
				////////////////////////////////////////////////////////////////////////////
				// start linking reactions
				var reactionProximity={}
				for (var pair in pairs) {
					if (pairs.hasOwnProperty(pair)) {
						reactionProximity[pair.split("___")[0]]=0;
					}
				}
				var listJunctions={};
				var cnt=0;
				
				
				
				for (var pair in pairs) {
					if (pairs.hasOwnProperty(pair)) {
						var leftReac = pair.split("___")[0];
						var rightReac = pair.split("___")[1];
						
						if (!(leftReac.endsWith('_tx') || rightReac.endsWith('_tx'))){
							for (var met =0;met<pairs[pair].length;met++) {
								var metabolite = pairs[pair][met]
								var idNode1 = leftReac+'___'+metabolite;
								var idNode2 = rightReac+'___'+metabolite;
								if (listJunctions.hasOwnProperty(idNode1) && listJunctions.hasOwnProperty(idNode2)){
									
								}
								else if (listJunctions.hasOwnProperty(idNode1) && (!listJunctions.hasOwnProperty(idNode2))){
									listJunctions[idNode2]=listJunctions[idNode1];
								}
								else if (!(listJunctions.hasOwnProperty(idNode1)) && listJunctions.hasOwnProperty(idNode2)){
									listJunctions[idNode1]=listJunctions[idNode2];
								}
								else{
									listJunctions[idNode1]="junction"+cnt;
									listJunctions[idNode2]="junction"+cnt;
									cnt++
								}
							}
						}
					}
				}
				
				
				//console.log(listJunctions)
				var countMap={}
				for (elem in listJunctions){
					if (countMap.hasOwnProperty(listJunctions[elem])){
						countMap[listJunctions[elem]]+=1;
					}
					else{
						countMap[listJunctions[elem]]=1;
					}
					
				}
				var countMap2={}
				for (elem in countMap){
					countMap2[elem]=countMap[elem];
				}
				//console.log(countMap)
				cy.batch(function(){
					var edgesAdded=[]
					for (var pair in pairs) {
						if (pairs.hasOwnProperty(pair)) {
							var leftReac = pair.split("___")[0];
							var rightReac = pair.split("___")[1];
							
							if (!(leftReac.endsWith('_tx') || rightReac.endsWith('_tx'))){
								for (var met =0;met<pairs[pair].length;met++) {
									var metabolite = pairs[pair][met]
									var idNode1 = leftReac+'___'+metabolite;
									var idNode2 = rightReac+'___'+metabolite;
									
									//cy.add({group: "edges",  data: { source: idNode1, target: idNode2 ,tshape: "none",sshape: "none", col: "black", style: "solid",width : "1",curve:"0",center_curve:"0.5",side:""}})
									//flag++;
									
									var nbConnect1= 0;
									//var nbConnect2= 0;
									if (listJunctions.hasOwnProperty(idNode1) && listJunctions.hasOwnProperty(idNode2)){
										if (countMap.hasOwnProperty(listJunctions[idNode1]) && countMap.hasOwnProperty(listJunctions[idNode2])){
											nbConnect1= countMap[listJunctions[idNode1]];
											//nbConnect2= countMap[listJunctions[idNode2]]
										}
									}
									//console.log(nbConnect1)
									//console.log(nbConnect2)
									if(nbConnect1==2){
										
										cy.add({group: "edges",  data: { source: idNode1, target: idNode2 ,tshape: "none",sshape: "none", col: "black", style: "solid",width : "2",curve:"0",center_curve:"0.5",side:"", link:"single"}})
									}
									if(nbConnect1>2){
										//console.log(listJunctions[idNode1])
										if (cy.$('#'+listJunctions[idNode1]).length==0){
											//cy.add({group: "nodes",  data: { id: "parent"+listJunctions[idNode1], name: cy.$('#'+idNode1).data("name"),weight: 15, col: 'black', valign:'top', halign:'center',fontsize:'10',fontstyle:'italic', isJoint:1/*, parent :data['reactions'][reaction]['name']*/}})
											//cy.add({group: "nodes",  data: { id: listJunctions[idNode1], name: cy.$('#'+idNode1).data("name"),weight: 15, col: 'black', valign:'top', halign:'center',fontsize:'10',fontstyle:'italic', isJoint:1, parent: "parent"+listJunctions[idNode1]/*, parent :data['reactions'][reaction]['name']*/}})					
											cy.add({group: "nodes",  data: { id: listJunctions[idNode1], name: cy.$('#'+idNode1).data("name"),weight: 15, col: 'black', valign:'top', halign:'center',fontsize:'10',fontstyle:'italic', isJoint:1/*, parent :data['reactions'][reaction]['name']*/}})
											cy.$('#'+listJunctions[idNode1]).position('x',cy.$('#'+idNode1).position('x'))
											cy.$('#'+listJunctions[idNode1]).position('y',cy.$('#'+idNode1).position('y')+100)
											cy.add({group: "edges",  data: { source: idNode1, target: listJunctions[idNode1] ,tshape: "none",sshape: "none", col: "black", style: "solid",width : "2",curve:"0",center_curve:"0.5",side:"left",link:"multiple_source"}})
											cy.add({group: "edges",  data: { source: listJunctions[idNode1], target: idNode2 ,tshape: "none",sshape: "none", col: "black", style: "solid",width : "2",curve:"0",center_curve:"0.5",side:"left",link:"multiple_target"}})
											edgesAdded.push([idNode1,listJunctions[idNode1],idNode2])
											//countMap2[listJunctions[idNode1]]-=2;
										}
									}
								}
							}
						}
					}
					
					// //console.log(flag)
					
					for (var pair in pairs) {
						if (pairs.hasOwnProperty(pair)) {
							var leftReac = pair.split("___")[0];
							var rightReac = pair.split("___")[1];
							
							if (!(leftReac.endsWith('_tx') || rightReac.endsWith('_tx'))){
								for (var met =0;met<pairs[pair].length;met++) {
									var metabolite = pairs[pair][met]
									var idNode1 = leftReac+'___'+metabolite;
									var idNode2 = rightReac+'___'+metabolite;
									if (listJunctions.hasOwnProperty(idNode1) && listJunctions.hasOwnProperty(idNode2)){
										var isIn1=false;
										var isIn2=false;
										for (elem in edgesAdded){
											var n1= edgesAdded[elem][0];
											var n2= edgesAdded[elem][1];
											var n3= edgesAdded[elem][2];
											if (idNode1==n1 && n2==listJunctions[idNode1] && idNode2==n3){
											//console.log(n1+"  "+n2)
												isIn1=true;
												isIn2=true;
											}
											else if (idNode1==n1 && n2==listJunctions[idNode1] && idNode2!=n3){
											//console.log(n1+"  "+n2)
												//isIn1=true;
												if (cy.$('#'+listJunctions[idNode1]).length>0){
													cy.add({group: "edges",  data: { source: listJunctions[idNode1], target: idNode2 ,tshape: "none",sshape: "none", col: "black", style: "solid",width : "2",curve:"0",center_curve:"0.5",side:"left",link:"multiple_source"}})
												}
											}
											else if (idNode2==n3 && n2==listJunctions[idNode1] && idNode1!=n3){
											//console.log(n1+"  "+n2)
												//isIn2=true;
												if (cy.$('#'+listJunctions[idNode1]).length>0){
													cy.add({group: "edges",  data: { source: idNode1, target: listJunctions[idNode1] ,tshape: "none",sshape: "none", col: "black", style: "solid",width : "2",curve:"0",center_curve:"0.5",side:"left",link:"multiple_source"}})
												}
											}									
										}
									}													
								}
							}
						}
					}
					
					cy.$(':parent').style({'background-opacity': '0.3',});
				});
				
				
				//cy.center()
				
				
				//if (!(_.isEmpty(prefbadata))){
				//	console.log(prefbadata)
					// cy.add(prefbadata.myCanvas.elements.nodes);
					// cy.add(prefbadata.myCanvas.elements.edges);
					
					
					// cy.edges().forEach(function( edge ){
						
						// if (edge.data("curve")!=0){
							// edge.css({'curve-style': 'unbundled-bezier',
										// 'control-point-distance': edge.data('curve'),
										// 'control-point-weight': edge.data('center_curve')});
						// }
					// });
				//}
				}
				else{
					
					if(Gchanged==false){
						cy.nodes().remove();
						cy.edges().remove();
						cy.add(prefbadata.graphdata.canvas.elements.nodes);
						cy.add(prefbadata.graphdata.canvas.elements.edges);	
						cy.edges().forEach(function( edge ){		
							if (edge.data("curve")!=0){
								edge.css({'curve-style': 'unbundled-bezier',
											'control-point-distance': edge.data('curve'),
											'control-point-weight': edge.data('center_curve')});
							}
						});
					}
					else{
						var l_tokens = tokens;
						mtokens =tokens;
						
						cy.batch(function(){
							var im=0;
							var jm=0;
							var km=0;
							for (var reaction in data['reactions']) {
								if (data['reactions'].hasOwnProperty(reaction)) {
									//console.log(cy.nodes())
									//console.log(cy.$('#'+data['reactions'][reaction]['name']).id())
									if (data['reactions'][reaction]['name'].endsWith('_tx')){
										
										cy.$('#'+data['reactions'][reaction]['name']).position('x', 0+jm*400);
										cy.$('#'+data['reactions'][reaction]['name']).position('y', -300);
										
										jm+=1;
									}
									else{
										
										
										cy.$('#'+data['reactions'][reaction]['name']).position('x', 0+im*900);
										cy.$('#'+data['reactions'][reaction]['name']).position('y', 200+km*400);
										
										
										if (im==6){im=0; km+=1}
										else{im+=1;}
									}
									

									
									var metabolites = Object.keys(data['reactions'][reaction]['involvedWith'])
									//console.log(metabolites)
									var metabolitesL=[];
									var metabolitesR=[];
									for (var metabolite in data['reactions'][reaction]['involvedWith']) {
										if (data['reactions'][reaction]['involvedWith'].hasOwnProperty(metabolite)) {
											if (data['reactions'][reaction]['involvedWith'][metabolite]<0){
												if (l_tokens.indexOf(metabolite) >= 0){
													metabolitesL.push(metabolite)
												}
												else{
													metabolitesL.unshift(metabolite)
												}
												
											}
											if (data['reactions'][reaction]['involvedWith'][metabolite]>0){
												if (l_tokens.indexOf(metabolite) >= 0){
													metabolitesR.push(metabolite)
												}
												else{
													metabolitesR.unshift(metabolite)
												}
											}
										}
									}
									
									if (metabolites.length == 2){
										
										cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolites[0]).position('x', cy.$('#'+data['reactions'][reaction]['name']).position('x'));
										cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolites[0]).position('y', cy.$('#'+data['reactions'][reaction]['name']).position('y')-100);
										cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolite).data("side","left")
										cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolites[1]).position('x', cy.$('#'+data['reactions'][reaction]['name']).position('x'));
										cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolites[1]).position('y', cy.$('#'+data['reactions'][reaction]['name']).position('y')+100);
										cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolite).data("side","right")
									}
									else if (metabolites.length >2){
										var nbMetabolitesLeft = 0;
										var nbMetabolitesRight = 0;
										for (var metabolite in data['reactions'][reaction]['involvedWith']) {
											
											
											if (data['reactions'][reaction]['involvedWith'].hasOwnProperty(metabolite)) {
												if (data['reactions'][reaction]['involvedWith'][metabolite]<0){
													nbMetabolitesRight +=1;
												}
												if (data['reactions'][reaction]['involvedWith'][metabolite]>0){
													nbMetabolitesLeft +=1;
												}
											}
										}
										if (nbMetabolitesLeft==nbMetabolitesRight){
											
											for (var metabolite in data['reactions'][reaction]['involvedWith']) {
												if (data['reactions'][reaction]['involvedWith'].hasOwnProperty(metabolite)) {
													if (data['reactions'][reaction]['involvedWith'][metabolite]<0){
														var indent =0;
														if (metabolitesL.indexOf(metabolite)>0){
															indent =0
														}
														cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolite).position('x', cy.$('#'+data['reactions'][reaction]['name']).position('x')+(metabolitesL.indexOf(metabolite)*50));//+50*(cntRight/(nbMetabolitesRight)));											
														cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolite).position('y', cy.$('#'+data['reactions'][reaction]['name']).position('y')-100+indent);
														cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolite).data("side","left")
														
													}
													if (data['reactions'][reaction]['involvedWith'][metabolite]>0){
														var indent =0;
														if (metabolitesR.indexOf(metabolite)>0){
															indent =0
														}
														cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolite).position('x', cy.$('#'+data['reactions'][reaction]['name']).position('x')+(metabolitesR.indexOf(metabolite)*50));//-50*(cntLeft/(nbMetabolitesLeft)));
														cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolite).position('y', cy.$('#'+data['reactions'][reaction]['name']).position('y')+100-indent);
														cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolite).data("side","right")
														
													}
												}
											}
										}
										else{
											
											for (var metabolite in data['reactions'][reaction]['involvedWith']) {
												if (data['reactions'][reaction]['involvedWith'].hasOwnProperty(metabolite)) {
													if (data['reactions'][reaction]['involvedWith'][metabolite]<0){
														var indent =0;
														if (metabolitesL.indexOf(metabolite)>0){
															indent =0
														}
														cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolite).position('x', cy.$('#'+data['reactions'][reaction]['name']).position('x')+(metabolitesL.indexOf(metabolite))*50);
														cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolite).position('y', cy.$('#'+data['reactions'][reaction]['name']).position('y')-100+indent);
														cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolite).data("side","left")
														
													}
													if (data['reactions'][reaction]['involvedWith'][metabolite]>0){
														var indent =0;
														if (metabolitesR.indexOf(metabolite)>0){
															indent =0
														}
														cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolite).position('x', cy.$('#'+data['reactions'][reaction]['name']).position('x')+(metabolitesR.indexOf(metabolite))*50);
														cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolite).position('y', cy.$('#'+data['reactions'][reaction]['name']).position('y')+100-indent);
														cy.$('#'+data['reactions'][reaction]['name']+'___'+metabolite).data("side","right")
														
													}
												}
											}
											
										}
										
									}
									
									
									
								}
							}
						
						});
						// do multiple pass pairing of reactions involving the same compounds, to find network clusters of reactions
						var ReactionsCompounds={}
						for (var reaction in data['reactions']) {
							if (data['reactions'].hasOwnProperty(reaction)) {
								for (var metabolite in data['reactions'][reaction]['involvedWith']) {
									
									if (data['reactions'][reaction]['involvedWith'].hasOwnProperty(metabolite)) {
										if (l_tokens.indexOf(metabolite) == -1){
											if (ReactionsCompounds[data['reactions'][reaction]['name']]){
											
												ReactionsCompounds[data['reactions'][reaction]['name']].push(metabolite)
											}
											else{
												ReactionsCompounds[data['reactions'][reaction]['name']]=[];
												ReactionsCompounds[data['reactions'][reaction]['name']].push(metabolite)
											}
										}
									}
								}
							}
						}
						//console.log(ReactionsCompounds)
						var pairs={}
						for (var reaction in ReactionsCompounds) {
							if (ReactionsCompounds.hasOwnProperty(reaction)) {
								for (var reaction2 in ReactionsCompounds) {
									if (ReactionsCompounds.hasOwnProperty(reaction2)) {
										if (reaction!=reaction2){
											if(pairs[reaction+'___'+reaction2]){
												pairs[reaction+'___'+reaction2].concat(_.intersection(ReactionsCompounds[reaction], ReactionsCompounds[reaction2]));
											}
											else{
												if(pairs[reaction2+'___'+reaction]){
													pairs[reaction2+'___'+reaction].concat(_.intersection(ReactionsCompounds[reaction], ReactionsCompounds[reaction2]));
												}
												else{
													pairs[reaction+'___'+reaction2]=_.intersection(ReactionsCompounds[reaction], ReactionsCompounds[reaction2]);
												}
											}
											
											
										}
									}
								}
							}
						}
						for (var pair in pairs) {
							if (pairs.hasOwnProperty(pair)) {
							 if (pairs[pair].length==0){
								//console.log(pair)
								delete pairs[pair]
							 }
							}
						}
						var tupples ={}
						for (var pair in pairs) {
							if (pairs.hasOwnProperty(pair)) {
								var leftReac = pair.split("___")[0];
								var rightReac = pair.split("___")[1];
								if (tupples[leftReac] && !(rightReac.endsWith('_tx'))){/////////////////////////
									tupples[leftReac]=_.uniq(tupples[leftReac].concat(leftReac,rightReac));
								}
								else{
									if (!(rightReac.endsWith('_tx'))){
										tupples[leftReac]=[leftReac,rightReac];
									}
								}
							}
						}
						for (var item in tupples) {
							if (tupples.hasOwnProperty(item)) {
								for (var item2 in tupples) {
									if (tupples.hasOwnProperty(item2)) {
										if (item!=item2){
											var intersect = _.intersection(tupples[item2],tupples[item])
											if (tupples[item2].indexOf(item)>0){
												tupples[item]=_.uniq(tupples[item2].concat(tupples[item]));
												delete tupples[item2]
											}	
											else if ( intersect.length>0){
												tupples[item]=_.uniq(tupples[item].concat(tupples[item2]));
												delete tupples[item2]
											}
										}
									}
								}
							}
						}
						
						//console.log(tupples)
						cy.batch(function(){
							var cnt=0;
							for (var tup in tupples) {
								if (tupples.hasOwnProperty(tup)) {
									//cy.add({group: "nodes",  data: { id: 'parent_'+tup, name: 'parent_'+tup,weight: 1, col: 'red', valign:'top', halign:'center',fontsize:'10',fontstyle:'italic'/*, parent :data['reactions'][reaction]['name']*/}});
									for (var t =0;t<tupples[tup].length;t++){
										var pathGroup = cy.elements().breadthFirstSearch('#'+tupples[tup][t]);
										var centerx = cy.$('#'+tupples[tup][t]).position('x');
										var centery = cy.$('#'+tupples[tup][t]).position('y');
										pathGroup.path.forEach(function( ele ){
												if (ele.isNode()){
													//if (ele.data('name')=='RXN-7909'){console.log('RXN-7909')}
													//if (ele.data('name')=='ADDALT-RXN'){console.log('ADDALT-RXN')}
													//if (ele.data('name')=='CH4_tx'){console.log('CH4_tx')}
													
													ele.position('x',ele.position('x')-centerx+t* 340 );
													ele.position('y',ele.position('y')-centery+cnt*400);							
												}
										});
										//cy.$('#'+tupples[tup][t]).data('parent','parent_'+tup);
										
									}
									cnt+=1;
								}
							}	
						});
						////////////////////////////////////////////////////////////////////////////
						// start linking reactions
						var reactionProximity={}
						for (var pair in pairs) {
							if (pairs.hasOwnProperty(pair)) {
								reactionProximity[pair.split("___")[0]]=0;
							}
						}
						var listJunctions={};
						var cnt=0;
						
						
						
						for (var pair in pairs) {
							if (pairs.hasOwnProperty(pair)) {
								var leftReac = pair.split("___")[0];
								var rightReac = pair.split("___")[1];
								
								if (!(leftReac.endsWith('_tx') || rightReac.endsWith('_tx'))){
									for (var met =0;met<pairs[pair].length;met++) {
										var metabolite = pairs[pair][met]
										var idNode1 = leftReac+'___'+metabolite;
										var idNode2 = rightReac+'___'+metabolite;
										if (listJunctions.hasOwnProperty(idNode1) && listJunctions.hasOwnProperty(idNode2)){
											
										}
										else if (listJunctions.hasOwnProperty(idNode1) && (!listJunctions.hasOwnProperty(idNode2))){
											listJunctions[idNode2]=listJunctions[idNode1];
										}
										else if (!(listJunctions.hasOwnProperty(idNode1)) && listJunctions.hasOwnProperty(idNode2)){
											listJunctions[idNode1]=listJunctions[idNode2];
										}
										else{
											listJunctions[idNode1]="junction"+cnt;
											listJunctions[idNode2]="junction"+cnt;
											cnt++
										}
									}
								}
							}
						}
						
						
						//console.log(listJunctions)
						var countMap={}
						for (elem in listJunctions){
							if (countMap.hasOwnProperty(listJunctions[elem])){
								countMap[listJunctions[elem]]+=1;
							}
							else{
								countMap[listJunctions[elem]]=1;
							}
							
						}
						var countMap2={}
						for (elem in countMap){
							countMap2[elem]=countMap[elem];
						}
						//console.log(countMap)
						cy.batch(function(){
							var edgesAdded=[]
							for (var pair in pairs) {
								if (pairs.hasOwnProperty(pair)) {
									var leftReac = pair.split("___")[0];
									var rightReac = pair.split("___")[1];
									
									if (!(leftReac.endsWith('_tx') || rightReac.endsWith('_tx'))){
										for (var met =0;met<pairs[pair].length;met++) {
											var metabolite = pairs[pair][met]
											var idNode1 = leftReac+'___'+metabolite;
											var idNode2 = rightReac+'___'+metabolite;
											
											//cy.add({group: "edges",  data: { source: idNode1, target: idNode2 ,tshape: "none",sshape: "none", col: "black", style: "solid",width : "1",curve:"0",center_curve:"0.5",side:""}})
											//flag++;
											
											var nbConnect1= 0;
											//var nbConnect2= 0;
											if (listJunctions.hasOwnProperty(idNode1) && listJunctions.hasOwnProperty(idNode2)){
												if (countMap.hasOwnProperty(listJunctions[idNode1]) && countMap.hasOwnProperty(listJunctions[idNode2])){
													nbConnect1= countMap[listJunctions[idNode1]];
													//nbConnect2= countMap[listJunctions[idNode2]]
												}
											}
											//console.log(nbConnect1)
											//console.log(nbConnect2)
											if(nbConnect1==2){
												
												cy.add({group: "edges",  data: { source: idNode1, target: idNode2 ,tshape: "none",sshape: "none", col: "black", style: "solid",width : "2",curve:"0",center_curve:"0.5",side:"", link:"single"}})
											}
											if(nbConnect1>2){
												//console.log(listJunctions[idNode1])
												if (cy.$('#'+listJunctions[idNode1]).length==0){
													//cy.add({group: "nodes",  data: { id: "parent"+listJunctions[idNode1], name: cy.$('#'+idNode1).data("name"),weight: 15, col: 'black', valign:'top', halign:'center',fontsize:'10',fontstyle:'italic', isJoint:1/*, parent :data['reactions'][reaction]['name']*/}})
													//cy.add({group: "nodes",  data: { id: listJunctions[idNode1], name: cy.$('#'+idNode1).data("name"),weight: 15, col: 'black', valign:'top', halign:'center',fontsize:'10',fontstyle:'italic', isJoint:1, parent: "parent"+listJunctions[idNode1]/*, parent :data['reactions'][reaction]['name']*/}})					
													cy.add({group: "nodes",  data: { id: listJunctions[idNode1], name: cy.$('#'+idNode1).data("name"),weight: 15, col: 'black', valign:'top', halign:'center',fontsize:'10',fontstyle:'italic', isJoint:1/*, parent :data['reactions'][reaction]['name']*/}})
													cy.$('#'+listJunctions[idNode1]).position('x',cy.$('#'+idNode1).position('x'))
													cy.$('#'+listJunctions[idNode1]).position('y',cy.$('#'+idNode1).position('y')+100)
													cy.add({group: "edges",  data: { source: idNode1, target: listJunctions[idNode1] ,tshape: "none",sshape: "none", col: "black", style: "solid",width : "2",curve:"0",center_curve:"0.5",side:"left",link:"multiple_source"}})
													cy.add({group: "edges",  data: { source: listJunctions[idNode1], target: idNode2 ,tshape: "none",sshape: "none", col: "black", style: "solid",width : "2",curve:"0",center_curve:"0.5",side:"left",link:"multiple_target"}})
													edgesAdded.push([idNode1,listJunctions[idNode1],idNode2])
													//countMap2[listJunctions[idNode1]]-=2;
												}
											}
										}
									}
								}
							}
							
							// //console.log(flag)
							
							for (var pair in pairs) {
								if (pairs.hasOwnProperty(pair)) {
									var leftReac = pair.split("___")[0];
									var rightReac = pair.split("___")[1];
									
									if (!(leftReac.endsWith('_tx') || rightReac.endsWith('_tx'))){
										for (var met =0;met<pairs[pair].length;met++) {
											var metabolite = pairs[pair][met]
											var idNode1 = leftReac+'___'+metabolite;
											var idNode2 = rightReac+'___'+metabolite;
											if (listJunctions.hasOwnProperty(idNode1) && listJunctions.hasOwnProperty(idNode2)){
												var isIn1=false;
												var isIn2=false;
												for (elem in edgesAdded){
													var n1= edgesAdded[elem][0];
													var n2= edgesAdded[elem][1];
													var n3= edgesAdded[elem][2];
													if (idNode1==n1 && n2==listJunctions[idNode1] && idNode2==n3){
													//console.log(n1+"  "+n2)
														isIn1=true;
														isIn2=true;
													}
													else if (idNode1==n1 && n2==listJunctions[idNode1] && idNode2!=n3){
													//console.log(n1+"  "+n2)
														//isIn1=true;
														if (cy.$('#'+listJunctions[idNode1]).length>0){
															cy.add({group: "edges",  data: { source: listJunctions[idNode1], target: idNode2 ,tshape: "none",sshape: "none", col: "black", style: "solid",width : "2",curve:"0",center_curve:"0.5",side:"left",link:"multiple_source"}})
														}
													}
													else if (idNode2==n3 && n2==listJunctions[idNode1] && idNode1!=n3){
													//console.log(n1+"  "+n2)
														//isIn2=true;
														if (cy.$('#'+listJunctions[idNode1]).length>0){
															cy.add({group: "edges",  data: { source: idNode1, target: listJunctions[idNode1] ,tshape: "none",sshape: "none", col: "black", style: "solid",width : "2",curve:"0",center_curve:"0.5",side:"left",link:"multiple_source"}})
														}
													}									
												}
											}													
										}
									}
								}
							}
							
							cy.$(':parent').style({'background-opacity': '0.3',});
							if(historyUndo[nextStateJson]){
								for (nodd in historyUndo[nextStateJson].elements.nodes){
									cy.$('#'+historyUndo[nextStateJson].elements.nodes[nodd]['data']['id']).position('x',historyUndo[nextStateJson].elements.nodes[nodd]['position']['x'])
									cy.$('#'+historyUndo[nextStateJson].elements.nodes[nodd]['data']['id']).position('y',historyUndo[nextStateJson].elements.nodes[nodd]['position']['y'])
								}
							}
						});
						
						
					}
					
					
					
					
				}
				cy.boxSelectionEnabled(true)
				cy.fit()
			
				nextStateJson=0;
				var saved = cy.json();
				historyUndo.push(saved);
				var tmpcoord ={}
				cy.nodes().forEach(function( node ){
					tmpcoord[node.id()]={};
					tmpcoord[node.id()].x=node.position('x')
					tmpcoord[node.id()].y=node.position('y')
				})
				historyPositions.push(tmpcoord);
				
				startLayoutElements=saved;
				startLayoutPositions=tmpcoord;
				updateGraphData();
				
				
				
					
				
				
				
				
				},
			});
		}
		
			//if (_.isEmpty(prefbadata)){
				try{
				updateGraphData();
				}
				catch(err){
					
				}
			//}
		
	}
	
	
	$('#cy').cytoscapeCxtmenu({
		commands: [
			{
				content: '<span class="fa fa-rotate-right fa-2x"></span>',
				select: function(){
					var cyg = $("#cy").cytoscape("get");
					var selected= cyg.$(':selected').nodes();
					if (selected.length>0){
						var tmpcoord ={}
						//console.log('add to stack')
						cyg.nodes().forEach(function( node ){
							tmpcoord[node.id()]={};
							tmpcoord[node.id()].x=node.position('x')
							tmpcoord[node.id()].y=node.position('y')
						})
						if (historyUndo.length<5){
							historyPositions.push(tmpcoord);
							historyUndo.push(cy.json());
							nextStateJson=historyUndo.length-1;
						}
						else{
							historyPositions.splice(0, 1);
							historyPositions.push(tmpcoord);
							historyUndo.splice(0, 1);
							historyUndo.push(cy.json());
							nextStateJson=historyUndo.length-1;
						}
						var xCenter = cy.$('#'+this.id()).position().x
						var yCenter = cy.$('#'+this.id()).position().y
						selected.forEach(function( ele ){
							
								var xRot = xCenter + Math.cos( Math.PI/2.0) * (ele.position('x') - xCenter) - Math.sin(Math.PI/2.0) * (ele.position('y') - yCenter);
								var yRot = yCenter + Math.sin(Math.PI/2.0) * (ele.position('x') - xCenter) + Math.cos(Math.PI/2.0) * (ele.position('y') - yCenter);
								ele.position('x',xRot);
								ele.position('y',yRot);
								
							
						});
						
						
					}
					else{
						var pathGroup = cy.elements().breadthFirstSearch('#'+this.id());
						var xCenter = cy.$('#'+this.id()).position().x
						var yCenter = cy.$('#'+this.id()).position().y
						pathGroup.path.forEach(function( ele ){
							if (ele.isNode()){
								var xRot = xCenter + Math.cos( Math.PI/2.0) * (ele.position('x') - xCenter) - Math.sin(Math.PI/2.0) * (ele.position('y') - yCenter);
								var yRot = yCenter + Math.sin(Math.PI/2.0) * (ele.position('x') - xCenter) + Math.cos(Math.PI/2.0) * (ele.position('y') - yCenter);
								ele.position('x',xRot);
								ele.position('y',yRot);
							}
						});
					}
				}
			},

			{
				content: '<span class="fa fa-arrows fa-2x"></span>',
				select: function(){
					var name = prompt("Please enter new scale for selected group (e.g. 0.5 for half size or 2.0 for double size)","");
					if (name != null && !(isNaN(parseFloat(name)))) {
						var scale= parseFloat(name);
						//console.log('number')
						var cyg = $("#cy").cytoscape("get");
						var selected= cyg.$(':selected').nodes();
						if (selected.length>0){
							var tmpcoord ={}
							//console.log('add to stack')
							cyg.nodes().forEach(function( node ){
								tmpcoord[node.id()]={};
								tmpcoord[node.id()].x=node.position('x')
								tmpcoord[node.id()].y=node.position('y')
							})
							if (historyUndo.length<5){
								historyPositions.push(tmpcoord);
								historyUndo.push(cy.json());
								nextStateJson=historyUndo.length-1;
							}
							else{
								historyPositions.splice(0, 1);
								historyPositions.push(tmpcoord);
								historyUndo.splice(0, 1);
								historyUndo.push(cy.json());
								nextStateJson=historyUndo.length-1;
							}
							var xCenter = cy.$('#'+this.id()).position().x
							var yCenter = cy.$('#'+this.id()).position().y
							selected.forEach(function( ele ){
									var xTrans = (ele.position('x') - xCenter)
									var yTrans = (ele.position('y') - yCenter)
									var xTransScaled = (ele.position('x') - xCenter)*scale;
									var yTransScaled = (ele.position('y') - yCenter)*scale;
									
									ele.position('x',ele.position('x')-xTrans+xTransScaled);
									ele.position('y',ele.position('y')-yTrans+yTransScaled);
									
								
							});
							
							
						}
						else{
							var pathGroup = cy.elements().breadthFirstSearch('#'+this.id());
							var xCenter = cy.$('#'+this.id()).position().x
							var yCenter = cy.$('#'+this.id()).position().y
							pathGroup.path.forEach(function( ele ){
								if (ele.isNode()){
									var xTrans = (ele.position('x') - xCenter)
									var yTrans = (ele.position('y') - yCenter)
									var xTransScaled = (ele.position('x') - xCenter)*scale;
									var yTransScaled = (ele.position('y') - yCenter)*scale;
									
									ele.position('x',ele.position('x')-xTrans+xTransScaled);
									ele.position('y',ele.position('y')-yTrans+yTransScaled);
								}
							});
						}
					}
					 
				}
			},
			{
				content: 'Rename',
				select: function(){
					var name = prompt("Please enter new name for node:", this.data('name'));
					if (name != null) {
						this.data('name',name)
					}
					 
				}
			},

			{
				content: 'Label On/Off',
				select: function(){
					var cyg = $("#cy").cytoscape("get");
					if (cy.$('#'+this.id())._private.ids[this.id()]._private.style['text-opacity'].value==0){
						cy.$('#'+this.id()).css({'text-opacity': '1'});
					}
					else{
						cy.$('#'+this.id()).css({'text-opacity': '0'});
					}
				}
			},
			{
				content: 'Add Parent',
				select: function(){
					var cyg = $("#cy").cytoscape("get");
					if (cy.$('#'+this.id()).isParent()){
						var name = prompt("Please enter new name for node:", "parent");
						if (name != null) {
							//console.log("name parent: "+name)
							var node = cy.$('#'+this.id())
							//get all descendants of compound node that is dragged
							var superParent;
							var createSuper =true;
							if (node.parent().length>0 || node.children().filter('$node > node').length==1){
								//console.log(cy.$('#'+target).parent()[0].data())
								//superParent=node.parent()[0].data();
								createSuper =false;
							}
							else{
							
								//var superParentNewName="sp";
								//if (cy.$('#'+name).length>0){
									var scnt=1;
									while(cy.$('#sp'+scnt).length>0){
										scnt++;
									}
									//window.alert("There is already a parent node named "+name+". Node renamed: "+name+scnt);
									superParent={ id: "sp"+scnt, name: name,weight: 5, col: 'red', valign:'top', halign:'center',fontsize:'10',fontstyle:'italic', isJoint:1/*, parent :data['reactions'][reaction]['name']*/}
								//}
								//else{
								//	superParent={ id: name, name: name,weight: 5, col: 'red', valign:'top', halign:'center',fontsize:'10',fontstyle:'italic', isJoint:1/*, parent :data['reactions'][reaction]['name']*/}
								//}
								
							}
										
							if (createSuper){			
							var parent1=[];
							parent1.push({});
							for (elem in node.data()){
								if (elem=="id"){
									parent1[0][elem]=node.data()[elem]
								}
								else{
									parent1[0][elem]=node.data()[elem]
								}
							}
							parent1[0]["parent"]=superParent["id"];
							parent1.push(node.position('x'));
							parent1.push(node.position('y'));
							
							
									
							var des = node.descendants();
							//console.log(des)
							var clone_nodes={};
							des.forEach(function( ele ){
								clone_nodes[ele.id()]=[{},ele.position('x'),ele.position('y')]
								for (elem in ele.data()){
									if((elem=="parent") && (ele.data()[elem]==node.id())){
										clone_nodes[ele.id()][0][elem]=parent1[0]["id"]
									}
									else{
										clone_nodes[ele.id()][0][elem]=ele.data()[elem];
									}
								}
								
							});
							
							var clone_edges={};
							des.connectedEdges().forEach(function( ele ){
								clone_edges[ele.id()]={}
								for (elem in ele.data()){
									clone_edges[ele.id()][elem]=ele.data()[elem];
								}
								
							});
							
							
							des.remove()
							node.remove()
							
							
							cy.add({group: "nodes",  data: superParent})
							cy.$('#'+superParent["id"]).position('x',parent1[1]);
							cy.$('#'+superParent["id"]).position('y',parent1[2]);
							cy.$('#'+superParent["id"]).style({'background-opacity': '0.3',});
							
							cy.add({group: "nodes",  data: parent1[0]})
							cy.$('#'+parent1[0]["id"]).position('x',parent1[1]);
							cy.$('#'+parent1[0]["id"]).position('y',parent1[2]);
							cy.$('#'+parent1[0]["id"]).style({'background-opacity': '0.3',});
							
							for (elem in clone_nodes){
								cy.add({group: "nodes",  data: clone_nodes[elem][0]})
								cy.$('#'+clone_nodes[elem][0]["id"]).position('x',clone_nodes[elem][1]);
								cy.$('#'+clone_nodes[elem][0]["id"]).position('y',clone_nodes[elem][2]);
							}
							for (elem in clone_edges){
								cy.add({group: "edges",  data: clone_edges[elem]})
							}
							}
						}
					}
					else{
						window.alert("You can only create a parent node on a rectangular node representing a reaction or a group of reactions.");
					}
					
				}
			},
			{
					content: '<span class="fa fa-eraser fa-2x"></span>',
					select: function(){
						var cyg = $("#cy").cytoscape("get");
						
						
						var selected= cyg.$(':selected').nodes();
						if (selected.length>1){								
								var r = confirm("Are you sure you want to delete the selected nodes and associated edges ?");
								if (r == true) {
									var tmpcoord ={}
								//console.log('add to stack')
								cyg.nodes().forEach(function( node ){
									tmpcoord[node.id()]={};
									tmpcoord[node.id()].x=node.position('x')
									tmpcoord[node.id()].y=node.position('y')
								})
								if (historyUndo.length<5){
									historyPositions.push(tmpcoord);
									historyUndo.push(cy.json());
									nextStateJson=historyUndo.length-1;
								}
								else{
									historyPositions.splice(0, 1);
									historyPositions.push(tmpcoord);
									historyUndo.splice(0, 1);
									historyUndo.push(cy.json());
									nextStateJson=historyUndo.length-1;
								}
									selected.forEach(function( ele ){
										cyg.$('#'+ele.id()).remove()
									});
									
								}
								
						}
						else{
							var r = confirm("Are you sure you want to delete the selected node and associated edges ?");
							if (r == true) {
								var tmpcoord ={}
								//console.log('add to stack')
								cyg.nodes().forEach(function( node ){
									tmpcoord[node.id()]={};
									tmpcoord[node.id()].x=node.position('x')
									tmpcoord[node.id()].y=node.position('y')
								})
								if (historyUndo.length<5){
									historyPositions.push(tmpcoord);
									historyUndo.push(cy.json());
									nextStateJson=historyUndo.length-1;
								}
								else{
									historyPositions.splice(0, 1);
									historyPositions.push(tmpcoord);
									historyUndo.splice(0, 1);
									historyUndo.push(cy.json());
									nextStateJson=historyUndo.length-1;
								}
								cyg.$('#'+this.id()).remove();
								
							}
						}								
					}
				}
		]
	});
	
	
	function showVal(newVal){
			var cy = $("#cy").cytoscape("get");
			var sign=1;
			for (var i=0;i<listEdges.length;i++){
				if (listEdges[i].data.id==edgeSelected){
					listEdges[i].data['curve']=parseFloat(newVal)
					
					if (listEdges[i].data['side']=='right'){
						sign=-1;
					}
				}
			}
			
			if (newVal!=0){
				cy.$('#'+edgeSelected).data('curve',parseFloat(newVal));
				cy.$('#'+edgeSelected).css({'curve-style': 'unbundled-bezier',
							'control-point-distance': newVal*sign,
							'control-point-weight': cy.$('#'+edgeSelected).data('center_curve')});
				}
				
				
			else{
			cy.$('#'+edgeSelected).css({'curve-style': 'bezier'});
			cy.$('#'+edgeSelected).data('curve',parseFloat(newVal));
			}
			
		}

		function showVal2(newVal){
		//console.log(newVal/100)
		  var curve =0;
		  for (var i=0;i<listEdges.length;i++){
			if (listEdges[i].data.id==edgeSelected){
				curve=listEdges[i].data['curve']
				if (curve !=0){
					listEdges[i].data['center_curve']=newVal/100
				}
			}
		  }
		  var cy = $("#cy").cytoscape("get");
		  if (newVal!=0 && curve !=0){
			cy.$('#'+edgeSelected).css({'curve-style': 'unbundled-bezier',
						'control-point-distance': cy.$('#'+edgeSelected).data('curve'),
						'control-point-weight': newVal/100,});
			cy.$('#'+edgeSelected).data('center_curve',parseFloat((newVal/100)));
		  }
		  else{
			document.getElementById("slide2").value = 50;
		  }
		  
		//	cy.$('#'+edgeSelected).css({'curve-style': 'bezier'});
		  //}
		}

		function createMiddleNode(){
			var cy = $("#cy").cytoscape("get");
			var selected= cy.$(':selected').edges();
			if (selected.length==1){
				var initial_edge= selected[0];
				var initial_edge_side = initial_edge.data('side');
				var initial_edge_color = initial_edge.data('col');
				var initial_edge_sshape = initial_edge.data('sshape');
				var initial_edge_tshape = initial_edge.data('tshape');
				var initial_edge_source = initial_edge.data('source');
				var initial_edge_target = initial_edge.data('target');
				var initial_edge_style = initial_edge.data('style');
				var initial_edge_width = initial_edge.data('width');
				if ((cy.$('#'+initial_edge_source).isChild() && cy.$('#'+initial_edge_target).isChild()) && (cy.$('#'+initial_edge_source).parent().id()==cy.$('#'+initial_edge_target).parent().id())){
					//console.log("condition")
					cy.add({group: "nodes",  data: { id: initial_edge_source+'___'+initial_edge_target, name: "",weight: initial_edge.data('width'), col: 'red', valign:'top', halign:'center',fontsize:'10',fontstyle:'italic', isJoint:initial_edge.data('width'), parent: cy.$('#'+initial_edge_source).parent().id()/*, parent :data['reactions'][reaction]['name']*/}})
				}
				else{
					cy.add({group: "nodes",  data: { id: initial_edge_source+'___'+initial_edge_target, name: "",weight: initial_edge.data('width'), col: 'red', valign:'top', halign:'center',fontsize:'10',fontstyle:'italic', isJoint:initial_edge.data('width')/*, parent :data['reactions'][reaction]['name']*/}})
				}	
				cy.$('#'+initial_edge_source+'___'+initial_edge_target).position('x',(cy.$('#'+initial_edge_source).position('x')+cy.$('#'+initial_edge_target).position('x'))/2.0)
				cy.$('#'+initial_edge_source+'___'+initial_edge_target).position('y',(cy.$('#'+initial_edge_source).position('y')+cy.$('#'+initial_edge_target).position('y'))/2.0)
				// add 2 edges 
				cy.add({group: "edges",  data: { source: initial_edge_source, target: initial_edge_source+'___'+initial_edge_target ,tshape:'none' ,sshape: initial_edge_sshape, col: initial_edge_color, style: initial_edge_style, width: initial_edge_width, curve:'0',center_curve:'0.5',side:initial_edge_side}})
				cy.add({group: "edges",  data: { source: initial_edge_source+'___'+initial_edge_target, target: initial_edge_target ,tshape: initial_edge_tshape,sshape:'none' , col: initial_edge_color, style: initial_edge_style, width: initial_edge_width, curve:'0',center_curve:'0.5',side:initial_edge_side}})
				cy.remove(initial_edge)
				
				
			}
		}
		function mpreviewG(){
			var cy = $("#cy").cytoscape("get");
			cy.batch(function(){
				cy.elements().nodes().forEach(function( ele ){
					if (ele.data('isJoint')!=0){
						ele.data('weight',ele.data('isJoint')-5);
					}
				});
			});
		}
		function meditG(){
			var cy = $("#cy").cytoscape("get");
			cy.batch(function(){
				cy.elements().nodes().forEach(function( ele ){
					if (ele.data('isJoint')!=0){
						ele.data('weight',ele.data('isJoint')+5);
					}
				});
			});
		}
		function exportViewPng(){
			var cy = $("#cy").cytoscape("get");
			var png64 = cy.png({'bg':'white','scale':2});
			// put the png data in an img tag
			$('#pngim').attr('src', png64);
		}
		function exportFullPng(){
			var cy = $("#cy").cytoscape("get");
			var png64 = cy.png({'bg':'white','maxWidth':'10000px','maxHeight':'10000px','full':'true'});
			// put the png data in an img tag
			$('#pngim').attr('src', png64);
		}

		
		function undo(){
			var cy = $("#cy").cytoscape("get");
			cy.remove(cy.elements());
			cy.add( historyUndo[nextStateJson].elements )
			cy.nodes().forEach(function( node ){
				node.position('x',historyPositions[nextStateJson][node.id()].x)
				node.position('y',historyPositions[nextStateJson][node.id()].y)
			})
			if(nextStateJson>0){
				nextStateJson-=1;
			}
			
		}
		function changeColor(){
				var cy = $("#cy").cytoscape("get");
				var colorValue= document.getElementById("lcolor").value;
				cy.$(':selected').edges().forEach(function( edge ){
					edge.data('col',colorValue);
				});
				cy.$(':selected').nodes().forEach(function( node ){
				//console.log(node.data('weight'))
					if (node.data('weight')!=8){
						node.data('col',colorValue);
					}
				});
				
		}

		function changeVisibilityToken(hidevalue){
			var cy = $("#cy").cytoscape("get");
			//console.log(mtokens)
				//console.log(node.id())
			if (hidevalue){
				var nodes = cy.filter('node'); // a cached copy of nodes
				if (mtokens.length>0){
				var filterString = '';
				for (elem in mtokens){
				if (elem!=mtokens.length-1){
					filterString+='[name = "'+mtokens[elem]+'"], '
				}
				else{
					filterString+='[name = "'+mtokens[elem]+'"]'
				}
				}
				nodes.filter(filterString).hide();
				}
			}
			else{
				var nodes = cy.filter('node'); // a cached copy of nodes
				if (mtokens.length>0){
				var filterString = '';
				for (elem in mtokens){
				if (elem!=mtokens.length-1){
					filterString+='[name = "'+mtokens[elem]+'"], '
				}
				else{
					filterString+='[name = "'+mtokens[elem]+'"]'
				}
				}
				nodes.filter(filterString).show();
				}
			}
			
		}

		function changeVisibilityBoxes(hidevalue){
			var cy = $("#cy").cytoscape("get");
			cy.batch(function(){
				if (hidevalue){
					cy.$(':parent').style({'background-opacity': '0',}).css({'text-opacity': '0'});
				}
				else{
					cy.$(':parent').style({'background-opacity': '0.3',}).css({'text-opacity': '1'});
				}
			});
		}
		
		function showFlux(hidevalue){
			var cy = $("#cy").cytoscape("get");
			cy.batch(function(){
				if (hidevalue){
					//console.log("fluxes")
					//console.log(cy.edges("[flux]").length)
					
					cy.edges("[flux]").forEach(function( edge ){
						var flux_initial = edge.data("flux");
						//console.log(flux_initial)
						var flux_final=1.0;
						var color ='red';
						if (flux_initial==0){
							flux_final = 1.0;
						}
						else if(flux_initial>0){
							flux_final = 1+(1.5*Math.log(1+Math.abs(flux_initial)));
							color ='red';
						}
						else if(flux_initial<0){
							flux_final = 1+(1.5*Math.log(1+Math.abs(flux_initial)));
							color ='blue';
						}
						//console.log(flux_final)
						edge.style({'width': flux_final, 'line-color': color,'target-arrow-color': color,'source-arrow-color': color});
						if (edge.source().data("isReaction") && edge.source().data("isJoint")>0){
							edge.source().style({'width': flux_final,'height': flux_final, 'background-color':color});
						}
						if (edge.target().data("isReaction") && edge.target().data("isJoint")>0){
							edge.target().style({'width': flux_final,'height': flux_final, 'background-color':color});
						}
						//edge.target()
					});
					//cy.$(':parent').style({'background-opacity': '0',}).css({'text-opacity': '0'});
				}
				else{
					//console.log("no fluxes")
					cy.edges("[flux]").forEach(function( edge ){
						edge.style({'width': 1.0,'line-color': 'red','target-arrow-color': 'red','source-arrow-color': 'red'});
						if (edge.source().data("isReaction") && edge.source().data("isReaction")==true){
							edge.source().style({'width': edge.source().data("isJoint"),'height': edge.source().data("isJoint"),'background-color': 'red'});
						}
						if (edge.target().data("isReaction") && edge.target().data("isReaction")==true){
							edge.target().style({'width': edge.target().data("isJoint"),'height': edge.target().data("isJoint"),'background-color': 'red'});
						}
					});
					//cy.$(':parent').style({'background-opacity': '0.3',}).css({'text-opacity': '1'});
				}
			});
		}

		function changeLinkCompounds(linkedvalue){
			var cy = $("#cy").cytoscape("get");
			var fluxActivated = document.getElementById("showF").checked;
			if (linkedvalue){
				cy.batch(function(){
					//console.log(fluxActivated)
					//console.log(cy.elements('node#j, edge[source = "j"]'));
					//cnt=0;
					//console.log(cy.elements('edge[link = "single"]'));
					//cy.$('edge[link = "single"]').forEach(function( edge ){
					if (fluxActivated){
						var edges = cy.filter('edge[link = "single"]');
						edges.forEach(function( edge ){
							edge.source().connectedEdges().forEach(function( ed ){
								 
								 if ((ed.data("source")==edge.data("source")) && (ed.data("target")!=edge.data("target"))) {
									//console.log(edge.data())
									//console.log(ed.data())
									
									var flux_initial = edge.source().data("flux");
									var flux_final=1.0;
									var color ='red';
									if (flux_initial==0){
										flux_final = 1.0;
									}
									else if(flux_initial>0){
										flux_final = 1+(1.5*Math.log(1+Math.abs(flux_initial)));
										color ='red';
									}
									else if(flux_initial<0){
										flux_final = 1+(1.5*Math.log(1+Math.abs(flux_initial)));
										color ='blue';
									}
									cy.$('#'+ed.data("source")).data({"weight":ed.data("width"),"col":color});
									edge.data({"sshape": ed.data("tshape"),"tshape": ed.data("sshape"),"col": color,"style":ed.data("style"),"width":flux_final,"side":ed.data("side")});
								 }
								 else if ((ed.data("target")==edge.data("source"))&& (ed.data("source")!=edge.data("target"))){
									//console.log(ed.data("target"))
									//console.log(edge.source().data())
									var flux_initial = edge.source().data("flux");
									var flux_final=1.0;
									var color ='red';
									if (flux_initial==0){
										flux_final = 1.0;
									}
									else if(flux_initial>0){
										flux_final = 1+(1.5*Math.log(1+Math.abs(flux_initial)));
										color ='red';
									}
									else if(flux_initial<0){
										flux_final = 1+(1.5*Math.log(1+Math.abs(flux_initial)));
										color ='blue';
									}
									cy.$('#'+edge.data("source")).data({"weight":ed.data("width"),"col":color});
									edge.data({"sshape": ed.data("sshape"),"tshape": ed.data("tshape"),"col": color,"style":ed.data("style"),"width":flux_final,"side":ed.data("side")});
								 }
							});
							
						});
						var edges = cy.filter('edge[link = "multiple_source"], [link = "multiple_target"]');
						edges.forEach(function( edge ){
							var dt = edge.data();
							if (dt["target"].startsWith("junction")){
								cy.$('#'+dt["target"]).data({"weight":8});
								var listE = cy.$('#'+dt["source"]).connectedEdges();
								listE.forEach(function( ed ){
									if (((ed.data("source")==dt["source"]) && (ed.data("target")!=dt["target"]))) {
										
										//console.log(edge.source().data())
										//console.log(edge.target().data())
										//console.log(ed.data())
										var flux_initial = edge.source().data("flux");
										var flux_final=1.0;
										var color ='red';
										if (flux_initial==0){
											flux_final = 1.0;
										}
										else if(flux_initial>0){
											flux_final = 1+(1.5*Math.log(1+Math.abs(flux_initial)));
											color ='red';
										}
										else if(flux_initial<0){
											flux_final = 1+(1.5*Math.log(1+Math.abs(flux_initial)));
											color ='blue';
										}
										edge.data({"sshape": ed.data("tshape"),"tshape": ed.data("sshape"),"col": color,"style":ed.data("style"),"width":flux_final,"side":ed.data("side")});
										cy.$('#'+dt["source"]).data({"weight":ed.data("width"),"col":color});
									}
									else if (((ed.data("target")==dt["source"])&& (ed.data("source")!=dt["target"]))) {
										var flux_initial = edge.source().data("flux");
										var flux_final=1.0;
										var color ='red';
										if (flux_initial==0){
											flux_final = 1.0;
										}
										else if(flux_initial>0){
											flux_final = 1+(1.5*Math.log(1+Math.abs(flux_initial)));
											color ='red';
										}
										else if(flux_initial<0){
											flux_final = 1+(1.5*Math.log(1+Math.abs(flux_initial)));
											color ='blue';
										}
										edge.data({"sshape": ed.data("sshape"),"tshape": ed.data("tshape"),"col": color,"style":ed.data("style"),"width":flux_final,"side":ed.data("side")});
										cy.$('#'+dt["source"]).data({"weight":ed.data("width"),"col":color});
									}
								});
								//console.log(dt)
							}
							else if (dt["source"].startsWith("junction")){
								cy.$('#'+dt["source"]).data({"weight":8});
								
								var listE = cy.$('#'+dt["target"]).connectedEdges();
								listE.forEach(function( ed ){
									if (((ed.data("source")==dt["target"]) && (ed.data("target")!=dt["source"]))) {
										var flux_initial = edge.target().data("flux");
										var flux_final=1.0;
										var color ='red';
										if (flux_initial==0){
											flux_final = 1.0;
										}
										else if(flux_initial>0){
											flux_final = 1+(1.5*Math.log(1+Math.abs(flux_initial)));
											color ='red';
										}
										else if(flux_initial<0){
											flux_final = 1+(1.5*Math.log(1+Math.abs(flux_initial)));
											color ='blue';
										}
										edge.data({"sshape": ed.data("sshape"),"tshape": ed.data("tshape"),"col": color,"style":ed.data("style"),"width":flux_final,"side":ed.data("side")});
										cy.$('#'+dt["target"]).data({"weight":ed.data("width"),"col":color});
									}
									else if (((ed.data("target")==dt["target"])&& (ed.data("source")!=dt["source"])) ) {
										//console.log(edge.source().data())
										//console.log(edge.target().data())
										//console.log(ed.data())
										var flux_initial = edge.target().data("flux");
										var flux_final=1.0;
										var color ='red';
										if (flux_initial==0){
											flux_final = 1.0;
										}
										else if(flux_initial>0){
											flux_final = 1+(1.5*Math.log(1+Math.abs(flux_initial)));
											color ='red';
										}
										else if(flux_initial<0){
											flux_final = 1+(1.5*Math.log(1+Math.abs(flux_initial)));
											color ='blue';
										}
										edge.data({"sshape": ed.data("tshape"),"tshape": ed.data("sshape"),"col": color,"style":ed.data("style"),"width":flux_final,"side":ed.data("side")});
										cy.$('#'+dt["target"]).data({"weight":ed.data("width"),"col":color});
									}
								});
							}
						});
					}
					else{
						var edges = cy.filter('edge[link = "single"]');
						edges.forEach(function( edge ){
							edge.source().connectedEdges().forEach(function( ed ){
								 edge.data({"sshape": ed.data("sshape"),"tshape": ed.data("tshape"),"col": ed.data("col"),"style":ed.data("style"),"width":ed.data("width"),"side":ed.data("side")});
								 if ((ed.data("source")==edge.data("source")) && (ed.data("target")!=edge.data("target"))) {
									cy.$('#'+edge.data("target")).data({"weight":ed.data("width"),"col":ed.data("col")});
								 }
								 else if ((ed.data("target")==edge.data("source"))&& (ed.data("source")!=edge.data("target"))){
									cy.$('#'+edge.data("source")).data({"weight":ed.data("width"),"col":ed.data("col")});
								 }
							});
							
						});
						var edges = cy.filter('edge[link = "multiple_source"], [link = "multiple_target"]');
						edges.forEach(function( edge ){
							var dt = edge.data();
							if (dt["target"].startsWith("junction")){
								cy.$('#'+dt["target"]).data({"weight":8});
								var listE = cy.$('#'+dt["source"]).connectedEdges();
								listE.forEach(function( ed ){
									if (((ed.data("source")==dt["source"]) && (ed.data("target")!=dt["target"]))) {
									//|| ((ed.data("target")==dt["source"])&& (ed.data("source")!=dt["target"])) ){
										edge.data({"sshape": ed.data("sshape"),"tshape": ed.data("tshape"),"col": ed.data("col"),"style":ed.data("style"),"width":ed.data("width"),"side":ed.data("side")});
										cy.$('#'+dt["source"]).data({"weight":ed.data("width"),"col":ed.data("col")});
									}
									else if (((ed.data("target")==dt["source"])&& (ed.data("source")!=dt["target"]))) {
									//|| ((ed.data("target")==dt["source"])&& (ed.data("source")!=dt["target"])) ){
										edge.data({"sshape": ed.data("sshape"),"tshape": ed.data("tshape"),"col": ed.data("col"),"style":ed.data("style"),"width":ed.data("width"),"side":ed.data("side")});
										cy.$('#'+dt["source"]).data({"weight":ed.data("width"),"col":ed.data("col")});
									}
								});
								//console.log(dt)
							}
							else if (dt["source"].startsWith("junction")){
								cy.$('#'+dt["source"]).data({"weight":8});
								
								var listE = cy.$('#'+dt["target"]).connectedEdges();
								listE.forEach(function( ed ){
									if (((ed.data("source")==dt["target"]) && (ed.data("target")!=dt["source"]))) {
									//|| ((ed.data("target")==dt["target"])&& (ed.data("source")!=dt["source"])) ){
										edge.data({"sshape": ed.data("sshape"),"tshape": ed.data("tshape"),"col": ed.data("col"),"style":ed.data("style"),"width":ed.data("width"),"side":ed.data("side")});
										cy.$('#'+dt["target"]).data({"weight":ed.data("width"),"col":ed.data("col")});
									}
									else if (((ed.data("target")==dt["target"])&& (ed.data("source")!=dt["source"])) ) {
									//|| ((ed.data("target")==dt["target"])&& (ed.data("source")!=dt["source"])) ){
										edge.data({"sshape": ed.data("tshape"),"tshape": ed.data("sshape"),"col": ed.data("col"),"style":ed.data("style"),"width":ed.data("width"),"side":ed.data("side")});
										cy.$('#'+dt["target"]).data({"weight":ed.data("width"),"col":ed.data("col")});
									}
								});
							}
						});
					}
					
				});
				
			}
			else{
				cy.batch(function(){
					if (fluxActivated){
						var edges = cy.filter('edge[link = "single"]');
						edges.forEach(function( edge ){
							edge.source().connectedEdges().forEach(function( ed ){
								 edge.data({"sshape": ed.data("sshape"),"tshape": ed.data("tshape"),"col": ed.data("col"),"style":ed.data("style"),"width":ed.data("width"),"side":ed.data("side")});
								 if ((ed.data("source")==edge.data("source")) && (ed.data("target")!=edge.data("target"))) {
									//cy.$('#'+edge.data("target")).data({"weight":ed.data("width"),"col":ed.data("col")});
									edge.data({"sshape":"none","tshape": "none","col": "black","style":ed.data("style"),"width":ed.data("width"),"side":ed.data("side")});
									cy.$('#'+edge.data("target")).data({"weight":8,"col":"black"});
								 }
								 else if ((ed.data("target")==edge.data("source"))&& (ed.data("source")!=edge.data("target"))){
									//cy.$('#'+edge.data("source")).data({"weight":ed.data("width"),"col":ed.data("col")});
									edge.data({"sshape":"none","tshape": "none","col": "black","style":ed.data("style"),"width":ed.data("width"),"side":ed.data("side")});
									cy.$('#'+edge.data("source")).data({"weight":8,"col":"black"});
								 }
							});
							
						});
						
						var edges = cy.filter('edge[link = "multiple_source"], [link = "multiple_target"]');
						edges.forEach(function( edge ){
							var dt = edge.data();
							if (dt["target"].startsWith("junction")){
								cy.$('#'+dt["target"]).data({"weight":15});
								var listE = cy.$('#'+dt["source"]).connectedEdges();
								listE.forEach(function( ed ){
									if (((ed.data("source")==dt["source"]) && (ed.data("target")!=dt["target"])) 
									|| ((ed.data("target")==dt["source"])&& (ed.data("source")!=dt["target"])) ){
										edge.data({"sshape": "none","tshape": "none","col": "black","style":"solid","width":2,"side":""});
										cy.$('#'+dt["source"]).data({"weight":8,"col":"black"});
									}
								});
								
							}
							else if (dt["source"].startsWith("junction")){
								cy.$('#'+dt["source"]).data({"weight":15});
								
								var listE = cy.$('#'+dt["target"]).connectedEdges();
								listE.forEach(function( ed ){
									if (((ed.data("source")==dt["target"]) && (ed.data("target")!=dt["source"])) 
									|| ((ed.data("target")==dt["target"])&& (ed.data("source")!=dt["source"])) ){
										edge.data({"sshape": "none","tshape": "none","col": "black","style":"solid","width":2,"side":""});
										cy.$('#'+dt["target"]).data({"weight":8,"col":"black"});
									}
								});
							}
						});
					}
					else{
						var edges = cy.filter('edge[link = "single"]');
						edges.forEach(function( edge ){
							edge.source().connectedEdges().forEach(function( ed ){
								 edge.data({"sshape": ed.data("sshape"),"tshape": ed.data("tshape"),"col": ed.data("col"),"style":ed.data("style"),"width":ed.data("width"),"side":ed.data("side")});
								 if ((ed.data("source")==edge.data("source")) && (ed.data("target")!=edge.data("target"))) {
									//cy.$('#'+edge.data("target")).data({"weight":ed.data("width"),"col":ed.data("col")});
									edge.data({"sshape":"none","tshape": "none","col": "black","style":ed.data("style"),"width":ed.data("width"),"side":ed.data("side")});
									cy.$('#'+edge.data("target")).data({"weight":8,"col":"black"});
								 }
								 else if ((ed.data("target")==edge.data("source"))&& (ed.data("source")!=edge.data("target"))){
									//cy.$('#'+edge.data("source")).data({"weight":ed.data("width"),"col":ed.data("col")});
									edge.data({"sshape":"none","tshape": "none","col": "black","style":ed.data("style"),"width":ed.data("width"),"side":ed.data("side")});
									cy.$('#'+edge.data("source")).data({"weight":8,"col":"black"});
								 }
							});
							
						});
						
						var edges = cy.filter('edge[link = "multiple_source"], [link = "multiple_target"]');
						edges.forEach(function( edge ){
							var dt = edge.data();
							if (dt["target"].startsWith("junction")){
								cy.$('#'+dt["target"]).data({"weight":15});
								var listE = cy.$('#'+dt["source"]).connectedEdges();
								listE.forEach(function( ed ){
									if (((ed.data("source")==dt["source"]) && (ed.data("target")!=dt["target"])) 
									|| ((ed.data("target")==dt["source"])&& (ed.data("source")!=dt["target"])) ){
										edge.data({"sshape": "none","tshape": "none","col": "black","style":"solid","width":2,"side":""});
										cy.$('#'+dt["source"]).data({"weight":8,"col":"black"});
									}
								});
								
							}
							else if (dt["source"].startsWith("junction")){
								cy.$('#'+dt["source"]).data({"weight":15});
								
								var listE = cy.$('#'+dt["target"]).connectedEdges();
								listE.forEach(function( ed ){
									if (((ed.data("source")==dt["target"]) && (ed.data("target")!=dt["source"])) 
									|| ((ed.data("target")==dt["target"])&& (ed.data("source")!=dt["source"])) ){
										edge.data({"sshape": "none","tshape": "none","col": "black","style":"solid","width":2,"side":""});
										cy.$('#'+dt["target"]).data({"weight":8,"col":"black"});
									}
								});
							}
						});
					}
				});
				
			}
			
		}

		function stopLayout(){
			//var cy = $("#cy").cytoscape("get");
			//console.log(cy.options())
			//document.getElementById("stopL").style.visibility = "hidden";
		}

		function changeLayout(layout){
			var cy = $("#cy").cytoscape("get");
			
			if (layout=="0"){
					cy.remove(cy.elements());
					cy.add( startLayoutElements.elements )
					cy.nodes().forEach(function( node ){
						node.position('x',startLayoutPositions[node.id()].x)
						node.position('y',startLayoutPositions[node.id()].y)
					})
					cy.fit()
			}
			
			else if (layout=="1"){
				//document.getElementById("stopL").style.visibility = "visible";
				//console.log(cy.nodes())
				var options = {
					name: 'cola',

					animate: true, // whether to show the layout as it's running
					refresh: 1, // number of ticks per frame; higher is faster but more jerky
					maxSimulationTime: 35000, // max length in ms to run the layout
					ungrabifyWhileSimulating: false, // so you can't drag nodes during layout
					fit: true, // on every layout reposition of nodes, fit the viewport
					padding: 30, // padding around the simulation
					boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }

					// layout event callbacks
					ready: function(){}, // on layoutready
					stop: function(){
					  //console.log(cy.nodes().)
					  var leafs = cy.nodes(':child').not(':parent');
					  leafs.forEach(function( leaf ){
						  var reac = leaf.siblings('[isReaction]');
						  if(reac.length==1){
							  var y_reac =reac[0].position('y');
							  var l_reac = leaf.position('y');
							  var side_leaf = leaf.data('side');
							  if (side_leaf=="left" ){
								  leaf.position('y',y_reac-80)
							  }
							  else if (side_leaf=="right"){
								  leaf.position('y',y_reac+80)
							  }
							  
						  }
						  //console.log(reac.length)
						  
					  });
					  
					}, // on layoutstop

					// positioning options
					randomize: false, // use random node positions at beginning of layout
					avoidOverlap: true, // if true, prevents overlap of node bounding boxes
					handleDisconnected: true, // if true, avoids disconnected components from overlapping
					nodeSpacing: function( node ){ return 18} , // extra spacing around nodes
					flow: { axis: 'y', minSeparation: 70},//{ axis: 'y', minSeparation: 10 },//{ axis: 'x', minSeparation: 100 },//undefined,//{ axis: 'x', minSeparation: 20 },//{ axis: 'y', minSeparation: 50 }, // use DAG/tree flow layout if specified, e.g. { axis: 'y', minSeparation: 30 }
					alignment: undefined,
					// each can be a constant numerical value or a function like `function( edge ){ return 2; }`
					edgeLength: undefined, // sets edge length directly in simulation
					edgeSymDiffLength: undefined, // symmetric diff edge length in simulation
					edgeJaccardLength: undefined, // jaccard edge length in simulation

					// iterations of cola algorithm; uses default values on undefined
					unconstrIter:  undefined,// unconstrained initial layout iterations
					userConstIter: undefined, // initial layout iterations with user-specified constraints
					allConstIter: undefined, // initial layout iterations with all constraints including non-overlap

					// infinite layout options
					infinite: false // overrides all other options for a forces-all-the-time mode
				};
				cy.layout( options );
				var tmpcoord ={}
				cy.nodes().forEach(function( node ){
					tmpcoord[node.id()]={};
					tmpcoord[node.id()].x=node.position('x')
					tmpcoord[node.id()].y=node.position('y')
				})
				if (historyUndo.length<5){
					historyPositions.push(tmpcoord);
					historyUndo.push(cy.json());
					nextStateJson=historyUndo.length-1;
				}
				else{
					historyPositions.splice(0, 1);
					historyPositions.push(tmpcoord);
					historyUndo.splice(0, 1);
					historyUndo.push(cy.json());
					nextStateJson=historyUndo.length-1;
				}
			}
			else if (layout=="2"){
				var options = {
					name: 'dagre',

					// dagre algo options, uses default value on undefined
					nodeSep: 100, // the separation between adjacent nodes in the same rank
					edgeSep: undefined, // the separation between adjacent edges in the same rank
					rankSep: 100, // the separation between adjacent nodes in the same rank
					rankDir: 'TB', // 'TB' for top to bottom flow, 'LR' for left to right
					minLen: function( edge ){ return 2; }, // number of ranks to keep between the source and target of the edge
					edgeWeight: function( edge ){ return 2; }, // higher weight edges are generally made shorter and straighter than lower weight edges

					// general layout options
					fit: true, // whether to fit to viewport
					padding: 30, // fit padding
					animate: false, // whether to transition the node positions
					animationDuration: 2000, // duration of animation in ms if enabled
					boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
					ready: function(){}, // on layoutready
					stop: function(){
						//console.log(cy.nodes().)
						var leafs = cy.nodes(':child').not(':parent');
						leafs.forEach(function( leaf ){
							var reac = leaf.siblings('[isReaction]');
							if(reac.length==1){
								var y_reac =reac[0].position('y');
								var l_reac = leaf.position('y');
								var side_leaf = leaf.data('side');
								if (side_leaf=="left" ){
									leaf.position('y',y_reac-80)
								}
								else if (side_leaf=="right"){
									leaf.position('y',y_reac+80)
								}
							}
						});
					  
					} // on layoutstop
				};
				cy.layout( options );
			}	
		}
	
	
		var nodes = [];
        for (var i = 0; i < 13; i++) 
        {
            var datum = {
                "value": i
            };
            nodes.push(datum);
        }

        var links = [{"source": 0, "target": 1},
                     {"source": 1, "target": 2},
                     {"source": 2, "target": 0},
                     {"source": 1, "target": 3},
                     {"source": 3, "target": 2},
                     {"source": 3, "target": 4},
                     {"source": 4, "target": 5},
                     {"source": 5, "target": 6},
                     {"source": 5, "target": 7},
                     {"source": 6, "target": 7},
                     {"source": 6, "target": 8},
                     {"source": 7, "target": 8},
                     {"source": 9, "target": 4},
                     {"source": 9, "target": 11},
                     {"source": 9, "target": 10},
                     {"source": 10, "target": 11},
                     {"source": 11, "target": 12},
                     {"source": 12, "target": 10}];

		var w = $("#cy").width();//600;
		var h = $("#cy").height();//600;//600;

		var size = nodes.length;
		nodes.forEach(function(d, i) { 
		d.x = (w / size) * d.value;
		d.y = (h / size) * d.value;
		});

		var listNodes = []; 
		var listEdges = []; 

		//var panSet=false;
		function exportSVG(){

				var cy = $("#cy").cytoscape("get");
				//cy.reset()
				cy.fit();
				//cy.center();
				var boundingBox= cy.elements().renderedBoundingBox({'includeLabels':true});
				var cytoscapeW=boundingBox.w;
				var cytoscapeH=boundingBox.h;
				var cytoscapeLeft=boundingBox.x1;
				var cytoscapeTop=boundingBox.y1;
				var rescalew=boundingBox.w/w;
				var rescaleh=boundingBox.h/h;
				var zoom = cy.zoom();
				var dataStructure = cy.json();
				listNodes=dataStructure.elements.nodes;
				listEdges=dataStructure.elements.edges;
				//console.log(cy.$('#e81').style())
				var listNodes2=[];
				for (elem in listNodes){
					if (listNodes.hasOwnProperty(elem)) {
						if (cy.$('#'+listNodes[elem].data.id).style('display')=='element' && (!(cy.$('#'+listNodes[elem].data.id).isParent()))){
							listNodes2.push(listNodes[elem]);
							//if (cy.$('#'+listNodes[elem].data.id).isParent()){console.log(listNodes[elem].data.id)}
						}
					}
				}
				
				var listNodes3=[];
				for (elem in listNodes){
					if (listNodes.hasOwnProperty(elem)) {
						if (cy.$('#'+listNodes[elem].data.id).style('display')!='none' && (cy.$('#'+listNodes[elem].data.id).isParent())){
							listNodes3.push(listNodes[elem]);
							//if (cy.$('#'+listNodes[elem].data.id).isParent()){console.log(listNodes[elem].data.id)}
						}
					}
				}
				
				//console.log(cy.$('node:visible'))
				//console.log(cy.$('node:hidden'))
				var listEdges2=[];
				for (elem in listEdges){
					if (listEdges.hasOwnProperty(elem)) {
						if (cy.$('#'+listEdges[elem].data.id).style('display')!='none'){
							if (cy.$('#'+listEdges[elem].data.source).style('display')!='none' && cy.$('#'+listEdges[elem].data.target).style('display')!='none'){
							listEdges2.push(listEdges[elem]);
							}
							
						}
					}
				}
				var cRadius = 5/rescalew*zoom; // play with the cRadius value
				var scalingMarker=2.3
				
				var selection = d3.select("#svgchart");
				$("#svgchart").html("");
				var svg = selection.append("svg")
					.attr("viewBox", "0 0 "+w+" "+h);		
				
				
				svg.selectAll('marker')
					.data(listEdges2)
					.enter()
					.append("svg:defs")
					.append('svg:marker')
					.attr('id', function(d){ return "marker_"+ d.data.id})
					.attr("viewBox", function(d) {if ((parseFloat(d.data.width)*scalingMarker)<16) {return "0 0 16 16"} else{return "0 0 "+(parseFloat(d.data.width)*scalingMarker)+" "+(parseFloat(d.data.width)*scalingMarker)}})
					//.attr("refX", function(d) { if (d.data.tshape=="triangle"){return (cRadius+( ((1+d.data.width)/rescalew*zoom)))};  if (d.data.sshape=="triangle"){return (cRadius-( ((1+d.data.width)/rescalew*zoom) ))}})
					//.attr("refX", function(d) { if (d.data.tshape=="triangle"){if ((parseFloat(d.data.width)*3)<16) {return 16+5} else{var scale = ((parseFloat(d.data.width)*3)/16.0);return (((parseFloat(d.data.width)*3)/rescalew*zoom)+5)}};  if (d.data.sshape=="triangle"){if ((parseFloat(d.data.width)*3)<16) {return 0-5} else{return (-5)}}})
					.attr("refX", function(d) { if (d.data.tshape=="triangle"){if ((parseFloat(d.data.width)*scalingMarker)<16) {return 16+5} else{return (((parseFloat(d.data.width)*scalingMarker))+(5))}};  if (d.data.sshape=="triangle"){if ((parseFloat(d.data.width)*scalingMarker)<16) {return 0-5} else{return (-5)}}})
					
					//.attr("refX", function(d) { if (d.data.tshape=="triangle"){return 16+5};  if (d.data.sshape=="triangle"){return 0-5}})
					.attr("refY", function(d) { if ((parseFloat(d.data.width)*scalingMarker)<16) {return 8} else {return (parseFloat(d.data.width)*scalingMarker)/2}})
					.attr("markerUnits", "userSpaceOnUse")
					.attr("markerWidth", function(d) {if ((parseFloat(d.data.width)*scalingMarker)<16) {return  ''+((16)/rescalew*zoom)} else {return  ''+((parseFloat(d.data.width)*scalingMarker)/rescalew*zoom) }})
					.attr("markerHeight", function(d) {if ((parseFloat(d.data.width)*scalingMarker)<16) {return  ''+((16)/rescalew*zoom)} else {return  ''+((parseFloat(d.data.width)*scalingMarker)/rescalew*zoom) }})
					.attr("orient", "auto")
					.append("svg:polygon")
					.style("fill", function(d) {return d.data.col } )
					.attr("points", function(d) { if (d.data.tshape=="triangle"){if ((parseFloat(d.data.width)*scalingMarker)<16) {return "0,0 16,8 0,16 0,8"} else{return "0,0 "+(parseFloat(d.data.width)*scalingMarker)+","+((parseFloat(d.data.width)*scalingMarker)/2)+" 0,"+(parseFloat(d.data.width)*scalingMarker)+" 0,"+((parseFloat(d.data.width)*scalingMarker)/2)}}; if (d.data.sshape=="triangle"){if ((parseFloat(d.data.width)*scalingMarker)<16) {return "16,0 0,8 16,16 16,8"} else{ return (parseFloat(d.data.width)*scalingMarker)+",0 0,"+((parseFloat(d.data.width)*scalingMarker)/2)+" "+(parseFloat(d.data.width)*scalingMarker)+","+(parseFloat(d.data.width)*scalingMarker)+" "+(parseFloat(d.data.width)*scalingMarker)+","+((parseFloat(d.data.width)*scalingMarker)/2)}}});
					
				var lineFunction = d3.svg.line()
					.x(function(d) { return d.x; })
					.y(function(d) { return d.y; })
					.interpolate("basis");
				
				 svg.selectAll("path")
					.data(listEdges2)
					.enter().append("path")
					//.attr("class", "link")
					.attr("stroke", function(d) {return d.data.col })
					.style("stroke-width",function(d) {return ''+(d.data.width/rescalew*zoom) })
					.style("stroke-dasharray",function(d) {if (d.data.style=="dashed"){ return ''+(5/rescalew*zoom)+','+(5/rescalew*zoom)} else if (d.data.style=="dotted"){ return ''+(1/rescalew*zoom)+','+(1/rescalew*zoom)} else{} })
					//.style("stroke-linecap","round")
					.style("fill",'none')
					.attr("d", function(d) {
						var px1= cy.$('#'+d.data.source).position('x');
						var py1= cy.$('#'+d.data.source).position('y');
						var px2= cy.$('#'+d.data.target).position('x');
						var py2= cy.$('#'+d.data.target).position('y');
						//console.log(cy.$('#'+d.data.id).calculateControlPoints())
						//console.log(cy.$('#'+d.data.id).style().calculateControlPoints())
						var x1=(((dataStructure.pan.x)+((px1- (cytoscapeLeft))/rescalew*zoom)));
						var y1 = (((dataStructure.pan.y)+((py1- (cytoscapeTop))/rescalew*zoom))); 
						var x2 = (((dataStructure.pan.x)+((px2- (cytoscapeLeft))/rescalew*zoom))); 
						var y2 = (((dataStructure.pan.y)+((py2- (cytoscapeTop))/rescalew*zoom))); 
						var curve = d.data.curve;
						var center_curve = d.data.center_curve;
						var perpendicular_vector_x= (-y2+y1)*(curve/rescalew*zoom)/-30;
						var perpendicular_vector_y= (x2-x1)*(curve/rescalew*zoom)/-30;
						var t_point_x=(((x2+x1)*0.5)+perpendicular_vector_x)+((x2-x1)*(center_curve-0.5));
						var t_point_y=(((y2+y1)*0.5)+perpendicular_vector_y)+((y2-y1)*(center_curve-0.5));
						
						var listPts = cy.$('#'+d.data.id)[0]._private.rstyle.bezierPts
						if ((parseFloat(d.data.width)*scalingMarker)<16) {
							if (listPts.length>0){
								var pathData=[]
								pathData.push({"x":x1,"y":y1})
								for (var li= 0;li<listPts.length;li++){
									var ptx= (((dataStructure.pan.x)+((listPts[li].x- (cytoscapeLeft))/rescalew*zoom)))
									var pty= (((dataStructure.pan.y)+((listPts[li].y- (cytoscapeTop))/rescalew*zoom)))
									pathData.push({"x":ptx,"y":pty})
								}
								pathData.push({"x":x2,"y":y2})
								//console.log(lineFunction(pathData))
								return lineFunction(pathData);
							}
							else{
								
							 return "M"+x1+","+y1+"Q"+(t_point_x)+","+(t_point_y)+" "+x2+","+y2;
							}
						}
						else{
							if (listPts.length>0){
								var pathData=[]
								pathData.push({"x":x1,"y":y1})
								for (var li= 0;li<listPts.length;li++){
									var ptx= (((dataStructure.pan.x)+((listPts[li].x- (cytoscapeLeft))/rescalew*zoom)))
									var pty= (((dataStructure.pan.y)+((listPts[li].y- (cytoscapeTop))/rescalew*zoom)))
									pathData.push({"x":ptx,"y":pty})
								}
								pathData.push({"x":x2,"y":y2})
								//console.log(lineFunction(pathData))
								return lineFunction(pathData);
							}
							else{
							 return "M"+x1+","+y1+"Q"+(t_point_x)+","+(t_point_y)+" "+x2+","+y2;
							}
						}
					})
					.attr("marker-end", function(d) { if (d.data.tshape=="triangle"){return "url(#marker_" + d.data.id+")"}})
					.attr("marker-start", function(d) { if (d.data.sshape=="triangle"){return "url(#marker_" + d.data.id+")"}});

				svg.append("svg:g")
				   .selectAll("circle")
				   .data(listNodes2)
				   .enter().append("svg:circle")
				   //.attr("class", "node")
				   .attr("cx", function(d) { return (((dataStructure.pan.x)+((d.position.x- (cytoscapeLeft))/rescalew*zoom))); })
				   .attr("cy", function(d) { return (((dataStructure.pan.y)+((d.position.y- (cytoscapeTop))/rescalew*zoom))); })
				   .attr("r", function(d) {if (d.data.col!='black') {return 0.5/rescalew*zoom} else {return 5/rescalew*zoom}})
				   .attr("fill", function(d) {return d.data.col});

				svg.append("svg:g")
				   .selectAll("text")
				   .data(listNodes2)
				   .enter().append("svg:text")
				   .attr("transform", function(d) { return "translate(" + (((dataStructure.pan.x)+((d.position.x- (cytoscapeLeft))/rescalew*zoom))) + "," + (((dataStructure.pan.y)+((d.position.y- (cytoscapeTop))/rescalew*zoom))) + ")"; })
				   .attr("font-style", function(d) {return d.data.fontstyle})
				   .attr("text-anchor", function(d) {if (d.data && d.data.halign && (d.data.halign=='center')){ return 'middle'} else {return 'right'}})
				   //.attr("dominant-baseline", function(d) {if (d.data.valign=='top'){ return 'hanging'} else if (d.data.valign=='bottom'){ return 'text-before-edge'} else {return 'auto'}})
				   .attr("dx", function(d) {if (d.data.valign=='top'){ return '0px'} else if (d.data.valign=='bottom'){ return (5/rescalew*zoom)+'px'} else {return '0px'}})
				   .attr("dy", function(d) {if (d.data.valign=='top'){ return (-5/rescalew*zoom)+'px'} else if (d.data.valign=='bottom'){ return (10/rescalew*zoom)+'px'} else {return '0px'}})
				   .attr("font-size", function(d) {return (parseFloat(d.data.fontsize)/rescalew*zoom)})
				   .text(function(d) { return d.data.name; });

				svg.append("svg:g")
				.selectAll("rect")
				.data(listNodes3)
				.enter().append("svg:rect")
					.attr("x", function(d) { return (((dataStructure.pan.x)+((d.position.x-(cy.$('#'+d.data.id)[0]._private.autoWidth/2)- (cytoscapeLeft))/rescalew*zoom))); })
					.attr("y", function(d) { return ((((dataStructure.pan.y)+((d.position.y-(cy.$('#'+d.data.id)[0]._private.autoHeight/2)- (cytoscapeTop))/rescalew*zoom)) +((parseInt(cy.$('#'+listEdges[elem].data.id).style('width'), 10))/2.0)/rescalew*zoom)) })
					.attr("width", function(d) { return (cy.$('#'+d.data.id)[0]._private.autoWidth/rescalew*zoom)})
					.attr("height", function(d) {return (cy.$('#'+d.data.id)[0]._private.autoHeight/rescalew*zoom)})
					.attr("fill", function(d) {return d.data.col})
					.attr("opacity", function(d) {return cy.$('#'+d.data.id).style("background-opacity")}) //d.style.background-opacity});
				   
				   
				var html = d3.select("svg")
				.attr("version", 1.1)
				.attr("xmlns", "http://www.w3.org/2000/svg")
				.node().parentNode.innerHTML; 
				$('#imagesave').html("");	
				$('#imagesave').append(
				$('<a>')
				  .attr('href-lang', 'image/svg+xml')
				  .attr('href', 'data:image/svg+xml;charset=UTF-8,' +  decodeURIComponent(html).replace(/#/g, '%23'))
				  .text('Link to SVG')
				);
		}
		
		function updateGraphData(){
			
			var cy = $("#cy").cytoscape("get");
			cy.fit();
			var tmpcoord ={}
			cy.nodes().forEach(function( node ){
				if (node.removed()==false){
					tmpcoord[node.id()]={};
					tmpcoord[node.id()].x=node.position('x')
					tmpcoord[node.id()].y=node.position('y')
				}
				else{
					console.log("pb, node does not exist in new graph : "+node.id())
				}
			})
			var saved =  cy.json();
			//console.log(saved.elements)
			for (var i=0; i<saved.elements.edges.length;i++){
					saved.elements.edges[i].data.curve=cy.$('#'+saved.elements.edges[i].data.id).data('curve');
					saved.elements.edges[i].data.curve_center=cy.$('#'+saved.elements.edges[i].data.id).data('center_curve');
					//console.log(cy.$('#'+saved.elements.edges[i].data.id).data('curve'))
				}
				//console.log(tokens)
			var myCanvas = {"canvas" : saved, "coord":tmpcoord, 'reactions':data['reactions'],'tokens':tokens}
			var mlength=JSON.stringify(myCanvas).length;
			var nbArrays=1;
			if (mlength>524288){
				nbArrays=parseInt(Math.ceil(mlength/524288.0));
			}
			if (nbArrays==1){
				document.getElementById("graphdata0").value=JSON.stringify(myCanvas);
			}
			else{
				var stringSfba=JSON.stringify(myCanvas);
				var chunksize=524288;
				var stringChunks=[];
				//console.log(mlength)
				for (var i=0;i<nbArrays;i++){
					stringChunks.push(stringSfba.substring((i*(chunksize-1)), ((i+1)*(chunksize-1))));
					document.getElementById("graphdata"+i).value=stringChunks[i];
				}
			}
			return true;
			
		}
	

}
</script>