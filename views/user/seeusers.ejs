<div class="container">
	<br><br><br>
	<h3>List of Simulocyte members</h3>
	<table class='table'>
		<tr>
			<th></th>
			<th>ID</th>
			<th>Name</th>
			<th>Title</th>
			<th>Email</th>
			
		</tr>
		
		
		<%
		var dataU =[];
		
		//_.each(labs, function(lab) {
		//	dataL.push(lab.name)
		//}
		_.each(users, function(user,ind) { %>
		<tr data-id="<%= user.id %>" data-model="user">
			<% if (user.online) { %>
				<td><img src="/images/icon-online.png"></td>
			<% } else { %>
				<td> <img src="/images/icon-offline.png"></td>
			<% } %>
			<td><%= user.id %></td>
			<%dataU.push(user.name)%>
			<td><%= user.name %></td>
			<td><%= user.title %></td>
			<td><%= user.email %></td>
			
		</tr> 
		
			<%_.each(user.metabolic_nets, function(mtbn,mind) { %>
				<tr><td></td><td>Metabolic network:</td><td><%= mtbn%></td></tr>
			<% }) %>
			<%_.each(user.models, function(mod,mind) { %>
				<tr><td></td><td>QSSPN Model:</td><td><%= mod%></td></tr>
			<% }) %>
		<% }) %>
	</table>
	
	
	<!--<svg class="chart"></svg>-->
	<div id="container"></div>
	
		<script id="fragmentShader" type="x-shader/x-fragment">
		
		uniform float time;
			uniform vec2 resolution;
			varying vec2 vUv;

			void main() {
				
				
				vec2 position = -1.0 + 2.0 * vUv;
				//vec2 p = ( gl_FragCoord.xy / resolution.xy ) - 0.50;
				float sx = 0.2 * (position.x + 0.01) * sin( 100.0 * position.x - 1. * time);
				float dy = 1./ ( 50. * abs(position.y - sx));
				dy += 1./ (20. * length(position - vec2(position.x, 0.)));
				gl_FragColor = vec4( (position.x + 0.50) * dy, 0.23 * dy, dy, 1.0 );
			}
			

		</script>
		
		
		
		<script id="vertexShader" type="x-shader/x-vertex">

			varying vec2 vUv;

			void main()
			{
				vUv = uv;
				vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
				gl_Position = projectionMatrix * mvPosition;
			}

		</script>
		
		
	
	<script id="fragmentShader2" type="x-shader/x-fragment">
		
		varying vec2 vUv;
		uniform float time;

	uniform vec2 resolution;

	float length2(vec2 p) { return dot(p, p); }

	float noise(vec2 p){
		return fract(sin(fract(sin(p.x) * (43.13311)) + p.y) * 31.0011);
	}

	float worley(vec2 p) {
		float d = 1e30;
		for (int xo = -1; xo <= 1; ++xo) {
			for (int yo = -1; yo <= 1; ++yo) {
				vec2 tp = floor(p) + vec2(xo, yo);
				d = min(d, length2(p - tp - vec2(noise(tp))));
			}
		}
		return 3.0*exp(-4.0*abs(2.0*d - 1.0));
	}

	float fworley(vec2 p) {
		return sqrt(sqrt(sqrt(
			0.01 * // light
			worley(p*5. + .3 + time*.0225) *
			sqrt(worley(p * 50. + 0.3 + 0.2*time * -0.15)) *
			sqrt(sqrt(worley(p * -10. + 9.3))))));
	}

	void main() {
		vec2 uv = vUv;
		float t = fworley(uv  / 1.0);
		t *= exp(-length2(abs(uv - 0.5)));//t *= exp(-length2(abs(0.7*uv - 1.0)));
		gl_FragColor = vec4(t * vec3(1.0, t, t ), 0.0);
	}
	
	
	</script>
	<script id="vertexShader2" type="x-shader/x-vertex">

			varying vec2 vUv;

			void main()
			{
				vUv = uv;
				vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
				gl_Position = projectionMatrix * mvPosition;
			}

		</script>	
		
		
<script>

			// var w = 960, h = 500;

			// var labelDistance = 0;

			// var vis = d3.select("body").append("svg:svg").attr("width", w).attr("height", h);

			// var nodes = [];
			// var labelAnchors = [];
			// var labelAnchorLinks = [];
			// var links = [];
			var list_users= <%-JSON.stringify(dataU)%>;
			var list_labs= <%-JSON.stringify(labs)%>;
			// //console.log(list_labs);
			// for(var i = 0; i < list_users.length; i++) {
				// var node = {
					// label : list_users[i]
				// };
				// nodes.push(node);
				// labelAnchors.push({
					// node : node
				// });
				// labelAnchors.push({
					// node : node
				// });
			// };

			// for(var i = 0; i < nodes.length; i++) {
				// for(var j = 0; j < i; j++) {
					// if(Math.random() >= 0.0)
						// links.push({
							// source : i,
							// target : j,
							// weight : Math.random()
						// });
				// }
				// labelAnchorLinks.push({
					// source : i * 2,
					// target : i * 2 + 1,
					// weight : 1
				// });
			// };

			// var force = d3.layout.force().size([w, h]).nodes(nodes).links(links).gravity(1).linkDistance(50).charge(-3000).linkStrength(function(x) {
				// return x.weight * 10
			// });


			// force.start();

			// var force2 = d3.layout.force().nodes(labelAnchors).links(labelAnchorLinks).gravity(0).linkDistance(0).linkStrength(8).charge(-100).size([w, h]);
			// force2.start();

			// var link = vis.selectAll("line.link").data(links).enter().append("svg:line").attr("class", "link").style("stroke", "#CCC");

			// var node = vis.selectAll("g.node").data(force.nodes()).enter().append("svg:g").attr("class", "node");
			// node.append("svg:circle").attr("r", 5).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3);
			// node.call(force.drag);


			// var anchorLink = vis.selectAll("line.anchorLink").data(labelAnchorLinks)//.enter().append("svg:line").attr("class", "anchorLink").style("stroke", "#999");

			// var anchorNode = vis.selectAll("g.anchorNode").data(force2.nodes()).enter().append("svg:g").attr("class", "anchorNode");
			// anchorNode.append("svg:circle").attr("r", 0).style("fill", "#FFF");
				// anchorNode.append("svg:text").text(function(d, i) {
				// return i % 2 == 0 ? "" : d.node.label
			// }).style("fill", "#555").style("font-family", "Arial").style("font-size", 12);

			// var updateLink = function() {
				// this.attr("x1", function(d) {
					// return d.source.x;
				// }).attr("y1", function(d) {
					// return d.source.y;
				// }).attr("x2", function(d) {
					// return d.target.x;
				// }).attr("y2", function(d) {
					// return d.target.y;
				// });

			// }

			// var updateNode = function() {
				// this.attr("transform", function(d) {
					// return "translate(" + d.x + "," + d.y + ")";
				// });

			// }


			// force.on("tick", function() {

				// force2.start();

				// node.call(updateNode);

				// anchorNode.each(function(d, i) {
					// if(i % 2 == 0) {
						// d.x = d.node.x;
						// d.y = d.node.y;
					// } else {
						// var b = this.childNodes[1].getBBox();

						// var diffX = d.x - d.node.x;
						// var diffY = d.y - d.node.y;

						// var dist = Math.sqrt(diffX * diffX + diffY * diffY);

						// var shiftX = b.width * (diffX - dist) / (dist * 2);
						// shiftX = Math.max(-b.width, Math.min(0, shiftX));
						// var shiftY = 5;
						// this.childNodes[1].setAttribute("transform", "translate(" + shiftX + "," + shiftY + ")");
					// }
				// });


				// anchorNode.call(updateNode);

				// link.call(updateLink);
				// anchorLink.call(updateLink);

			// });
			
			
		if ( ! Detector.webgl ) Detector.addGetWebGLMessage();
			var uniforms, uniforms2;
			var text0 = document.createElement('div');
			text0.style.position = 'absolute';
			text0.style.width = 100;
			text0.style.height = 100;
			text0.style.color = "white";
			text0.style.textAlign="left";
			//text0.style.backgroundColor = "#FFFFCC";
			//text1.innerHTML = ' <input type="text" name="first_name" value="" maxlength="100" />';
			text0.innerHTML = '';
			text0.style.top = 200 + 'px';
			text0.style.left = 200 + 'px';
			document.body.appendChild(text0);
		
			var effectFXAA;
			var selectedModelName="";
			var mouseX = 0, mouseY = 0,			
			windowHalfX = window.innerWidth / 2,
			windowHalfY = window.innerHeight / 2,
			camera, scene, renderer, material, composer;
			var mouse = new THREE.Vector2(), INTERSECTED;
			var select_mesh;
			//var projector = new THREE.Projector();
			var raycaster = new THREE.Raycaster();
			var directionalLight;
			var controls;
			var clock = new THREE.Clock();
			var bline;
			init();
			animate();

			function init() {

				var i, container;

				//container = document.createElement( 'div' );
				container = document.getElementById("container");
				document.body.appendChild( container );

				camera = new THREE.PerspectiveCamera( 33, window.innerWidth / window.innerHeight, 1, 100000 );
				camera.position.z = 2000;
				camera.position.y = 100;
				scene = new THREE.Scene();

				renderer = new THREE.WebGLRenderer( { antialias: false } );
				renderer.setSize( window.innerWidth, window.innerHeight );
				renderer.autoClear = false;

				container.appendChild( renderer.domElement );

				/*
				var geometry = new THREE.Geometry(),
					geometry2 = new THREE.Geometry(),
					geometry3 = new THREE.Geometry(),
					points = hilbert3D( new THREE.Vector3( 0,0,0 ), 200.0, 2, 0, 1, 2, 3, 4, 5, 6, 7 ),
					colors = [], colors2 = [], colors3 = [];

				for ( i = 0; i < points.length; i ++ ) {

					geometry.vertices.push( points[ i ] );

					colors[ i ] = new THREE.Color( 0xffffff );
					colors[ i ].setHSL( 0.6, 1.0, Math.max( 0, ( 200 - points[ i ].x ) / 400 ) * 0.5 + 0.5 );

					colors2[ i ] = new THREE.Color( 0xffffff );
					colors2[ i ].setHSL( 0.3, 1.0, Math.max( 0, ( 200 + points[ i ].x ) / 400 ) * 0.5 );

					colors3[ i ] = new THREE.Color( 0xffffff );
					colors3[ i ].setHSL( i / points.length, 1.0, 0.5 );

				}

				geometry2.vertices = geometry3.vertices = geometry.vertices;

				geometry.colors = colors;
				geometry2.colors = colors2;
				geometry3.colors = colors3;

				// lines

				material = new THREE.LineBasicMaterial( { color: 0xffffff, opacity: 1.0, linewidth: 1, vertexColors: THREE.VertexColors } );

				var line, p, scale = 0.3, d = 225;
				var parameters =  [
					[ material, scale*1.5, [-d,0,0],  geometry ],
					[ material, scale*1.5, [0,0,0],  geometry2 ],
					[ material, scale*1.5, [d,0,0],  geometry3 ]
				];

				for ( i = 0; i < parameters.length; ++i ) {

					p = parameters[ i ];
					line = new THREE.Line( p[ 3 ],  p[ 0 ] );
					line.scale.x = line.scale.y = line.scale.z =  p[ 1 ];
					line.position.x = p[ 2 ][ 0 ];
					line.position.y = p[ 2 ][ 1 ];
					line.position.z = p[ 2 ][ 2 ];
					scene.add( line );

				}*/
				
				uniforms = {
					time: { type: "f", value: 1.0 },
					resolution: { type: "v2", value: new THREE.Vector2() }
				};

				var smaterial = new THREE.ShaderMaterial( {

					uniforms: uniforms,
					vertexShader: document.getElementById( 'vertexShader' ).textContent,
					fragmentShader: document.getElementById( 'fragmentShader' ).textContent,
					side: THREE.BackSide 
				} );
				uniforms2 = {
					time: { type: "f", value: 1.0 },
					resolution: { type: "v2", value: new THREE.Vector2() }
				};

				var smaterial2 = new THREE.ShaderMaterial( {

					uniforms: uniforms2,
					vertexShader: document.getElementById( 'vertexShader2' ).textContent,
					fragmentShader: document.getElementById( 'fragmentShader2' ).textContent,
					side: THREE.BackSide 
				} );
				

				//
				//var geo = new THREE.TorusGeometry( 500, 450, 100, 100 );
				var geo = new THREE.SphereGeometry( 100, 32,32 );
				//var geo = new THREE.IcosahedronGeometry(90,3);
				//var material = new THREE.MeshPhongMaterial( {wireframe: true, shading: THREE.FlatShading} );
				//var omesh = new THREE.Mesh( geo, new THREE.MeshBasicMaterial( { color: 0xffaa00, wireframe: true } )  );
				var omesh = new THREE.Mesh( geo, new THREE.MeshPhongMaterial( { 
					color: 0xff0600, 
					ambient: 0xff0600, // should generally match color
					specular: 0xff0505,
					shininess: 1//,side: THREE.BackSide, //wireframe: true
				} ) );
				//var omesh = new THREE.Mesh( geo, smaterial2 );
				
				omesh.rotation.x = -Math.PI/2;
				omesh.name="isosun";
				//omesh.position.y = -100;
				scene.add(omesh);
				
				//var smesh = new THREE.Mesh( new THREE.SphereGeometry( 2000,32, 32), smaterial )
				//smesh.rotation.y = Math.PI/2;
				//scene.add(smesh );
				
				
				
				
				
				
				var smesh2 = new THREE.Mesh( new THREE.SphereGeometry( 20000,32, 32), smaterial2 )
				//var smesh2 = new THREE.Mesh( new THREE.BoxGeometry( 40000,40000, 40000), smaterial2 )
				smesh2.rotation.y = Math.PI/2;
				//smesh2.rotation.x = Math.PI/2;
				scene.add(smesh2 );
				
				// add subtle blue ambient lighting
				var ambientLight = new THREE.AmbientLight(0x000027);
				  
				scene.add(ambientLight);
				  
				// directional lighting
				directionalLight = new THREE.DirectionalLight(0x55ffff); 
				directionalLight.position.set(13, 1, 1).normalize();
				ambientLight.name="dlight"
				scene.add(directionalLight);
	  
				var geo2 = new THREE.IcosahedronGeometry(15,1);
				select_mesh= new THREE.Mesh( geo2, new THREE.MeshBasicMaterial( { color: 0xffffff, wireframe: true } )  );
				select_mesh.position.x =9999999;
				select_mesh.position.y = 9999999;
				select_mesh.position.z =-9999999;
				scene.add(select_mesh );
				
				var arrayUsers=[];
				for (var i=0,j=list_users.length ; i< j; i++){
					//var geo = new THREE.IcosahedronGeometry(10,2);
					var geo = new THREE.BoxGeometry(10,10,10);
					//var material = new THREE.MeshPhongMaterial( {wireframe: true, shading: THREE.FlatShading} );
					arrayUsers[i] = new THREE.Mesh( geo, new THREE.MeshBasicMaterial( { color: '#'+Math.floor(Math.random()*16777215).toString(16), wireframe: false,doubleSided: true} )  );
					var pos= Math.random(1)*2*Math.PI;
					arrayUsers[i].position.x = Math.cos(pos)*300;
					arrayUsers[i].position.y = Math.sin(Math.random(1))*150;
					arrayUsers[i].position.z = Math.sin(pos)*300;
					//arrayUsers[i].geometry.applyMatrix( new THREE.Matrix4().makeTranslation( Math.random(300), 0, 0 ) );
					arrayUsers[i].rotation.y = Math.random() * 2 * Math.PI;
					arrayUsers[i].rotation.x = Math.random() * 2 * Math.PI;
					arrayUsers[i].rotation.z = Math.random() * 2 * Math.PI;
					arrayUsers[i].material.side = THREE.DoubleSide;
					arrayUsers[i].name=list_users[i];
					scene.add(arrayUsers[i] );
					
					
					
				}
				
				
				
				//SUBDIVISIONS = 20;
				var bgeometry = new THREE.Geometry();
				
				//curve.v0 = new THREE.Vector3(arrayUsers[0].position.x, arrayUsers[0].position.y, 0);
				//curve.v1 = new THREE.Vector3(arrayUsers[0].position.x/2, arrayUsers[0].position.y/2-60, 0);
				
				
				for (j = 0; j < list_users.length; j++) {
				bgeometry.vertices.push( new THREE.Vector3(0, 0, 0))
				bgeometry.vertices.push( new THREE.Vector3(arrayUsers[j].position.x, arrayUsers[j].position.y,arrayUsers[j].position.z))
				}
				var bmaterial = new THREE.LineBasicMaterial( { color: 0xffffff, linewidth: 1 ,opacity: 0.4, blending: THREE.AdditiveBlending, transparent: true} );
				bline = new THREE.Line(bgeometry, bmaterial,THREE.LinePieces);
				//scene.add(bline);
				
				//bline.geometry.verticesNeedUpdate=true;
				
				//console.log(bline.position)
				

				

				
				
				
				

				stats = new Stats();
				stats.domElement.style.position = 'absolute';
				stats.domElement.style.top = '0px';
				//container.appendChild( stats.domElement );

				//

				document.addEventListener( 'mousemove', onDocumentMouseMove, false );
				document.addEventListener( 'touchstart', onDocumentTouchStart, false );
				document.addEventListener( 'touchmove', onDocumentTouchMove, false );

				//

				var renderModel = new THREE.RenderPass( scene, camera );
				var effectBloom = new THREE.BloomPass( 1.3 );
				var effectCopy = new THREE.ShaderPass( THREE.CopyShader );

				effectFXAA = new THREE.ShaderPass( THREE.FXAAShader );

				var width = window.innerWidth || 2;
				var height = window.innerHeight || 2;

				effectFXAA.uniforms[ 'resolution' ].value.set( 1 / width, 1 / height );

				effectCopy.renderToScreen = true;

				composer = new THREE.EffectComposer( renderer );

				composer.addPass( renderModel );
				composer.addPass( effectFXAA );
				composer.addPass( effectBloom );
				composer.addPass( effectCopy );
				//projector = new THREE.Projector();
				raycaster = new THREE.Raycaster();
				//
				controls = new THREE.OrbitControls( camera, container  );
				controls.rotateSpeed = 1.0;
				controls.zoomSpeed = 1.2;
				controls.panSpeed = 0.8;
				controls.noZoom = false;
				controls.noPan = false;
				controls.staticMoving = true;
				controls.dynamicDampingFactor = 0.3;
				window.addEventListener( 'resize', onWindowResize, false );

			}

			function onWindowResize() {

				windowHalfX = window.innerWidth / 2;
				windowHalfY = window.innerHeight / 2;
				uniforms.resolution.value.x = window.innerWidth;
				uniforms.resolution.value.y = window.innerHeight;
				uniforms2.resolution.value.x = window.innerWidth;
				uniforms2.resolution.value.y = window.innerHeight;
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

				effectFXAA.uniforms[ 'resolution' ].value.set( 1 / window.innerWidth, 1 / window.innerHeight );

				composer.reset();

			}

			//

			function onDocumentMouseMove( event ) {

				mouseX = event.clientX - windowHalfX;
				mouseY = event.clientY - windowHalfY;
				mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
					//mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;
					mouse.y = - ( (event.clientY-$("#container").position().top+window.pageYOffset) / window.innerHeight ) * 2 + 1;
			}

			function onDocumentTouchStart( event ) {

				if ( event.touches.length > 1 ) {

					event.preventDefault();

					mouseX = event.touches[ 0 ].pageX - windowHalfX;
					mouseY = event.touches[ 0 ].pageY - windowHalfY;
					
				}

			}

			function onDocumentTouchMove( event ) {

				if ( event.touches.length == 1 ) {

					event.preventDefault();

					mouseX = event.touches[ 0 ].pageX - windowHalfX;
					mouseY = event.touches[ 0 ].pageY - windowHalfY;
				}

			}

			//

			function animate() {

				requestAnimationFrame( animate );
				render();

				stats.update();

			}

			function render() {
				controls.update();
				var delta = clock.getDelta();
				uniforms.time.value += delta * 5;
				uniforms2.time.value += delta * 5;
				//camera.position.x += ( mouseX - camera.position.x ) * .01;
				//camera.position.y += ( - mouseY + 200 - camera.position.y ) * .01;

				camera.lookAt( scene.position );
				var vector = new THREE.Vector3( mouse.x, mouse.y, 1 );
				//projector.unprojectVector( vector, camera );
				vector.unproject(camera);
				raycaster.set( camera.position, vector.sub( camera.position ).normalize() );
	
				var intersects = raycaster.intersectObjects( scene.children );
				if ( intersects.length > 0 ) {
					
					
					if ( INTERSECTED != intersects[ 0 ].object) {

						

						INTERSECTED = intersects[ 0 ].object;
						//console.log(intersects)
						
						if ( INTERSECTED.name && INTERSECTED.name!="isosun") {
							//console.log(INTERSECTED)
							selectedModelName=INTERSECTED.name;
							//select_mesh.position.set(INTERSECTED.position.x,0.99, INTERSECTED.position.z );
							//select_mesh.scale.x=(INTERSECTED.geometry.vertices[1]-INTERSECTED.geometry.vertices[0]);
							
							//select_mesh.geometry.vertices[0]=INTERSECTED.geometry.vertices[0];
							
							//select_mesh.geometry.vertices[1]=INTERSECTED.geometry.vertices[1];
							
							//select_mesh.geometry.vertices[2]=INTERSECTED.geometry.vertices[2];
							//select_mesh.geometry.vertices[3]=INTERSECTED.geometry.vertices[3];
							//select_mesh.scale.x=1.15;
							//select_mesh.scale.y=1.05;
							//select_mesh.geometry.verticesNeedUpdate = true;
							
							//text0.style.top = $("#mcontainer").position().top+150 + 'px';								
							//text0.style.left = window.innerWidth*0.75+ 'px';
							//var nm=myListModels[parseInt(selectedModelName.substring(1))];
							//text0.innerHTML="<div style='width:400px;height:"+$("#mcontainer").css( "height" )*0.7+"px;border:1px solid #ffffff;'><h2 class='mytab1'>"+nm+"</h2><h3 class='mytab1'>"+listMTNs[nm][0]+"</h3><br><p class='mytab1'>"+results[nm][0].length+" model nodes linked to "+results[nm].length+" metabolic network nodes.</p><p class='mytab1'>Links between the model and the metabolic network are shown with an ("+results[nm][0].length+" x "+results[nm].length+") adjacency matrix.</p></div>";
							//document.getElementById("democ0").style.top=$("#mcontainer").position().top+150 + 'px';
							//document.getElementById("democ0").style.left=window.innerWidth*0.05+ 'px';
							//updateD3jsData();
							//console.log(INTERSECTED.name)
							select_mesh.position.x=INTERSECTED.position.x;
							select_mesh.position.y=INTERSECTED.position.y;
							select_mesh.position.z=INTERSECTED.position.z;
							//select_mesh.scale.y = INTERSECTED.scale.y*2;
							//areaLight4.position.set( INTERSECTED.position.x, 5, 24.001 );
							//areaLight4.rotation.set( Math.PI/2, 0.0001, 0.0001 );
							//areaLight4.width = 10;
							//areaLight4.height = 10;
							text0.style.top = $("#container").position().top+150 + 'px';								
							text0.style.left = window.innerWidth*0.75+ 'px';
							
							text0.innerHTML="<h2>User : </h2> <h3>"+selectedModelName+"</h3>";
						}
						//if ( INTERSECTED && INTERSECTED.name && INTERSECTED.name[0]=="m") {
							//console.log("model")
						//INTERSECTED.material.emissive.setHex( INTERSECTED.currentHex );
						//INTERSECTED.currentHex = INTERSECTED.material.emissive.getHex();
						//INTERSECTED.material.emissive.setHex( 0xff0000 );
						//}
						//INTERSECTED.currentHex = INTERSECTED.material.emissive.getHex();
						//INTERSECTED.material.emissive.setHex( 0xff0000 );
						
					}

				} else {

					//if ( INTERSECTED ) INTERSECTED.material.emissive.setHex( INTERSECTED.currentHex );

					INTERSECTED = null;
					//select_mesh.position.set(9999999,0.5, -9999999 );
					//text0.style.top = '8000px';								
					//text0.style.left = '8000px';
				}
				
				
				var time = Date.now() * 0.0005;

				for ( var i = 0; i < scene.children.length; i ++ ) {

					var object = scene.children[ i ];
					if ( object.name=="isosun" || object instanceof THREE.DirectionalLight) {//object.rotation.y = time * ( i % 2 ? 1 : -1 );}
					}
					else{
						//object.position.x += Math.cos(time )*300;
						var euler = new THREE.Euler( 0, delta/2, 0, 'XYZ' );
						object.position.applyEuler(euler);
						//bline.rotation.y+=( Math.sin(delta/14));
						
					}

				}
				
				renderer.clear();
				composer.render();

			}
			
		
			
			
			
</script>
		

		
</div>