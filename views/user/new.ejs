<form action="/user/create" method="POST" id="sign-up-form" class="form-signin">
	<h2 class="form-signin-heading">Create an account</h2>

	<% if(flash && flash.err) { %>
		<ul class="alert alert-success">
	<% Object.keys(flash.err).forEach(function(error) { %>
		<li><%- JSON.stringify(flash.err[error]) %></li>
	<% }) %>
	</ul>
	<% } %>

	
	<div class="control-group">
	<input type="text" class="form-control" placeholder="your name" name="name">
	</div>

	<div class="control-group">
	<input type="text" class="form-control" placeholder="your title" name="title">
	</div>
	
	<div class="control-group">
	<input type="text" class="form-control" placeholder="email address" name="email">
	</div>

	<div class="control-group">
	<input type="password" class="form-control" placeholder="password" name="password" id="password">
	</div>

	<div class="control-group">
	<input type="password" class="form-control" placeholder="password confirmation" name="confirmation">
	<br />
	</div>

	<input type="submit" class="btn btn-lg btn-primary btn-block" value="Create Account"/>
	<input type="hidden" name="_csrf" value="<%= _csrf %>" />
</form>
<div id="container" style="position: absolute;left: 0px;"></div>
<div id="info"><a href="http://threejs.org" target="_blank">three.js</a> webgl - buffergeometry - lines</div>
<script>

			if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

			var container, stats;

			var camera, scene, renderer;

			var mesh;

			init();
			animate();

			function init() {

				container = document.getElementById( 'container' );

				//

				camera = new THREE.PerspectiveCamera( 27, window.innerWidth / window.innerHeight, 5, 3500 );
				camera.position.z = 2750;

				scene = new THREE.Scene();
				scene.fog = new THREE.Fog( 0x050505, 2000, 3500 );

				//

				var particles = 500000;

				var geometry = new THREE.BufferGeometry();

				geometry.addAttribute( 'position', new Float32Array( particles * 3 ), 3 );
				geometry.addAttribute( 'color', new Float32Array( particles * 3 ), 3 );

				var positions = geometry.getAttribute( 'position' ).array;
				var colors = geometry.getAttribute( 'color' ).array;

				var color = new THREE.Color();

				var n = 1000, n2 = n / 2; // particles spread in the cube

				for ( var i = 0; i < positions.length; i += 3 ) {

					// positions

					var x = Math.random() * n - n2;
					var y = Math.random() * n - n2;
					var z = Math.random() * n - n2;

					positions[ i ]     = x;
					positions[ i + 1 ] = y;
					positions[ i + 2 ] = z;

					// colors

					var vx = ( x / n ) + 0.5;
					var vy = ( y / n ) + 0.5;
					var vz = ( z / n ) + 0.5;

					color.setRGB( vx, vy, vz );

					colors[ i ]     = color.r;
					colors[ i + 1 ] = color.g;
					colors[ i + 2 ] = color.b;

				}

				geometry.computeBoundingSphere();

				//

				var material = new THREE.ParticleSystemMaterial( { size: 15, vertexColors: true } );

				particleSystem = new THREE.ParticleSystem( geometry, material );
				scene.add( particleSystem );

				//

				renderer = new THREE.WebGLRenderer( { antialias: false } );
				renderer.setClearColor( scene.fog.color, 1 );
				renderer.setSize( window.innerWidth, window.innerHeight );

				container.appendChild( renderer.domElement );

				//

				stats = new Stats();
				stats.domElement.style.position = 'absolute';
				stats.domElement.style.top = '0px';
				container.appendChild( stats.domElement );

				//

				window.addEventListener( 'resize', onWindowResize, false );

			}

			function onWindowResize() {

				windowHalfX = window.innerWidth / 2;
				windowHalfY = window.innerHeight / 2;

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			//

			function animate() {

				requestAnimationFrame( animate );

				render();
				stats.update();

			}

			function render() {

				var time = Date.now() * 0.001;

				particleSystem.rotation.x = time * 0.25;
				particleSystem.rotation.y = time * 0.5;

				renderer.render( scene, camera );

			}

		</script>